
STM32H750B-DK_Temperature_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f604  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003380  0800f8a4  0800f8a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012c24  08012c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012c2c  08012c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012c30  08012c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d8  24000000  08012c34  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001214  240000d8  08012d0c  000140d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240012ec  08012d0c  000142ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000140d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030a2d  00000000  00000000  00014106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ed8  00000000  00000000  00044b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024e8  00000000  00000000  0004aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c8f  00000000  00000000  0004cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c272  00000000  00000000  0004eb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00035124  00000000  00000000  0005adf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019550e  00000000  00000000  0008ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022542b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a258  00000000  00000000  00225470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008c  00000000  00000000  0022f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d8 	.word	0x240000d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f88c 	.word	0x0800f88c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000dc 	.word	0x240000dc
 80002dc:	0800f88c 	.word	0x0800f88c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	e02c      	b.n	80006f2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	891a      	ldrh	r2, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	691a      	ldr	r2, [r3, #16]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a0c      	ldr	r2, [pc, #48]	@ (80006fc <FT5336_RegisterBusIO+0x7c>)
 80006cc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000700 <FT5336_RegisterBusIO+0x80>)
 80006d2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4798      	blx	r3
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	e002      	b.n	80006f2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08000af9 	.word	0x08000af9
 8000700:	08000b2d 	.word	0x08000b2d

08000704 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2205      	movs	r2, #5
 800071e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000726:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800072e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10d      	bne.n	8000770 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f987 	bl	8000a6e <FT5336_DisableIT>
 8000760:	4602      	mov	r2, r0
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800077c:	68fb      	ldr	r3, [r7, #12]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000798:	2b01      	cmp	r3, #1
 800079a:	d103      	bne.n	80007a4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 80007a4:	68fb      	ldr	r3, [r7, #12]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f103 0218 	add.w	r2, r3, #24
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	4610      	mov	r0, r2
 80007cc:	f000 fa25 	bl	8000c1a <ft5336_radian_value>
 80007d0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f103 0218 	add.w	r2, r3, #24
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	4610      	mov	r0, r2
 80007e2:	f000 fa2b 	bl	8000c3c <ft5336_offset_left_right>
 80007e6:	4602      	mov	r2, r0
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f103 0218 	add.w	r2, r3, #24
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	4610      	mov	r0, r2
 80007fe:	f000 fa2e 	bl	8000c5e <ft5336_offset_up_down>
 8000802:	4602      	mov	r2, r0
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f103 0218 	add.w	r2, r3, #24
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	4610      	mov	r0, r2
 800081a:	f000 fa31 	bl	8000c80 <ft5336_disatnce_left_right>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f103 0218 	add.w	r2, r3, #24
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4619      	mov	r1, r3
 8000834:	4610      	mov	r0, r2
 8000836:	f000 fa34 	bl	8000ca2 <ft5336_distance_up_down>
 800083a:	4602      	mov	r2, r0
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4413      	add	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f103 0218 	add.w	r2, r3, #24
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	4610      	mov	r0, r2
 8000852:	f000 fa37 	bl	8000cc4 <ft5336_distance_zoom>
 8000856:	4602      	mov	r2, r0
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
 8000868:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3318      	adds	r3, #24
 8000882:	6839      	ldr	r1, [r7, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fa3f 	bl	8000d08 <ft5336_chip_id>
 800088a:	4603      	mov	r3, r0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f908 	bl	8000ab8 <FT5336_DetectTouch>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f103 0018 	add.w	r0, r3, #24
 80008b6:	f107 0208 	add.w	r2, r7, #8
 80008ba:	2304      	movs	r3, #4
 80008bc:	2103      	movs	r1, #3
 80008be:	f000 f94f 	bl	8000b60 <ft5336_read_reg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e00f      	b.n	80008f0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80008d0:	7a3b      	ldrb	r3, [r7, #8]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80008d8:	7a7a      	ldrb	r2, [r7, #9]
 80008da:	431a      	orrs	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80008e0:	7abb      	ldrb	r3, [r7, #10]
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80008e8:	7afa      	ldrb	r2, [r7, #11]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80008f0:	68fb      	ldr	r3, [r7, #12]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b08c      	sub	sp, #48	@ 0x30
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8d5 	bl	8000ab8 <FT5336_DetectTouch>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f103 0018 	add.w	r0, r3, #24
 800091c:	f107 0208 	add.w	r2, r7, #8
 8000920:	231e      	movs	r3, #30
 8000922:	2103      	movs	r1, #3
 8000924:	f000 f91c 	bl	8000b60 <ft5336_read_reg>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000934:	e077      	b.n	8000a26 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800093a:	e071      	b.n	8000a20 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800093c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	3330      	adds	r3, #48	@ 0x30
 8000948:	443b      	add	r3, r7
 800094a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8000954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	3301      	adds	r3, #1
 8000960:	3330      	adds	r3, #48	@ 0x30
 8000962:	443b      	add	r3, r7
 8000964:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000968:	ea41 0203 	orr.w	r2, r1, r3
 800096c:	6839      	ldr	r1, [r7, #0]
 800096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8000976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	3302      	adds	r3, #2
 8000982:	3330      	adds	r3, #48	@ 0x30
 8000984:	443b      	add	r3, r7
 8000986:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8000990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	3303      	adds	r3, #3
 800099c:	3330      	adds	r3, #48	@ 0x30
 800099e:	443b      	add	r3, r7
 80009a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80009a4:	4319      	orrs	r1, r3
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009aa:	3206      	adds	r2, #6
 80009ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80009b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	3330      	adds	r3, #48	@ 0x30
 80009bc:	443b      	add	r3, r7
 80009be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80009c2:	099b      	lsrs	r3, r3, #6
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4619      	mov	r1, r3
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009cc:	3210      	adds	r2, #16
 80009ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80009d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	3304      	adds	r3, #4
 80009de:	3330      	adds	r3, #48	@ 0x30
 80009e0:	443b      	add	r3, r7
 80009e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80009e6:	4619      	mov	r1, r3
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ec:	330a      	adds	r3, #10
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80009f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	3305      	adds	r3, #5
 8000a00:	3330      	adds	r3, #48	@ 0x30
 8000a02:	443b      	add	r3, r7
 8000a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000a08:	091b      	lsrs	r3, r3, #4
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a12:	3314      	adds	r3, #20
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8000a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d98a      	bls.n	800093c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8000a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3730      	adds	r7, #48	@ 0x30
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3318      	adds	r3, #24
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f8bb 	bl	8000bbc <ft5336_gest_id>
 8000a46:	4603      	mov	r3, r0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f941 	bl	8000ce6 <ft5336_g_mode>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3318      	adds	r3, #24
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f932 	bl	8000ce6 <ft5336_g_mode>
 8000a82:	4603      	mov	r3, r0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3318      	adds	r3, #24
 8000ac4:	f107 020b 	add.w	r2, r7, #11
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f886 	bl	8000bdc <ft5336_td_status>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	e007      	b.n	8000aee <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8000ade:	7afb      	ldrb	r3, [r7, #11]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d902      	bls.n	8000aea <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	e001      	b.n	8000aee <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	461a      	mov	r2, r3
 8000b04:	460b      	mov	r3, r1
 8000b06:	72fb      	strb	r3, [r7, #11]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	691c      	ldr	r4, [r3, #16]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	8918      	ldrh	r0, [r3, #8]
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	b299      	uxth	r1, r3
 8000b1c:	893b      	ldrh	r3, [r7, #8]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	47a0      	blx	r4
 8000b22:	4603      	mov	r3, r0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}

08000b2c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	461a      	mov	r2, r3
 8000b38:	460b      	mov	r3, r1
 8000b3a:	72fb      	strb	r3, [r7, #11]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	68dc      	ldr	r4, [r3, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	8918      	ldrh	r0, [r3, #8]
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	b299      	uxth	r1, r3
 8000b50:	893b      	ldrh	r3, [r7, #8]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	47a0      	blx	r4
 8000b56:	4603      	mov	r3, r0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}

08000b60 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	72fb      	strb	r3, [r7, #11]
 8000b70:	4613      	mov	r3, r2
 8000b72:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	685c      	ldr	r4, [r3, #4]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6898      	ldr	r0, [r3, #8]
 8000b7c:	893b      	ldrh	r3, [r7, #8]
 8000b7e:	7af9      	ldrb	r1, [r7, #11]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	47a0      	blx	r4
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8000b8e:	b590      	push	{r4, r7, lr}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	72fb      	strb	r3, [r7, #11]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681c      	ldr	r4, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6898      	ldr	r0, [r3, #8]
 8000baa:	893b      	ldrh	r3, [r7, #8]
 8000bac:	7af9      	ldrb	r1, [r7, #11]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	47a0      	blx	r4
 8000bb2:	4603      	mov	r3, r0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd90      	pop	{r4, r7, pc}

08000bbc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ffc7 	bl	8000b60 <ft5336_read_reg>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8000be6:	2301      	movs	r3, #1
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	2102      	movs	r1, #2
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffb7 	bl	8000b60 <ft5336_read_reg>
 8000bf2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10a      	bne.n	8000c10 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000c10:	68fb      	ldr	r3, [r7, #12]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8000c26:	1cfa      	adds	r2, r7, #3
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2191      	movs	r1, #145	@ 0x91
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffae 	bl	8000b8e <ft5336_write_reg>
 8000c32:	4603      	mov	r3, r0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8000c48:	1cfa      	adds	r2, r7, #3
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2192      	movs	r1, #146	@ 0x92
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff9d 	bl	8000b8e <ft5336_write_reg>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8000c6a:	1cfa      	adds	r2, r7, #3
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2193      	movs	r1, #147	@ 0x93
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff8c 	bl	8000b8e <ft5336_write_reg>
 8000c76:	4603      	mov	r3, r0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8000c8c:	1cfa      	adds	r2, r7, #3
 8000c8e:	2301      	movs	r3, #1
 8000c90:	2194      	movs	r1, #148	@ 0x94
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff7b 	bl	8000b8e <ft5336_write_reg>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8000cae:	1cfa      	adds	r2, r7, #3
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	2195      	movs	r1, #149	@ 0x95
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff6a 	bl	8000b8e <ft5336_write_reg>
 8000cba:	4603      	mov	r3, r0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8000cd0:	1cfa      	adds	r2, r7, #3
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	2196      	movs	r1, #150	@ 0x96
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff59 	bl	8000b8e <ft5336_write_reg>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8000cf2:	1cfa      	adds	r2, r7, #3
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	21a4      	movs	r1, #164	@ 0xa4
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff48 	bl	8000b8e <ft5336_write_reg>
 8000cfe:	4603      	mov	r3, r0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8000d12:	2301      	movs	r3, #1
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	21a8      	movs	r1, #168	@ 0xa8
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff21 	bl	8000b60 <ft5336_read_reg>
 8000d1e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d107      	bne.n	8000d36 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f832 	bl	8000dc0 <MT48LC4M32B2_ClockEnable>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d128      	bne.n	8000db4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 f8e2 	bl	8000f2c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f84a 	bl	8000e08 <MT48LC4M32B2_Precharge>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d11c      	bne.n	8000db4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	461a      	mov	r2, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f897 	bl	8000eb8 <MT48LC4M32B2_RefreshMode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d111      	bne.n	8000db4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f85c 	bl	8000e50 <MT48LC4M32B2_ModeRegConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10a      	bne.n	8000db4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	4619      	mov	r1, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f8ad 	bl	8000f04 <MT48LC4M32B2_RefreshRate>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de6:	4907      	ldr	r1, [pc, #28]	@ (8000e04 <MT48LC4M32B2_ClockEnable+0x44>)
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f00b fb5f 	bl	800c4ac <HAL_SDRAM_SendCommand>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	e000      	b.n	8000dfc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000dfa:	2300      	movs	r3, #0
  }
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	240000f4 	.word	0x240000f4

08000e08 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MT48LC4M32B2_Precharge+0x44>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000e18:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <MT48LC4M32B2_Precharge+0x44>)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <MT48LC4M32B2_Precharge+0x44>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MT48LC4M32B2_Precharge+0x44>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000e2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e2e:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <MT48LC4M32B2_Precharge+0x44>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f00b fb3b 	bl	800c4ac <HAL_SDRAM_SendCommand>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	e000      	b.n	8000e44 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000e42:	2300      	movs	r3, #0
  }
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	240000f4 	.word	0x240000f4

08000e50 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000e62:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000e68:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000e6e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000e84:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000e8c:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e96:	4907      	ldr	r1, [pc, #28]	@ (8000eb4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f00b fb07 	bl	800c4ac <HAL_SDRAM_SendCommand>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	e000      	b.n	8000eac <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000eaa:	2300      	movs	r3, #0
  }
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	240000f4 	.word	0x240000f4

08000eb8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000eca:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8000edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <MT48LC4M32B2_RefreshMode+0x48>)
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f00b fae2 	bl	800c4ac <HAL_SDRAM_SendCommand>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e000      	b.n	8000ef6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000ef4:	2300      	movs	r3, #0
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240000f4 	.word	0x240000f4

08000f04 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f00b fb00 	bl	800c516 <HAL_SDRAM_ProgramRefreshRate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e000      	b.n	8000f24 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8000f22:	2300      	movs	r3, #0
  }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000f34:	f004 f89e 	bl	8005074 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000f3a:	bf00      	nop
 8000f3c:	f004 f89a 	bl	8005074 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000f7e:	4a36      	ldr	r2, [pc, #216]	@ (8001058 <MX_ADC1_Init+0x100>)
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f82:	4b34      	ldr	r3, [pc, #208]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f88:	4b32      	ldr	r3, [pc, #200]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fac:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd2:	4820      	ldr	r0, [pc, #128]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fd4:	f004 fa58 	bl	8005488 <HAL_ADC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000fde:	f000 fc69 	bl	80018b4 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fe4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff0:	4818      	ldr	r0, [pc, #96]	@ (8001054 <MX_ADC1_Init+0xfc>)
 8000ff2:	f004 fa49 	bl	8005488 <HAL_ADC_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ffc:	f000 fc5a 	bl	80018b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_ADC1_Init+0xfc>)
 800100c:	f005 fab6 	bl	800657c <HAL_ADCEx_MultiModeConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001016:	f000 fc4d 	bl	80018b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <MX_ADC1_Init+0x104>)
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101e:	2306      	movs	r3, #6
 8001020:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001026:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800102a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102c:	2304      	movs	r3, #4
 800102e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_ADC1_Init+0xfc>)
 800103e:	f004 fd91 	bl	8005b64 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001048:	f000 fc34 	bl	80018b4 <Error_Handler>
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	24000104 	.word	0x24000104
 8001058:	40022000 	.word	0x40022000
 800105c:	4b840000 	.word	0x4b840000

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ba      	sub	sp, #232	@ 0xe8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	22c0      	movs	r2, #192	@ 0xc0
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00d ff83 	bl	800ef8c <memset>
  if(adcHandle->Instance==ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a2b      	ldr	r2, [pc, #172]	@ (8001138 <HAL_ADC_MspInit+0xd8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d14f      	bne.n	8001130 <HAL_ADC_MspInit+0xd0>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001090:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80010a0:	230a      	movs	r3, #10
 80010a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010b0:	23c0      	movs	r3, #192	@ 0xc0
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010b4:	2320      	movs	r3, #32
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 fcac 	bl	8009a24 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80010d2:	f000 fbef 	bl	80018b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 80010d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010dc:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 80010e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <HAL_ADC_MspInit+0xdc>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001112:	2310      	movs	r3, #16
 8001114:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <HAL_ADC_MspInit+0xe0>)
 800112c:	f005 feea 	bl	8006f04 <HAL_GPIO_Init>
  }
}
 8001130:	bf00      	nop
 8001132:	37e8      	adds	r7, #232	@ 0xe8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40022000 	.word	0x40022000
 800113c:	58024400 	.word	0x58024400
 8001140:	58020000 	.word	0x58020000

08001144 <Alarm>:

// Two notes a half step apart
const Note note1 = {477, 238};
const Note note2 = {506, 253};

void Alarm(int alarm_temp, float temp) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	ed87 0a00 	vstr	s0, [r7]
	static uint8_t current_note = 0;

	switch(alarm_state){
 8001150:	4b2d      	ldr	r3, [pc, #180]	@ (8001208 <Alarm+0xc4>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <Alarm+0x1a>
 8001158:	2b01      	cmp	r3, #1
 800115a:	d01c      	beq.n	8001196 <Alarm+0x52>
				}
				current_note = 1 - current_note;
			}
		break;
	}
}
 800115c:	e04f      	b.n	80011fe <Alarm+0xba>
			if (temp >= (float)alarm_temp) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	ed97 7a00 	vldr	s14, [r7]
 800116c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	da00      	bge.n	8001178 <Alarm+0x34>
		break;
 8001176:	e042      	b.n	80011fe <Alarm+0xba>
				HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800117e:	4823      	ldr	r0, [pc, #140]	@ (800120c <Alarm+0xc8>)
 8001180:	f006 f97a 	bl	8007478 <HAL_GPIO_WritePin>
				Set_alarm(note1);
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <Alarm+0xcc>)
 8001186:	e893 0003 	ldmia.w	r3, {r0, r1}
 800118a:	f000 f849 	bl	8001220 <Set_alarm>
				alarm_state = ALARM_IS_ACTIVE;
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <Alarm+0xc4>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
		break;
 8001194:	e033      	b.n	80011fe <Alarm+0xba>
			if (temp < (float)alarm_temp) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	ed97 7a00 	vldr	s14, [r7]
 80011a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ac:	d510      	bpl.n	80011d0 <Alarm+0x8c>
				current_note = 0;
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <Alarm+0xd0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <Alarm+0xc8>)
 80011bc:	f006 f95c 	bl	8007478 <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80011c0:	210c      	movs	r1, #12
 80011c2:	4815      	ldr	r0, [pc, #84]	@ (8001218 <Alarm+0xd4>)
 80011c4:	f00b fc6a 	bl	800ca9c <HAL_TIM_PWM_Stop>
				alarm_state = ALARM_NOT_ACTIVE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <Alarm+0xc4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		break;
 80011ce:	e015      	b.n	80011fc <Alarm+0xb8>
				if (current_note == 0) {
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <Alarm+0xd0>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <Alarm+0xa0>
					Set_alarm(note2);
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <Alarm+0xd8>)
 80011da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011de:	f000 f81f 	bl	8001220 <Set_alarm>
 80011e2:	e004      	b.n	80011ee <Alarm+0xaa>
					Set_alarm(note1);
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <Alarm+0xcc>)
 80011e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ea:	f000 f819 	bl	8001220 <Set_alarm>
				current_note = 1 - current_note;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <Alarm+0xd0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f1c3 0301 	rsb	r3, r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <Alarm+0xd0>)
 80011fa:	701a      	strb	r2, [r3, #0]
		break;
 80011fc:	bf00      	nop
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000168 	.word	0x24000168
 800120c:	58021c00 	.word	0x58021c00
 8001210:	0800f970 	.word	0x0800f970
 8001214:	24000169 	.word	0x24000169
 8001218:	24001040 	.word	0x24001040
 800121c:	0800f978 	.word	0x0800f978

08001220 <Set_alarm>:

void Set_alarm(Note note) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	463b      	mov	r3, r7
 8001228:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // stop generation of pwm
 800122c:	210c      	movs	r1, #12
 800122e:	4810      	ldr	r0, [pc, #64]	@ (8001270 <Set_alarm+0x50>)
 8001230:	f00b fc34 	bl	800ca9c <HAL_TIM_PWM_Stop>
	TIM_OC_InitTypeDef sConfigOC;
	htim2.Init.Period = note.period; // set the period duration
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <Set_alarm+0x50>)
 800123a:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(&htim2); // reinititialise with new period value
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <Set_alarm+0x50>)
 800123e:	f00b fa6b 	bl	800c718 <HAL_TIM_PWM_Init>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001242:	2360      	movs	r3, #96	@ 0x60
 8001244:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = note.pulse; // set the pulse duration
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	220c      	movs	r2, #12
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <Set_alarm+0x50>)
 800125c:	f00b fdd4 	bl	800ce08 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // start pwm generation
 8001260:	210c      	movs	r1, #12
 8001262:	4803      	ldr	r0, [pc, #12]	@ (8001270 <Set_alarm+0x50>)
 8001264:	f00b fb0c 	bl	800c880 <HAL_TIM_PWM_Start>
}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	24001040 	.word	0x24001040

08001274 <MX_GPIO_Init>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <MX_GPIO_Init+0xa4>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <MX_GPIO_Init+0xa4>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_GPIO_Init+0xa4>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_GPIO_Init+0xa4>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <MX_GPIO_Init+0xa4>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_GPIO_Init+0xa4>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_GPIO_Init+0xa4>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_GPIO_Init+0xa4>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_GPIO_Init+0xa4>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ea:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_GPIO_Init+0xa8>)
 80012ec:	f006 f8c4 	bl	8007478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_GPIO_Init+0xa8>)
 800130a:	f005 fdfb 	bl	8006f04 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	58024400 	.word	0x58024400
 800131c:	58021c00 	.word	0x58021c00

08001320 <main>:
  * @param  None
  * @retval None
  */

int main(void)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b08f      	sub	sp, #60	@ 0x3c
 8001324:	af08      	add	r7, sp, #32
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001326:	f000 facd 	bl	80018c4 <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800132a:	f003 fe67 	bl	8004ffc <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800132e:	f000 fa2b 	bl	8001788 <SystemClock_Config>

  MX_GPIO_Init();
 8001332:	f7ff ff9f 	bl	8001274 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001336:	f7ff fe0f 	bl	8000f58 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800133a:	f003 fd7f 	bl	8004e3c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800133e:	f003 fae7 	bl	8004910 <MX_TIM2_Init>

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8001342:	2101      	movs	r1, #1
 8001344:	2000      	movs	r0, #0
 8001346:	f001 fe65 	bl	8003014 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 800134a:	482b      	ldr	r0, [pc, #172]	@ (80013f8 <main+0xd8>)
 800134c:	f000 fb28 	bl	80019a0 <UTIL_LCD_SetFuncDriver>

  // Initializes the static features of the LCD GUI
  Touchscreen_template_init();
 8001350:	f003 fbdc 	bl	8004b0c <Touchscreen_template_init>
  // Draws the default alarm temperature (35)
  Draw_threshold(alarm_temp);
 8001354:	4b29      	ldr	r3, [pc, #164]	@ (80013fc <main+0xdc>)
 8001356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fcf8 	bl	8004d50 <Draw_threshold>

  /* Wait For User inputs */
  while (1)
  {
	  // Is true every 20ms
	  if (flag_20ms) {
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <main+0xe0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8099 	beq.w	800149c <main+0x17c>
		  new_state = Button_check();
 800136a:	f003 fca5 	bl	8004cb8 <Button_check>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b24      	ldr	r3, [pc, #144]	@ (8001404 <main+0xe4>)
 8001374:	701a      	strb	r2, [r3, #0]
		  if (current_state == new_state) {
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <main+0xe8>)
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <main+0xe4>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d105      	bne.n	800138e <main+0x6e>
			  hold_counter++;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <main+0xec>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a20      	ldr	r2, [pc, #128]	@ (800140c <main+0xec>)
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e005      	b.n	800139a <main+0x7a>
		  } else {
			  hold_counter = 0;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <main+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
			  hold_speed = 10;
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <main+0xf0>)
 8001396:	220a      	movs	r2, #10
 8001398:	601a      	str	r2, [r3, #0]
		  }

		  if (new_state == BUTTON_PRESSED_UP && alarm_temp < 130 && (!hold_counter || hold_speed == hold_counter)) {
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <main+0xe4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d138      	bne.n	8001414 <main+0xf4>
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <main+0xdc>)
 80013a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a8:	2b81      	cmp	r3, #129	@ 0x81
 80013aa:	dc33      	bgt.n	8001414 <main+0xf4>
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <main+0xec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <main+0xa0>
 80013b4:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <main+0xf0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <main+0xec>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d129      	bne.n	8001414 <main+0xf4>
			  hold_counter = 0;
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <main+0xec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
			  if (hold_speed > 4) {
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <main+0xf0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	dd04      	ble.n	80013d8 <main+0xb8>
				  hold_speed--;
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <main+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <main+0xf0>)
 80013d6:	6013      	str	r3, [r2, #0]
			  }
			  Draw_threshold(++alarm_temp);
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <main+0xdc>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <main+0xdc>)
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <main+0xdc>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fcad 	bl	8004d50 <Draw_threshold>
 80013f6:	e03c      	b.n	8001472 <main+0x152>
 80013f8:	08012b8c 	.word	0x08012b8c
 80013fc:	24000030 	.word	0x24000030
 8001400:	24000038 	.word	0x24000038
 8001404:	240002b5 	.word	0x240002b5
 8001408:	240002b4 	.word	0x240002b4
 800140c:	240002b8 	.word	0x240002b8
 8001410:	2400003c 	.word	0x2400003c
		  } else if (new_state == BUTTON_PRESSED_DOWN && alarm_temp > -30 && (!hold_counter || hold_speed == hold_counter)) {
 8001414:	4ba6      	ldr	r3, [pc, #664]	@ (80016b0 <main+0x390>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d12a      	bne.n	8001472 <main+0x152>
 800141c:	4ba5      	ldr	r3, [pc, #660]	@ (80016b4 <main+0x394>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	f113 0f1d 	cmn.w	r3, #29
 8001426:	db24      	blt.n	8001472 <main+0x152>
 8001428:	4ba3      	ldr	r3, [pc, #652]	@ (80016b8 <main+0x398>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <main+0x11c>
 8001430:	4ba2      	ldr	r3, [pc, #648]	@ (80016bc <main+0x39c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4ba0      	ldr	r3, [pc, #640]	@ (80016b8 <main+0x398>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d11a      	bne.n	8001472 <main+0x152>
			  hold_counter = 0;
 800143c:	4b9e      	ldr	r3, [pc, #632]	@ (80016b8 <main+0x398>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
			  if (hold_speed > 4) {
 8001442:	4b9e      	ldr	r3, [pc, #632]	@ (80016bc <main+0x39c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b04      	cmp	r3, #4
 8001448:	dd04      	ble.n	8001454 <main+0x134>
				  hold_speed--;
 800144a:	4b9c      	ldr	r3, [pc, #624]	@ (80016bc <main+0x39c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	4a9a      	ldr	r2, [pc, #616]	@ (80016bc <main+0x39c>)
 8001452:	6013      	str	r3, [r2, #0]
			  }
			  Draw_threshold(--alarm_temp);
 8001454:	4b97      	ldr	r3, [pc, #604]	@ (80016b4 <main+0x394>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b94      	ldr	r3, [pc, #592]	@ (80016b4 <main+0x394>)
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	4b93      	ldr	r3, [pc, #588]	@ (80016b4 <main+0x394>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fc6f 	bl	8004d50 <Draw_threshold>
		  }

		  if (new_state != current_state) {
 8001472:	4b8f      	ldr	r3, [pc, #572]	@ (80016b0 <main+0x390>)
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b92      	ldr	r3, [pc, #584]	@ (80016c0 <main+0x3a0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d00b      	beq.n	8001496 <main+0x176>
			  Draw_buttons(new_state, current_state);
 800147e:	4b8c      	ldr	r3, [pc, #560]	@ (80016b0 <main+0x390>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4a8f      	ldr	r2, [pc, #572]	@ (80016c0 <main+0x3a0>)
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fc8b 	bl	8004da4 <Draw_buttons>
			  current_state = new_state;
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <main+0x390>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b8b      	ldr	r3, [pc, #556]	@ (80016c0 <main+0x3a0>)
 8001494:	701a      	strb	r2, [r3, #0]
		  }
		  flag_20ms = 0;
 8001496:	4b8b      	ldr	r3, [pc, #556]	@ (80016c4 <main+0x3a4>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
	  }

	  // Is true every second
	  if (flag_1s) {
 800149c:	4b8a      	ldr	r3, [pc, #552]	@ (80016c8 <main+0x3a8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f43f af5d 	beq.w	8001360 <main+0x40>
		  // Gets value from ADC
		  HAL_ADC_Start(&hadc1);
 80014a6:	4889      	ldr	r0, [pc, #548]	@ (80016cc <main+0x3ac>)
 80014a8:	f004 f990 	bl	80057cc <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	4886      	ldr	r0, [pc, #536]	@ (80016cc <main+0x3ac>)
 80014b2:	f004 fa55 	bl	8005960 <HAL_ADC_PollForConversion>
		  analogValue = HAL_ADC_GetValue(&hadc1);
 80014b6:	4885      	ldr	r0, [pc, #532]	@ (80016cc <main+0x3ac>)
 80014b8:	f004 fb46 	bl	8005b48 <HAL_ADC_GetValue>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b83      	ldr	r3, [pc, #524]	@ (80016d0 <main+0x3b0>)
 80014c2:	601a      	str	r2, [r3, #0]

		  // Calculates ADC input voltage
		  VOut = (double)analogValue / 65535.0f * 3.3;
 80014c4:	4b82      	ldr	r3, [pc, #520]	@ (80016d0 <main+0x3b0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80014d0:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 8001688 <main+0x368>
 80014d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014d8:	ed9f 6b6d 	vldr	d6, [pc, #436]	@ 8001690 <main+0x370>
 80014dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014e0:	4b7c      	ldr	r3, [pc, #496]	@ (80016d4 <main+0x3b4>)
 80014e2:	ed83 7b00 	vstr	d7, [r3]

		  VOut_int = (int)VOut;
 80014e6:	4b7b      	ldr	r3, [pc, #492]	@ (80016d4 <main+0x3b4>)
 80014e8:	ed93 7b00 	vldr	d7, [r3]
 80014ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80014f0:	ee17 2a90 	vmov	r2, s15
 80014f4:	4b78      	ldr	r3, [pc, #480]	@ (80016d8 <main+0x3b8>)
 80014f6:	601a      	str	r2, [r3, #0]
		  VOut_frac = (int)((VOut - VOut_int) * 10000);
 80014f8:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <main+0x3b4>)
 80014fa:	ed93 6b00 	vldr	d6, [r3]
 80014fe:	4b76      	ldr	r3, [pc, #472]	@ (80016d8 <main+0x3b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800150a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800150e:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8001698 <main+0x378>
 8001512:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001516:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800151a:	ee17 2a90 	vmov	r2, s15
 800151e:	4b6f      	ldr	r3, [pc, #444]	@ (80016dc <main+0x3bc>)
 8001520:	601a      	str	r2, [r3, #0]

		  // Calculates thermistor resistance
		  res = 100000 * ((65535.0 / (double)analogValue) - 1);
 8001522:	4b6b      	ldr	r3, [pc, #428]	@ (80016d0 <main+0x3b0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800152e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001688 <main+0x368>
 8001532:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001536:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800153a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800153e:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80016a0 <main+0x380>
 8001542:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001546:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <main+0x3c0>)
 8001548:	ed83 7b00 	vstr	d7, [r3]

		  res_int = (int)res;
 800154c:	4b64      	ldr	r3, [pc, #400]	@ (80016e0 <main+0x3c0>)
 800154e:	ed93 7b00 	vldr	d7, [r3]
 8001552:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001556:	ee17 2a90 	vmov	r2, s15
 800155a:	4b62      	ldr	r3, [pc, #392]	@ (80016e4 <main+0x3c4>)
 800155c:	601a      	str	r2, [r3, #0]
		  res_frac = (int)((res - res_int) * 100);
 800155e:	4b60      	ldr	r3, [pc, #384]	@ (80016e0 <main+0x3c0>)
 8001560:	ed93 6b00 	vldr	d6, [r3]
 8001564:	4b5f      	ldr	r3, [pc, #380]	@ (80016e4 <main+0x3c4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001570:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001574:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 80016a8 <main+0x388>
 8001578:	ee27 7b06 	vmul.f64	d7, d7, d6
 800157c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001580:	ee17 2a90 	vmov	r2, s15
 8001584:	4b58      	ldr	r3, [pc, #352]	@ (80016e8 <main+0x3c8>)
 8001586:	601a      	str	r2, [r3, #0]

		  // Converts resistance to Celsius using LUT
		  temps = Binary_search(res);
 8001588:	4b55      	ldr	r3, [pc, #340]	@ (80016e0 <main+0x3c0>)
 800158a:	ed93 7b00 	vldr	d7, [r3]
 800158e:	4c57      	ldr	r4, [pc, #348]	@ (80016ec <main+0x3cc>)
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	eeb0 0b47 	vmov.f64	d0, d7
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f8ed 	bl	8004778 <Binary_search>
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		  // Interpolates temperature for more accurate result
		  temp = Linear_interpolation(temps, res);
 80015a8:	4b4d      	ldr	r3, [pc, #308]	@ (80016e0 <main+0x3c0>)
 80015aa:	ed93 7b00 	vldr	d7, [r3]
 80015ae:	4b4f      	ldr	r3, [pc, #316]	@ (80016ec <main+0x3cc>)
 80015b0:	eeb0 0b47 	vmov.f64	d0, d7
 80015b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b6:	f003 f97d 	bl	80048b4 <Linear_interpolation>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <main+0x3d0>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]

		  temp_int = (int)temp;
 80015c4:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <main+0x3d0>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ce:	ee17 2a90 	vmov	r2, s15
 80015d2:	4b48      	ldr	r3, [pc, #288]	@ (80016f4 <main+0x3d4>)
 80015d4:	601a      	str	r2, [r3, #0]
		  temp_frac = (int)((temp - temp_int) * 100);
 80015d6:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <main+0x3d0>)
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	4b45      	ldr	r3, [pc, #276]	@ (80016f4 <main+0x3d4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80016f8 <main+0x3d8>
 80015f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f8:	ee17 2a90 	vmov	r2, s15
 80015fc:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <main+0x3dc>)
 80015fe:	601a      	str	r2, [r3, #0]

		  // Draws current temperature on LCD
		  Draw_temperature(temp_int, temp_frac);
 8001600:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <main+0x3d4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a3d      	ldr	r2, [pc, #244]	@ (80016fc <main+0x3dc>)
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fb2a 	bl	8004c64 <Draw_temperature>
		  // Handles alarm activation, deactivation and the changing of the note being played
		  Alarm((int)alarm_temp, temp);
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <main+0x394>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	461a      	mov	r2, r3
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <main+0x3d0>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd8e 	bl	8001144 <Alarm>

		  snprintf(sendBuffer, BUFFSIZE, "[%d] analog: %d | VOut: %d.%04d | res: %d.%02d | temp: %d.%02d\n\r",
 8001628:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <main+0x3e0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4934      	ldr	r1, [pc, #208]	@ (8001700 <main+0x3e0>)
 8001630:	600a      	str	r2, [r1, #0]
 8001632:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <main+0x3b0>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	4927      	ldr	r1, [pc, #156]	@ (80016d8 <main+0x3b8>)
 800163a:	6809      	ldr	r1, [r1, #0]
 800163c:	4827      	ldr	r0, [pc, #156]	@ (80016dc <main+0x3bc>)
 800163e:	6800      	ldr	r0, [r0, #0]
 8001640:	4c28      	ldr	r4, [pc, #160]	@ (80016e4 <main+0x3c4>)
 8001642:	6824      	ldr	r4, [r4, #0]
 8001644:	4d28      	ldr	r5, [pc, #160]	@ (80016e8 <main+0x3c8>)
 8001646:	682d      	ldr	r5, [r5, #0]
 8001648:	4e2a      	ldr	r6, [pc, #168]	@ (80016f4 <main+0x3d4>)
 800164a:	6836      	ldr	r6, [r6, #0]
 800164c:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <main+0x3dc>)
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	9206      	str	r2, [sp, #24]
 8001652:	9605      	str	r6, [sp, #20]
 8001654:	9504      	str	r5, [sp, #16]
 8001656:	9403      	str	r4, [sp, #12]
 8001658:	9002      	str	r0, [sp, #8]
 800165a:	9101      	str	r1, [sp, #4]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <main+0x3e4>)
 8001662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001666:	4828      	ldr	r0, [pc, #160]	@ (8001708 <main+0x3e8>)
 8001668:	f00d fc3c 	bl	800eee4 <sniprintf>
				  counter++, analogValue, VOut_int, VOut_frac, res_int, res_frac, temp_int, temp_frac);
		  HAL_UART_Transmit(&huart3, (uint8_t *)sendBuffer, strlen(sendBuffer), 100);
 800166c:	4826      	ldr	r0, [pc, #152]	@ (8001708 <main+0x3e8>)
 800166e:	f7fe fe37 	bl	80002e0 <strlen>
 8001672:	4603      	mov	r3, r0
 8001674:	b29a      	uxth	r2, r3
 8001676:	2364      	movs	r3, #100	@ 0x64
 8001678:	4923      	ldr	r1, [pc, #140]	@ (8001708 <main+0x3e8>)
 800167a:	4824      	ldr	r0, [pc, #144]	@ (800170c <main+0x3ec>)
 800167c:	f00c fa1c 	bl	800dab8 <HAL_UART_Transmit>

//		  HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_10);

		  flag_1s = 0;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <main+0x3a8>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
	  if (flag_20ms) {
 8001686:	e66b      	b.n	8001360 <main+0x40>
 8001688:	00000000 	.word	0x00000000
 800168c:	40efffe0 	.word	0x40efffe0
 8001690:	66666666 	.word	0x66666666
 8001694:	400a6666 	.word	0x400a6666
 8001698:	00000000 	.word	0x00000000
 800169c:	40c38800 	.word	0x40c38800
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40f86a00 	.word	0x40f86a00
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40590000 	.word	0x40590000
 80016b0:	240002b5 	.word	0x240002b5
 80016b4:	24000030 	.word	0x24000030
 80016b8:	240002b8 	.word	0x240002b8
 80016bc:	2400003c 	.word	0x2400003c
 80016c0:	240002b4 	.word	0x240002b4
 80016c4:	24000038 	.word	0x24000038
 80016c8:	24000034 	.word	0x24000034
 80016cc:	24000104 	.word	0x24000104
 80016d0:	24000270 	.word	0x24000270
 80016d4:	24000278 	.word	0x24000278
 80016d8:	24000280 	.word	0x24000280
 80016dc:	24000284 	.word	0x24000284
 80016e0:	24000288 	.word	0x24000288
 80016e4:	24000290 	.word	0x24000290
 80016e8:	24000294 	.word	0x24000294
 80016ec:	24000298 	.word	0x24000298
 80016f0:	240002a8 	.word	0x240002a8
 80016f4:	240002ac 	.word	0x240002ac
 80016f8:	42c80000 	.word	0x42c80000
 80016fc:	240002b0 	.word	0x240002b0
 8001700:	2400026c 	.word	0x2400026c
 8001704:	0800f8a4 	.word	0x0800f8a4
 8001708:	2400016c 	.word	0x2400016c
 800170c:	240010c0 	.word	0x240010c0

08001710 <HAL_IncTick>:
  * @retval None
  */

// Handles the 20ms and 1s flags
void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    static uint32_t counter = 0;

    counter++;
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_IncTick+0x60>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <HAL_IncTick+0x60>)
 800171c:	6013      	str	r3, [r2, #0]
    if (counter >= 1000) {
 800171e:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_IncTick+0x60>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001726:	d305      	bcc.n	8001734 <HAL_IncTick+0x24>
        flag_1s = 1;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_IncTick+0x64>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
        counter = 0;
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_IncTick+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
    }
    if (!(counter % 20)) {
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_IncTick+0x60>)
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_IncTick+0x68>)
 800173a:	fba3 2301 	umull	r2, r3, r3, r1
 800173e:	091a      	lsrs	r2, r3, #4
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	1aca      	subs	r2, r1, r3
 800174a:	2a00      	cmp	r2, #0
 800174c:	d102      	bne.n	8001754 <HAL_IncTick+0x44>
    	flag_20ms = 1;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_IncTick+0x6c>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
    }

	uwTick += (uint32_t)uwTickFreq;
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_IncTick+0x70>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_IncTick+0x74>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_IncTick+0x74>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	240002bc 	.word	0x240002bc
 8001774:	24000034 	.word	0x24000034
 8001778:	cccccccd 	.word	0xcccccccd
 800177c:	24000038 	.word	0x24000038
 8001780:	24000084 	.word	0x24000084
 8001784:	24001154 	.word	0x24001154

08001788 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b09e      	sub	sp, #120	@ 0x78
 800178c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001794:	2002      	movs	r0, #2
 8001796:	f007 f8e3 	bl	8008960 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <SystemClock_Config+0x120>)
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	4a41      	ldr	r2, [pc, #260]	@ (80018a8 <SystemClock_Config+0x120>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80017aa:	4b3f      	ldr	r3, [pc, #252]	@ (80018a8 <SystemClock_Config+0x120>)
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <SystemClock_Config+0x124>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a3c      	ldr	r2, [pc, #240]	@ (80018ac <SystemClock_Config+0x124>)
 80017ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <SystemClock_Config+0x124>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017cc:	bf00      	nop
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <SystemClock_Config+0x124>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017da:	d1f8      	bne.n	80017ce <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017dc:	2301      	movs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	2302      	movs	r3, #2
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80017f6:	2305      	movs	r3, #5
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80017fa:	23a0      	movs	r3, #160	@ 0xa0
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800180a:	2304      	movs	r3, #4
 800180c:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800180e:	2300      	movs	r3, #0
 8001810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001812:	2308      	movs	r3, #8
 8001814:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4618      	mov	r0, r3
 800181c:	f007 f8da 	bl	80089d4 <HAL_RCC_OscConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8001826:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800182e:	f000 f841 	bl	80018b4 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001832:	233f      	movs	r3, #63	@ 0x3f
 8001834:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001836:	2303      	movs	r3, #3
 8001838:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800183a:	2300      	movs	r3, #0
 800183c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800183e:	2308      	movs	r3, #8
 8001840:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001842:	2340      	movs	r3, #64	@ 0x40
 8001844:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800184a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800184e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f007 fd14 	bl	8009288 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8001866:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800186e:	f000 f821 	bl	80018b4 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <SystemClock_Config+0x128>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <SystemClock_Config+0x128>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187c:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <SystemClock_Config+0x128>)
 8001880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001884:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <SystemClock_Config+0x128>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <SystemClock_Config+0x128>)
 8001890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 800189c:	f003 fc02 	bl	80050a4 <HAL_EnableCompensationCell>
}
 80018a0:	bf00      	nop
 80018a2:	3778      	adds	r7, #120	@ 0x78
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58000400 	.word	0x58000400
 80018ac:	58024800 	.word	0x58024800
 80018b0:	58024400 	.word	0x58024400

080018b4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Turn LED REDon */
  BSP_LED_On(LED_RED);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f000 ff25 	bl	8002708 <BSP_LED_On>
  while(1)
 80018be:	bf00      	nop
 80018c0:	e7fd      	b.n	80018be <Error_Handler+0xa>
	...

080018c4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018ca:	4b34      	ldr	r3, [pc, #208]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d11b      	bne.n	800190e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018d6:	f3bf 8f4f 	dsb	sy
}
 80018da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018dc:	f3bf 8f6f 	isb	sy
}
 80018e0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018e2:	4b2e      	ldr	r3, [pc, #184]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018ea:	f3bf 8f4f 	dsb	sy
}
 80018ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018f0:	f3bf 8f6f 	isb	sy
}
 80018f4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80018f6:	4b29      	ldr	r3, [pc, #164]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4a28      	ldr	r2, [pc, #160]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001902:	f3bf 8f4f 	dsb	sy
}
 8001906:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001908:	f3bf 8f6f 	isb	sy
}
 800190c:	e000      	b.n	8001910 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800190e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001910:	4b22      	ldr	r3, [pc, #136]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d138      	bne.n	800198e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800191c:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 800191e:	2200      	movs	r2, #0
 8001920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001924:	f3bf 8f4f 	dsb	sy
}
 8001928:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 800192c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001930:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0b5b      	lsrs	r3, r3, #13
 8001936:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800193a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001944:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800194e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001954:	4911      	ldr	r1, [pc, #68]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 8001956:	4313      	orrs	r3, r2
 8001958:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1e5a      	subs	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ef      	bne.n	8001946 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e5      	bne.n	800193c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001970:	f3bf 8f4f 	dsb	sy
}
 8001974:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <CPU_CACHE_Enable+0xd8>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001982:	f3bf 8f4f 	dsb	sy
}
 8001986:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001988:	f3bf 8f6f 	isb	sy
}
 800198c:	e000      	b.n	8001990 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800198e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a22      	ldr	r2, [pc, #136]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019ae:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a20      	ldr	r2, [pc, #128]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019b6:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019be:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019c6:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019ce:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019d6:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019de:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019e6:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019ee:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	4a10      	ldr	r2, [pc, #64]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019f6:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 80019fe:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <UTIL_LCD_SetFuncDriver+0x9c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <UTIL_LCD_SetFuncDriver+0x9c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <UTIL_LCD_SetFuncDriver+0xa0>)
 8001a12:	4611      	mov	r1, r2
 8001a14:	2000      	movs	r0, #0
 8001a16:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8001a18:	4b07      	ldr	r3, [pc, #28]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <UTIL_LCD_SetFuncDriver+0xa4>)
 8001a1e:	4611      	mov	r1, r2
 8001a20:	2000      	movs	r0, #0
 8001a22:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8001a24:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <UTIL_LCD_SetFuncDriver+0x98>)
 8001a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <UTIL_LCD_SetFuncDriver+0xa8>)
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	4798      	blx	r3
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000300 	.word	0x24000300
 8001a3c:	240002c0 	.word	0x240002c0
 8001a40:	240002d4 	.word	0x240002d4
 8001a44:	240002d8 	.word	0x240002d8
 8001a48:	240002dc 	.word	0x240002dc

08001a4c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <UTIL_LCD_SetTextColor+0x24>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <UTIL_LCD_SetTextColor+0x24>)
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	4413      	add	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	240002c0 	.word	0x240002c0

08001a74 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <UTIL_LCD_SetBackColor+0x24>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <UTIL_LCD_SetBackColor+0x24>)
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	240002c0 	.word	0x240002c0

08001a9c <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <UTIL_LCD_SetFont+0x24>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <UTIL_LCD_SetFont+0x24>)
 8001aaa:	015b      	lsls	r3, r3, #5
 8001aac:	4413      	add	r3, r2
 8001aae:	3308      	adds	r3, #8
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	240002c0 	.word	0x240002c0

08001ac4 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <UTIL_LCD_FillRGBRect+0x30>)
 8001ad4:	685c      	ldr	r4, [r3, #4]
 8001ad6:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <UTIL_LCD_FillRGBRect+0x34>)
 8001ad8:	6918      	ldr	r0, [r3, #16]
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	47a0      	blx	r4
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	24000300 	.word	0x24000300
 8001af8:	240002c0 	.word	0x240002c0

08001afc <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b087      	sub	sp, #28
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <UTIL_LCD_DrawHLine+0x64>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d118      	bne.n	8001b44 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <UTIL_LCD_DrawHLine+0x68>)
 8001b14:	689c      	ldr	r4, [r3, #8]
 8001b16:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <UTIL_LCD_DrawHLine+0x64>)
 8001b18:	6918      	ldr	r0, [r3, #16]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 021f 	and.w	r2, r3, #31
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	0a9b      	lsrs	r3, r3, #10
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	0cdb      	lsrs	r3, r3, #19
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001b42:	e009      	b.n	8001b58 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <UTIL_LCD_DrawHLine+0x68>)
 8001b46:	689c      	ldr	r4, [r3, #8]
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <UTIL_LCD_DrawHLine+0x64>)
 8001b4a:	6918      	ldr	r0, [r3, #16]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	47a0      	blx	r4
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	240002c0 	.word	0x240002c0
 8001b64:	24000300 	.word	0x24000300

08001b68 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <UTIL_LCD_DrawVLine+0x64>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d118      	bne.n	8001bb0 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <UTIL_LCD_DrawVLine+0x68>)
 8001b80:	68dc      	ldr	r4, [r3, #12]
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <UTIL_LCD_DrawVLine+0x64>)
 8001b84:	6918      	ldr	r0, [r3, #16]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f003 021f 	and.w	r2, r3, #31
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	0a9b      	lsrs	r3, r3, #10
 8001b92:	015b      	lsls	r3, r3, #5
 8001b94:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	0cdb      	lsrs	r3, r3, #19
 8001b9e:	02db      	lsls	r3, r3, #11
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001bae:	e009      	b.n	8001bc4 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <UTIL_LCD_DrawVLine+0x68>)
 8001bb2:	68dc      	ldr	r4, [r3, #12]
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <UTIL_LCD_DrawVLine+0x64>)
 8001bb6:	6918      	ldr	r0, [r3, #16]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	47a0      	blx	r4
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	240002c0 	.word	0x240002c0
 8001bd0:	24000300 	.word	0x24000300

08001bd4 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	603a      	str	r2, [r7, #0]
 8001bde:	80fb      	strh	r3, [r7, #6]
 8001be0:	460b      	mov	r3, r1
 8001be2:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <UTIL_LCD_SetPixel+0x60>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d117      	bne.n	8001c1c <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <UTIL_LCD_SetPixel+0x64>)
 8001bee:	699c      	ldr	r4, [r3, #24]
 8001bf0:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <UTIL_LCD_SetPixel+0x60>)
 8001bf2:	6918      	ldr	r0, [r3, #16]
 8001bf4:	88f9      	ldrh	r1, [r7, #6]
 8001bf6:	88bd      	ldrh	r5, [r7, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	0cdb      	lsrs	r3, r3, #19
 8001c10:	02db      	lsls	r3, r3, #11
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	462a      	mov	r2, r5
 8001c18:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 8001c1a:	e007      	b.n	8001c2c <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <UTIL_LCD_SetPixel+0x64>)
 8001c1e:	699c      	ldr	r4, [r3, #24]
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <UTIL_LCD_SetPixel+0x60>)
 8001c22:	6918      	ldr	r0, [r3, #16]
 8001c24:	88f9      	ldrh	r1, [r7, #6]
 8001c26:	88ba      	ldrh	r2, [r7, #4]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	47a0      	blx	r4
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}
 8001c34:	240002c0 	.word	0x240002c0
 8001c38:	24000300 	.word	0x24000300

08001c3c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <UTIL_LCD_Clear+0x28>)
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <UTIL_LCD_Clear+0x28>)
 8001c4a:	6999      	ldr	r1, [r3, #24]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	2100      	movs	r1, #0
 8001c54:	2000      	movs	r0, #0
 8001c56:	f000 f9d1 	bl	8001ffc <UTIL_LCD_FillRect>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	240002c0 	.word	0x240002c0

08001c68 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <UTIL_LCD_DisplayChar+0x68>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <UTIL_LCD_DisplayChar+0x68>)
 8001c7c:	015b      	lsls	r3, r3, #5
 8001c7e:	4413      	add	r3, r2
 8001c80:	3308      	adds	r3, #8
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001c8a:	4911      	ldr	r1, [pc, #68]	@ (8001cd0 <UTIL_LCD_DisplayChar+0x68>)
 8001c8c:	68c9      	ldr	r1, [r1, #12]
 8001c8e:	4810      	ldr	r0, [pc, #64]	@ (8001cd0 <UTIL_LCD_DisplayChar+0x68>)
 8001c90:	0149      	lsls	r1, r1, #5
 8001c92:	4401      	add	r1, r0
 8001c94:	3108      	adds	r1, #8
 8001c96:	6809      	ldr	r1, [r1, #0]
 8001c98:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001c9a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <UTIL_LCD_DisplayChar+0x68>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	480b      	ldr	r0, [pc, #44]	@ (8001cd0 <UTIL_LCD_DisplayChar+0x68>)
 8001ca4:	015b      	lsls	r3, r3, #5
 8001ca6:	4403      	add	r3, r0
 8001ca8:	3308      	adds	r3, #8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	889b      	ldrh	r3, [r3, #4]
 8001cae:	3307      	adds	r3, #7
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da00      	bge.n	8001cb6 <UTIL_LCD_DisplayChar+0x4e>
 8001cb4:	3307      	adds	r3, #7
 8001cb6:	10db      	asrs	r3, r3, #3
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001cbc:	4413      	add	r3, r2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fafa 	bl	80022bc <DrawChar>
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	240002c0 	.word	0x240002c0

08001cd4 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	@ 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001cf6:	e002      	b.n	8001cfe <UTIL_LCD_DisplayStringAt+0x2a>
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	61ba      	str	r2, [r7, #24]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f6      	bne.n	8001cf8 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001d0a:	4b48      	ldr	r3, [pc, #288]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4a47      	ldr	r2, [pc, #284]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d10:	68d2      	ldr	r2, [r2, #12]
 8001d12:	4946      	ldr	r1, [pc, #280]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d14:	0152      	lsls	r2, r2, #5
 8001d16:	440a      	add	r2, r1
 8001d18:	3208      	adds	r2, #8
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	8892      	ldrh	r2, [r2, #4]
 8001d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d22:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d018      	beq.n	8001d5c <UTIL_LCD_DisplayStringAt+0x88>
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	dc2a      	bgt.n	8001d84 <UTIL_LCD_DisplayStringAt+0xb0>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <UTIL_LCD_DisplayStringAt+0x64>
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d015      	beq.n	8001d62 <UTIL_LCD_DisplayStringAt+0x8e>
 8001d36:	e025      	b.n	8001d84 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d40:	68d2      	ldr	r2, [r2, #12]
 8001d42:	493a      	ldr	r1, [pc, #232]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d44:	0152      	lsls	r2, r2, #5
 8001d46:	440a      	add	r2, r1
 8001d48:	3208      	adds	r2, #8
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	8892      	ldrh	r2, [r2, #4]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001d5a:	e016      	b.n	8001d8a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001d60:	e013      	b.n	8001d8a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	4a30      	ldr	r2, [pc, #192]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d6a:	68d2      	ldr	r2, [r2, #12]
 8001d6c:	492f      	ldr	r1, [pc, #188]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001d6e:	0152      	lsls	r2, r2, #5
 8001d70:	440a      	add	r2, r1
 8001d72:	3208      	adds	r2, #8
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	8892      	ldrh	r2, [r2, #4]
 8001d78:	fb03 f202 	mul.w	r2, r3, r2
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001d82:	e002      	b.n	8001d8a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001d88:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <UTIL_LCD_DisplayStringAt+0xc4>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d96:	d31b      	bcc.n	8001dd0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001d9c:	e018      	b.n	8001dd0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001da8:	f7ff ff5e 	bl	8001c68 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001db2:	015b      	lsls	r3, r3, #5
 8001db4:	4413      	add	r3, r2
 8001db6:	3308      	adds	r3, #8
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	4413      	add	r3, r2
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
    i++;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001de0:	6959      	ldr	r1, [r3, #20]
 8001de2:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4811      	ldr	r0, [pc, #68]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	4403      	add	r3, r0
 8001dec:	3308      	adds	r3, #8
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	889b      	ldrh	r3, [r3, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	fb00 f303 	mul.w	r3, r0, r3
 8001dfa:	1acb      	subs	r3, r1, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	490b      	ldr	r1, [pc, #44]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001e00:	68c9      	ldr	r1, [r1, #12]
 8001e02:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <UTIL_LCD_DisplayStringAt+0x158>)
 8001e04:	0149      	lsls	r1, r1, #5
 8001e06:	4401      	add	r1, r0
 8001e08:	3108      	adds	r1, #8
 8001e0a:	6809      	ldr	r1, [r1, #0]
 8001e0c:	8889      	ldrh	r1, [r1, #4]
 8001e0e:	428b      	cmp	r3, r1
 8001e10:	bf2c      	ite	cs
 8001e12:	2301      	movcs	r3, #1
 8001e14:	2300      	movcc	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1be      	bne.n	8001d9e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	@ 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	240002c0 	.word	0x240002c0

08001e30 <UTIL_LCD_DrawLine>:
  * @param  Xpos2 Point 2 X position
  * @param  Ypos2 Point 2 Y position
  * @param  Color Draw color
  */
void UTIL_LCD_DrawLine(uint32_t Xpos1, uint32_t Ypos1, uint32_t Xpos2, uint32_t Ypos2, uint32_t Color)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	@ 0x38
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8001e3e:	2300      	movs	r3, #0
 8001e40:	843b      	strh	r3, [r7, #32]
 8001e42:	2300      	movs	r3, #0
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	2300      	movs	r3, #0
 8001e48:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001e4e:	2300      	movs	r3, #0
 8001e50:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001e52:	2300      	movs	r3, #0
 8001e54:	863b      	strh	r3, [r7, #48]	@ 0x30
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8001e56:	2300      	movs	r3, #0
 8001e58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001e5e:	2300      	movs	r3, #0
 8001e60:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001e62:	2300      	movs	r3, #0
 8001e64:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001e66:	2300      	movs	r3, #0
 8001e68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  curpixel = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	847b      	strh	r3, [r7, #34]	@ 0x22
  int32_t x_diff, y_diff;

  x_diff = Xpos2 - Xpos1;
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	61bb      	str	r3, [r7, #24]
  y_diff = Ypos2 - Ypos1;
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bfb8      	it	lt
 8001e88:	425b      	neglt	r3, r3
 8001e8a:	843b      	strh	r3, [r7, #32]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bfb8      	it	lt
 8001e92:	425b      	neglt	r3, r3
 8001e94:	83fb      	strh	r3, [r7, #30]
  x = Xpos1;                       /* Start x off at the first pixel */
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	86fb      	strh	r3, [r7, #54]	@ 0x36
  y = Ypos1;                       /* Start y off at the first pixel */
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	86bb      	strh	r3, [r7, #52]	@ 0x34

  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d304      	bcc.n	8001eb0 <UTIL_LCD_DrawLine+0x80>
  {
    xinc1 = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	867b      	strh	r3, [r7, #50]	@ 0x32
    xinc2 = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	863b      	strh	r3, [r7, #48]	@ 0x30
 8001eae:	e005      	b.n	8001ebc <UTIL_LCD_DrawLine+0x8c>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eb4:	867b      	strh	r3, [r7, #50]	@ 0x32
    xinc2 = -1;
 8001eb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eba:	863b      	strh	r3, [r7, #48]	@ 0x30
  }

  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d304      	bcc.n	8001ece <UTIL_LCD_DrawLine+0x9e>
  {
    yinc1 = 1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    yinc2 = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001ecc:	e005      	b.n	8001eda <UTIL_LCD_DrawLine+0xaa>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8001ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ed2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    yinc2 = -1;
 8001ed4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ed8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8001eda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001ede:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	db11      	blt.n	8001f0a <UTIL_LCD_DrawLine+0xda>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	867b      	strh	r3, [r7, #50]	@ 0x32
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8001eea:	2300      	movs	r3, #0
 8001eec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    den = deltax;
 8001eee:	8c3b      	ldrh	r3, [r7, #32]
 8001ef0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    num = deltax / 2;
 8001ef2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da00      	bge.n	8001efc <UTIL_LCD_DrawLine+0xcc>
 8001efa:	3301      	adds	r3, #1
 8001efc:	105b      	asrs	r3, r3, #1
 8001efe:	853b      	strh	r3, [r7, #40]	@ 0x28
    numadd = deltay;
 8001f00:	8bfb      	ldrh	r3, [r7, #30]
 8001f02:	84fb      	strh	r3, [r7, #38]	@ 0x26
    numpixels = deltax;         /* There are more x-values than y-values */
 8001f04:	8c3b      	ldrh	r3, [r7, #32]
 8001f06:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001f08:	e010      	b.n	8001f2c <UTIL_LCD_DrawLine+0xfc>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	863b      	strh	r3, [r7, #48]	@ 0x30
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8001f0e:	2300      	movs	r3, #0
 8001f10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    den = deltay;
 8001f12:	8bfb      	ldrh	r3, [r7, #30]
 8001f14:	857b      	strh	r3, [r7, #42]	@ 0x2a
    num = deltay / 2;
 8001f16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da00      	bge.n	8001f20 <UTIL_LCD_DrawLine+0xf0>
 8001f1e:	3301      	adds	r3, #1
 8001f20:	105b      	asrs	r3, r3, #1
 8001f22:	853b      	strh	r3, [r7, #40]	@ 0x28
    numadd = deltax;
 8001f24:	8c3b      	ldrh	r3, [r7, #32]
 8001f26:	84fb      	strh	r3, [r7, #38]	@ 0x26
    numpixels = deltay;         /* There are more y-values than x-values */
 8001f28:	8bfb      	ldrh	r3, [r7, #30]
 8001f2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f30:	e02f      	b.n	8001f92 <UTIL_LCD_DrawLine+0x162>
  {
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 8001f32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001f34:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8001f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fe4b 	bl	8001bd4 <UTIL_LCD_SetPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8001f3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f42:	4413      	add	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (num >= den)                           /* Check if numerator >= denominator */
 8001f48:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001f4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001f50:	429a      	cmp	r2, r3
 8001f52:	db0e      	blt.n	8001f72 <UTIL_LCD_DrawLine+0x142>
    {
      num -= den;                             /* Calculate the new numerator value */
 8001f54:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	853b      	strh	r3, [r7, #40]	@ 0x28
      x += xinc1;                             /* Change the x as appropriate */
 8001f5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001f60:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f62:	4413      	add	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	86fb      	strh	r3, [r7, #54]	@ 0x36
      y += yinc1;                             /* Change the y as appropriate */
 8001f68:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    x += xinc2;                               /* Change the x as appropriate */
 8001f72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001f74:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f76:	4413      	add	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    y += yinc2;                               /* Change the y as appropriate */
 8001f7c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f80:	4413      	add	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	86bb      	strh	r3, [r7, #52]	@ 0x34
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001f86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f92:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8001f96:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	ddc9      	ble.n	8001f32 <UTIL_LCD_DrawLine+0x102>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	3738      	adds	r7, #56	@ 0x38
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff fd9d 	bl	8001afc <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	1e59      	subs	r1, r3, #1
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff fd94 	bl	8001afc <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff fdc4 	bl	8001b68 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	f7ff fdbb 	bl	8001b68 <UTIL_LCD_DrawVLine>
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800200a:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <UTIL_LCD_FillRect+0x6c>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d11a      	bne.n	8002048 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <UTIL_LCD_FillRect+0x70>)
 8002014:	691c      	ldr	r4, [r3, #16]
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <UTIL_LCD_FillRect+0x6c>)
 8002018:	6918      	ldr	r0, [r3, #16]
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	0a9b      	lsrs	r3, r3, #10
 8002026:	015b      	lsls	r3, r3, #5
 8002028:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800202c:	431a      	orrs	r2, r3
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	0cdb      	lsrs	r3, r3, #19
 8002032:	02db      	lsls	r3, r3, #11
 8002034:	b29b      	uxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8002046:	e00b      	b.n	8002060 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <UTIL_LCD_FillRect+0x70>)
 800204a:	691c      	ldr	r4, [r3, #16]
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <UTIL_LCD_FillRect+0x6c>)
 800204e:	6918      	ldr	r0, [r3, #16]
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	47a0      	blx	r4
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	240002c0 	.word	0x240002c0
 800206c:	24000300 	.word	0x24000300

08002070 <UTIL_LCD_FillPolygon>:
  * @param  Points     Pointer to the points array
  * @param  PointCount Number of points
  * @param  Color      Draw color
  */
void UTIL_LCD_FillPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b094      	sub	sp, #80	@ 0x50
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, x_center = 0, y_center = 0, x_first = 0, y_first = 0, pixel_x = 0, pixel_y = 0, counter = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8002080:	2300      	movs	r3, #0
 8002082:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002084:	2300      	movs	r3, #0
 8002086:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800208a:	2300      	movs	r3, #0
 800208c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002090:	2300      	movs	r3, #0
 8002092:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002094:	2300      	movs	r3, #0
 8002096:	863b      	strh	r3, [r7, #48]	@ 0x30
 8002098:	2300      	movs	r3, #0
 800209a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800209c:	2300      	movs	r3, #0
 800209e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80020a0:	2300      	movs	r3, #0
 80020a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80020a4:	2300      	movs	r3, #0
 80020a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80020a8:	2300      	movs	r3, #0
 80020aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  uint32_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b2:	2300      	movs	r3, #0
 80020b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80020b6:	2300      	movs	r3, #0
 80020b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ba:	2300      	movs	r3, #0
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  Triangle_Positions_t positions;

  image_left = image_right = Points->X;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80020c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c8:	647b      	str	r3, [r7, #68]	@ 0x44
  image_top= image_bottom = Points->Y;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for(counter = 1; counter < PointCount; counter++)
 80020d6:	2301      	movs	r3, #1
 80020d8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80020dc:	e034      	b.n	8002148 <UTIL_LCD_FillPolygon+0xd8>
  {
    pixel_x = POLY_X(counter);
 80020de:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if(pixel_x < image_left)
 80020ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80020f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d902      	bls.n	80020fc <UTIL_LCD_FillPolygon+0x8c>
    {
      image_left = pixel_x;
 80020f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80020fa:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if(pixel_x > image_right)
 80020fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002102:	429a      	cmp	r2, r3
 8002104:	d202      	bcs.n	800210c <UTIL_LCD_FillPolygon+0x9c>
    {
      image_right = pixel_x;
 8002106:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    pixel_y = POLY_Y(counter);
 800210c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	853b      	strh	r3, [r7, #40]	@ 0x28
    if(pixel_y < image_top)
 800211a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800211e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002120:	429a      	cmp	r2, r3
 8002122:	d902      	bls.n	800212a <UTIL_LCD_FillPolygon+0xba>
    {
      image_top = pixel_y;
 8002124:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002128:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    if(pixel_y > image_bottom)
 800212a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800212e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002130:	429a      	cmp	r2, r3
 8002132:	d202      	bcs.n	800213a <UTIL_LCD_FillPolygon+0xca>
    {
      image_bottom = pixel_y;
 8002134:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
  for(counter = 1; counter < PointCount; counter++)
 800213a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	b29b      	uxth	r3, r3
 8002144:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8002148:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	429a      	cmp	r2, r3
 8002150:	d8c5      	bhi.n	80020de <UTIL_LCD_FillPolygon+0x6e>
    }
  }

  if(PointCount < 2)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b01      	cmp	r3, #1
 8002156:	f240 80ad 	bls.w	80022b4 <UTIL_LCD_FillPolygon+0x244>
  {
    return;
  }

  x_center = (image_left + image_right)/2;
 800215a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800215c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215e:	4413      	add	r3, r2
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	867b      	strh	r3, [r7, #50]	@ 0x32
  y_center = (image_bottom + image_top)/2;
 8002164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002168:	4413      	add	r3, r2
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	863b      	strh	r3, [r7, #48]	@ 0x30

  x_first = Points->X;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  y_first = Points->Y;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	885b      	ldrh	r3, [r3, #2]
 8002178:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  while(--PointCount)
 800217a:	e052      	b.n	8002222 <UTIL_LCD_FillPolygon+0x1b2>
  {
    X = Points->X;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	86fb      	strh	r3, [r7, #54]	@ 0x36
    Y = Points->Y;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	86bb      	strh	r3, [r7, #52]	@ 0x34
    Points++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
    X2 = Points->X;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    Y2 = Points->Y;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	885b      	ldrh	r3, [r3, #2]
 800219a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    positions.x1 = X;
 800219e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80021a2:	613b      	str	r3, [r7, #16]
    positions.y1 = Y;
 80021a4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80021a8:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 80021aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80021ae:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 80021b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80021b4:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 80021b6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80021ba:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 80021bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f9d1 	bl	8002570 <FillTriangle>

    positions.x2 = x_center;
 80021ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80021d2:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 80021d4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80021d8:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 80021da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80021de:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 80021e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f9bf 	bl	8002570 <FillTriangle>

    positions.x1 = x_center;
 80021f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80021f6:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 80021f8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80021fc:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 80021fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002202:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8002204:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002208:	61fb      	str	r3, [r7, #28]
    positions.x3 = X;
 800220a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800220e:	623b      	str	r3, [r7, #32]
    positions.y3 = Y;
 8002210:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f9a7 	bl	8002570 <FillTriangle>
  while(--PointCount)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3b01      	subs	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1a6      	bne.n	800217c <UTIL_LCD_FillPolygon+0x10c>
  }

    positions.x1 = x_first;
 800222e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002232:	613b      	str	r3, [r7, #16]
    positions.y1 = y_first;
 8002234:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8002238:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800223a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800223e:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8002240:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002244:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 8002246:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800224a:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 800224c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f989 	bl	8002570 <FillTriangle>

    positions.x2 = x_center;
 800225e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002262:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 8002264:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002268:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 800226a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800226e:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 8002270:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f977 	bl	8002570 <FillTriangle>

    positions.x1 = x_center;
 8002282:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002286:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 8002288:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800228c:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 800228e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002292:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8002294:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002298:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_first;
 800229a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800229e:	623b      	str	r3, [r7, #32]
    positions.y3 = y_first;
 80022a0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f95f 	bl	8002570 <FillTriangle>
 80022b2:	e000      	b.n	80022b6 <UTIL_LCD_FillPolygon+0x246>
    return;
 80022b4:	bf00      	nop
}
 80022b6:	3750      	adds	r7, #80	@ 0x50
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0b2      	sub	sp, #200	@ 0xc8
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80022d4:	4ba5      	ldr	r3, [pc, #660]	@ (800256c <DrawChar+0x2b0>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4aa4      	ldr	r2, [pc, #656]	@ (800256c <DrawChar+0x2b0>)
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	4413      	add	r3, r2
 80022de:	3308      	adds	r3, #8
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	88db      	ldrh	r3, [r3, #6]
 80022e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 80022e8:	4ba0      	ldr	r3, [pc, #640]	@ (800256c <DrawChar+0x2b0>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a9f      	ldr	r2, [pc, #636]	@ (800256c <DrawChar+0x2b0>)
 80022ee:	015b      	lsls	r3, r3, #5
 80022f0:	4413      	add	r3, r2
 80022f2:	3308      	adds	r3, #8
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	889b      	ldrh	r3, [r3, #4]
 80022f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80022fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002300:	3307      	adds	r3, #7
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002316:	e11c      	b.n	8002552 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8002318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800231c:	3307      	adds	r3, #7
 800231e:	08db      	lsrs	r3, r3, #3
 8002320:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8002330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002334:	3307      	adds	r3, #7
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d002      	beq.n	8002342 <DrawChar+0x86>
 800233c:	2b02      	cmp	r3, #2
 800233e:	d006      	beq.n	800234e <DrawChar+0x92>
 8002340:	e011      	b.n	8002366 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8002342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 800234c:	e01d      	b.n	800238a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800234e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800235a:	3201      	adds	r2, #1
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8002364:	e011      	b.n	800238a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002372:	3301      	adds	r3, #1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	4313      	orrs	r3, r2
 800237a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800237e:	3202      	adds	r2, #2
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8002388:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800238a:	4b78      	ldr	r3, [pc, #480]	@ (800256c <DrawChar+0x2b0>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4a77      	ldr	r2, [pc, #476]	@ (800256c <DrawChar+0x2b0>)
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	4413      	add	r3, r2
 8002394:	331c      	adds	r3, #28
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f040 808c 	bne.w	80024b6 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023a4:	e074      	b.n	8002490 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80023a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80023aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b4:	4413      	add	r3, r2
 80023b6:	3b01      	subs	r3, #1
 80023b8:	2201      	movs	r2, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02d      	beq.n	8002426 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80023ca:	4b68      	ldr	r3, [pc, #416]	@ (800256c <DrawChar+0x2b0>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4a67      	ldr	r2, [pc, #412]	@ (800256c <DrawChar+0x2b0>)
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b62      	ldr	r3, [pc, #392]	@ (800256c <DrawChar+0x2b0>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4961      	ldr	r1, [pc, #388]	@ (800256c <DrawChar+0x2b0>)
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	440b      	add	r3, r1
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0a9b      	lsrs	r3, r3, #10
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b5b      	ldr	r3, [pc, #364]	@ (800256c <DrawChar+0x2b0>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	495a      	ldr	r1, [pc, #360]	@ (800256c <DrawChar+0x2b0>)
 8002404:	015b      	lsls	r3, r3, #5
 8002406:	440b      	add	r3, r1
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0cdb      	lsrs	r3, r3, #19
 800240c:	b29b      	uxth	r3, r3
 800240e:	02db      	lsls	r3, r3, #11
 8002410:	b29b      	uxth	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b29a      	uxth	r2, r3
 8002416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	33c0      	adds	r3, #192	@ 0xc0
 800241e:	443b      	add	r3, r7
 8002420:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8002424:	e02f      	b.n	8002486 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8002426:	4b51      	ldr	r3, [pc, #324]	@ (800256c <DrawChar+0x2b0>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4a50      	ldr	r2, [pc, #320]	@ (800256c <DrawChar+0x2b0>)
 800242c:	015b      	lsls	r3, r3, #5
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	b29b      	uxth	r3, r3
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b4b      	ldr	r3, [pc, #300]	@ (800256c <DrawChar+0x2b0>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	494a      	ldr	r1, [pc, #296]	@ (800256c <DrawChar+0x2b0>)
 8002444:	015b      	lsls	r3, r3, #5
 8002446:	440b      	add	r3, r1
 8002448:	3304      	adds	r3, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0a9b      	lsrs	r3, r3, #10
 800244e:	b29b      	uxth	r3, r3
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	b29b      	uxth	r3, r3
 8002454:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002458:	b29b      	uxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b43      	ldr	r3, [pc, #268]	@ (800256c <DrawChar+0x2b0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4942      	ldr	r1, [pc, #264]	@ (800256c <DrawChar+0x2b0>)
 8002464:	015b      	lsls	r3, r3, #5
 8002466:	440b      	add	r3, r1
 8002468:	3304      	adds	r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0cdb      	lsrs	r3, r3, #19
 800246e:	b29b      	uxth	r3, r3
 8002470:	02db      	lsls	r3, r3, #11
 8002472:	b29b      	uxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	b29a      	uxth	r2, r3
 8002478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	33c0      	adds	r3, #192	@ 0xc0
 8002480:	443b      	add	r3, r7
 8002482:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8002486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800248a:	3301      	adds	r3, #1
 800248c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002490:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002498:	429a      	cmp	r2, r3
 800249a:	d384      	bcc.n	80023a6 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	1c4b      	adds	r3, r1, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80024a6:	2301      	movs	r3, #1
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff fb08 	bl	8001ac4 <UTIL_LCD_FillRGBRect>
 80024b4:	e048      	b.n	8002548 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024bc:	e032      	b.n	8002524 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 80024be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024c6:	1ad2      	subs	r2, r2, r3
 80024c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024cc:	4413      	add	r3, r2
 80024ce:	3b01      	subs	r3, #1
 80024d0:	2201      	movs	r2, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <DrawChar+0x2b0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a21      	ldr	r2, [pc, #132]	@ (800256c <DrawChar+0x2b0>)
 80024e8:	015b      	lsls	r3, r3, #5
 80024ea:	4413      	add	r3, r2
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	33c0      	adds	r3, #192	@ 0xc0
 80024f6:	443b      	add	r3, r7
 80024f8:	f843 2cac 	str.w	r2, [r3, #-172]
 80024fc:	e00d      	b.n	800251a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <DrawChar+0x2b0>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4a1a      	ldr	r2, [pc, #104]	@ (800256c <DrawChar+0x2b0>)
 8002504:	015b      	lsls	r3, r3, #5
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	33c0      	adds	r3, #192	@ 0xc0
 8002514:	443b      	add	r3, r7
 8002516:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 800251a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800251e:	3301      	adds	r3, #1
 8002520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002524:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800252c:	429a      	cmp	r2, r3
 800252e:	d3c6      	bcc.n	80024be <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	1c4b      	adds	r3, r1, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	f107 0214 	add.w	r2, r7, #20
 800253a:	2301      	movs	r3, #1
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7ff fabe 	bl	8001ac4 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8002548:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800254c:	3301      	adds	r3, #1
 800254e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800255a:	429a      	cmp	r2, r3
 800255c:	f4ff aedc 	bcc.w	8002318 <DrawChar+0x5c>
    }
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	37c0      	adds	r7, #192	@ 0xc0
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	240002c0 	.word	0x240002c0

08002570 <FillTriangle>:
  * @brief  Fills a triangle (between 3 points).
  * @param  Positions  pointer to riangle coordinates
  * @param  Color      Draw color
  */
static void FillTriangle(Triangle_Positions_t *Positions, uint32_t Color)
{
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b08f      	sub	sp, #60	@ 0x3c
 8002574:	af02      	add	r7, sp, #8
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800257a:	2300      	movs	r3, #0
 800257c:	833b      	strh	r3, [r7, #24]
 800257e:	2300      	movs	r3, #0
 8002580:	82fb      	strh	r3, [r7, #22]
 8002582:	2300      	movs	r3, #0
 8002584:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002586:	2300      	movs	r3, #0
 8002588:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800258a:	2300      	movs	r3, #0
 800258c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800258e:	2300      	movs	r3, #0
 8002590:	853b      	strh	r3, [r7, #40]	@ 0x28
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8002592:	2300      	movs	r3, #0
 8002594:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002596:	2300      	movs	r3, #0
 8002598:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800259a:	2300      	movs	r3, #0
 800259c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800259e:	2300      	movs	r3, #0
 80025a0:	843b      	strh	r3, [r7, #32]
 80025a2:	2300      	movs	r3, #0
 80025a4:	83fb      	strh	r3, [r7, #30]
 80025a6:	2300      	movs	r3, #0
 80025a8:	83bb      	strh	r3, [r7, #28]
  curpixel = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	837b      	strh	r3, [r7, #26]
  int32_t x_diff, y_diff;

  x_diff = Positions->x2 - Positions->x1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	613b      	str	r3, [r7, #16]
  y_diff = Positions->y2 - Positions->y1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	60fb      	str	r3, [r7, #12]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bfb8      	it	lt
 80025cc:	425b      	neglt	r3, r3
 80025ce:	833b      	strh	r3, [r7, #24]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bfb8      	it	lt
 80025d6:	425b      	neglt	r3, r3
 80025d8:	82fb      	strh	r3, [r7, #22]
  x = Positions->x1;                       /* Start x off at the first pixel */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  y = Positions->y1;                       /* Start y off at the first pixel */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  if (Positions->x2 >= Positions->x1)                 /* The x-values are increasing */
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d304      	bcc.n	80025fc <FillTriangle+0x8c>
  {
    xinc1 = 1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    xinc2 = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80025fa:	e005      	b.n	8002608 <FillTriangle+0x98>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80025fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002600:	857b      	strh	r3, [r7, #42]	@ 0x2a
    xinc2 = -1;
 8002602:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002606:	853b      	strh	r3, [r7, #40]	@ 0x28
  }

  if (Positions->y2 >= Positions->y1)                 /* The y-values are increasing */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	d304      	bcc.n	800261e <FillTriangle+0xae>
  {
    yinc1 = 1;
 8002614:	2301      	movs	r3, #1
 8002616:	84fb      	strh	r3, [r7, #38]	@ 0x26
    yinc2 = 1;
 8002618:	2301      	movs	r3, #1
 800261a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800261c:	e005      	b.n	800262a <FillTriangle+0xba>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800261e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002622:	84fb      	strh	r3, [r7, #38]	@ 0x26
    yinc2 = -1;
 8002624:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002628:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800262a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800262e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002632:	429a      	cmp	r2, r3
 8002634:	db11      	blt.n	800265a <FillTriangle+0xea>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002636:	2300      	movs	r3, #0
 8002638:	857b      	strh	r3, [r7, #42]	@ 0x2a
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800263a:	2300      	movs	r3, #0
 800263c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    den = deltax;
 800263e:	8b3b      	ldrh	r3, [r7, #24]
 8002640:	847b      	strh	r3, [r7, #34]	@ 0x22
    num = deltax / 2;
 8002642:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	da00      	bge.n	800264c <FillTriangle+0xdc>
 800264a:	3301      	adds	r3, #1
 800264c:	105b      	asrs	r3, r3, #1
 800264e:	843b      	strh	r3, [r7, #32]
    numadd = deltay;
 8002650:	8afb      	ldrh	r3, [r7, #22]
 8002652:	83fb      	strh	r3, [r7, #30]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002654:	8b3b      	ldrh	r3, [r7, #24]
 8002656:	83bb      	strh	r3, [r7, #28]
 8002658:	e010      	b.n	800267c <FillTriangle+0x10c>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800265a:	2300      	movs	r3, #0
 800265c:	853b      	strh	r3, [r7, #40]	@ 0x28
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800265e:	2300      	movs	r3, #0
 8002660:	84fb      	strh	r3, [r7, #38]	@ 0x26
    den = deltay;
 8002662:	8afb      	ldrh	r3, [r7, #22]
 8002664:	847b      	strh	r3, [r7, #34]	@ 0x22
    num = deltay / 2;
 8002666:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800266a:	2b00      	cmp	r3, #0
 800266c:	da00      	bge.n	8002670 <FillTriangle+0x100>
 800266e:	3301      	adds	r3, #1
 8002670:	105b      	asrs	r3, r3, #1
 8002672:	843b      	strh	r3, [r7, #32]
    numadd = deltax;
 8002674:	8b3b      	ldrh	r3, [r7, #24]
 8002676:	83fb      	strh	r3, [r7, #30]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002678:	8afb      	ldrh	r3, [r7, #22]
 800267a:	83bb      	strh	r3, [r7, #28]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800267c:	2300      	movs	r3, #0
 800267e:	837b      	strh	r3, [r7, #26]
 8002680:	e036      	b.n	80026f0 <FillTriangle+0x180>
  {
    UTIL_LCD_DrawLine(x, y, Positions->x3, Positions->y3, Color);
 8002682:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8002686:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695c      	ldr	r4, [r3, #20]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4623      	mov	r3, r4
 8002698:	f7ff fbca 	bl	8001e30 <UTIL_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 800269c:	8c3a      	ldrh	r2, [r7, #32]
 800269e:	8bfb      	ldrh	r3, [r7, #30]
 80026a0:	4413      	add	r3, r2
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	843b      	strh	r3, [r7, #32]
    if (num >= den)             /* Check if numerator >= denominator */
 80026a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80026aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80026ae:	429a      	cmp	r2, r3
 80026b0:	db0e      	blt.n	80026d0 <FillTriangle+0x160>
    {
      num -= den;               /* Calculate the new numerator value */
 80026b2:	8c3a      	ldrh	r2, [r7, #32]
 80026b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	843b      	strh	r3, [r7, #32]
      x += xinc1;               /* Change the x as appropriate */
 80026bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80026be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80026c0:	4413      	add	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      y += yinc1;               /* Change the y as appropriate */
 80026c6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80026c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }
    x += xinc2;                 /* Change the x as appropriate */
 80026d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80026d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026d4:	4413      	add	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    y += yinc2;                 /* Change the y as appropriate */
 80026da:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80026dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026de:	4413      	add	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80026e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	837b      	strh	r3, [r7, #26]
 80026f0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80026f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	ddc2      	ble.n	8002682 <FillTriangle+0x112>
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3734      	adds	r7, #52	@ 0x34
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
	...

08002708 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4a08      	ldr	r2, [pc, #32]	@ (800273c <BSP_LED_On+0x34>)
 800271a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <BSP_LED_On+0x38>)
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	b29b      	uxth	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	f004 fea4 	bl	8007478 <HAL_GPIO_WritePin>
  return ret;
 8002730:	68fb      	ldr	r3, [r7, #12]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	24000058 	.word	0x24000058
 8002740:	08012b00 	.word	0x08012b00

08002744 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <BSP_PB_IRQHandler+0x20>)
 8002754:	4413      	add	r3, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fba4 	bl	8006ea4 <HAL_EXTI_IRQHandler>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2400032c 	.word	0x2400032c

08002768 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002772:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <BSP_I2C4_Init+0x64>)
 8002774:	4a16      	ldr	r2, [pc, #88]	@ (80027d0 <BSP_I2C4_Init+0x68>)
 8002776:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002778:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <BSP_I2C4_Init+0x6c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11f      	bne.n	80027c0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <BSP_I2C4_Init+0x6c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	4a13      	ldr	r2, [pc, #76]	@ (80027d4 <BSP_I2C4_Init+0x6c>)
 8002788:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800278a:	4810      	ldr	r0, [pc, #64]	@ (80027cc <BSP_I2C4_Init+0x64>)
 800278c:	f005 f990 	bl	8007ab0 <HAL_I2C_GetState>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002796:	480d      	ldr	r0, [pc, #52]	@ (80027cc <BSP_I2C4_Init+0x64>)
 8002798:	f000 fb60 	bl	8002e5c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800279c:	f007 f8ea 	bl	8009974 <HAL_RCC_GetPCLK2Freq>
 80027a0:	4603      	mov	r3, r0
 80027a2:	490d      	ldr	r1, [pc, #52]	@ (80027d8 <BSP_I2C4_Init+0x70>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f8e3 	bl	8002970 <I2C_GetTiming>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4619      	mov	r1, r3
 80027ae:	4807      	ldr	r0, [pc, #28]	@ (80027cc <BSP_I2C4_Init+0x64>)
 80027b0:	f000 f838 	bl	8002824 <MX_I2C4_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80027ba:	f06f 0307 	mvn.w	r3, #7
 80027be:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	24000d3c 	.word	0x24000d3c
 80027d0:	58001c00 	.word	0x58001c00
 80027d4:	24000334 	.word	0x24000334
 80027d8:	00061a80 	.word	0x00061a80

080027dc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <BSP_I2C4_DeInit+0x40>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	4a0b      	ldr	r2, [pc, #44]	@ (800281c <BSP_I2C4_DeInit+0x40>)
 80027ee:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80027f0:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <BSP_I2C4_DeInit+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80027f8:	4809      	ldr	r0, [pc, #36]	@ (8002820 <BSP_I2C4_DeInit+0x44>)
 80027fa:	f000 fb9b 	bl	8002f34 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80027fe:	4808      	ldr	r0, [pc, #32]	@ (8002820 <BSP_I2C4_DeInit+0x44>)
 8002800:	f004 fee4 	bl	80075cc <HAL_I2C_DeInit>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800280a:	f06f 0307 	mvn.w	r3, #7
 800280e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24000334 	.word	0x24000334
 8002820:	24000d3c 	.word	0x24000d3c

08002824 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f004 fe22 	bl	80074ac <HAL_I2C_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	e014      	b.n	800289e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f005 fbea 	bl	8008054 <HAL_I2CEx_ConfigAnalogFilter>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e008      	b.n	800289e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800288c:	2100      	movs	r1, #0
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f005 fc2b 	bl	80080ea <HAL_I2CEx_ConfigDigitalFilter>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60ba      	str	r2, [r7, #8]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	81fb      	strh	r3, [r7, #14]
 80028b6:	460b      	mov	r3, r1
 80028b8:	81bb      	strh	r3, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80028be:	89b9      	ldrh	r1, [r7, #12]
 80028c0:	89f8      	ldrh	r0, [r7, #14]
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f000 fb57 	bl	8002f7c <I2C4_WriteReg>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e00c      	b.n	80028f4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80028da:	4809      	ldr	r0, [pc, #36]	@ (8002900 <BSP_I2C4_WriteReg+0x58>)
 80028dc:	f005 f8f6 	bl	8007acc <HAL_I2C_GetError>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d103      	bne.n	80028ee <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80028e6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e002      	b.n	80028f4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80028ee:	f06f 0303 	mvn.w	r3, #3
 80028f2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80028f4:	697b      	ldr	r3, [r7, #20]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	24000d3c 	.word	0x24000d3c

08002904 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8
 800290a:	60ba      	str	r2, [r7, #8]
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	81fb      	strh	r3, [r7, #14]
 8002912:	460b      	mov	r3, r1
 8002914:	81bb      	strh	r3, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800291a:	89b9      	ldrh	r1, [r7, #12]
 800291c:	89f8      	ldrh	r0, [r7, #14]
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2201      	movs	r2, #1
 8002926:	f000 fb4f 	bl	8002fc8 <I2C4_ReadReg>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e00c      	b.n	8002950 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002936:	4809      	ldr	r0, [pc, #36]	@ (800295c <BSP_I2C4_ReadReg+0x58>)
 8002938:	f005 f8c8 	bl	8007acc <HAL_I2C_GetError>
 800293c:	4603      	mov	r3, r0
 800293e:	2b04      	cmp	r3, #4
 8002940:	d103      	bne.n	800294a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002942:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e002      	b.n	8002950 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800294a:	f06f 0303 	mvn.w	r3, #3
 800294e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002950:	697b      	ldr	r3, [r7, #20]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	24000d3c 	.word	0x24000d3c

08002960 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002964:	f002 fb86 	bl	8005074 <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d06b      	beq.n	8002a5c <I2C_GetTiming+0xec>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d068      	beq.n	8002a5c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	e060      	b.n	8002a52 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002990:	4a35      	ldr	r2, [pc, #212]	@ (8002a68 <I2C_GetTiming+0xf8>)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	212c      	movs	r1, #44	@ 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d352      	bcc.n	8002a4c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80029a6:	4a30      	ldr	r2, [pc, #192]	@ (8002a68 <I2C_GetTiming+0xf8>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	212c      	movs	r1, #44	@ 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3308      	adds	r3, #8
 80029b4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d847      	bhi.n	8002a4c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80029bc:	6939      	ldr	r1, [r7, #16]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f856 	bl	8002a70 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80029c4:	6939      	ldr	r1, [r7, #16]
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f940 	bl	8002c4c <I2C_Compute_SCLL_SCLH>
 80029cc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80029d2:	d842      	bhi.n	8002a5a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80029d4:	4925      	ldr	r1, [pc, #148]	@ (8002a6c <I2C_GetTiming+0xfc>)
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80029e6:	4821      	ldr	r0, [pc, #132]	@ (8002a6c <I2C_GetTiming+0xfc>)
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4403      	add	r3, r0
 80029f4:	3304      	adds	r3, #4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	051b      	lsls	r3, r3, #20
 80029fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80029fe:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002a00:	481a      	ldr	r0, [pc, #104]	@ (8002a6c <I2C_GetTiming+0xfc>)
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4403      	add	r3, r0
 8002a0e:	3308      	adds	r3, #8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002a18:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002a1a:	4814      	ldr	r0, [pc, #80]	@ (8002a6c <I2C_GetTiming+0xfc>)
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4403      	add	r3, r0
 8002a28:	330c      	adds	r3, #12
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002a30:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002a32:	480e      	ldr	r0, [pc, #56]	@ (8002a6c <I2C_GetTiming+0xfc>)
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4403      	add	r3, r0
 8002a40:	3310      	adds	r3, #16
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002a46:	430b      	orrs	r3, r1
 8002a48:	617b      	str	r3, [r7, #20]
        }
        break;
 8002a4a:	e006      	b.n	8002a5a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d99b      	bls.n	8002990 <I2C_GetTiming+0x20>
 8002a58:	e000      	b.n	8002a5c <I2C_GetTiming+0xec>
        break;
 8002a5a:	bf00      	nop
      }
    }
  }

  return ret;
 8002a5c:	697b      	ldr	r3, [r7, #20]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	08012b08 	.word	0x08012b08
 8002a6c:	24000338 	.word	0x24000338

08002a70 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b08f      	sub	sp, #60	@ 0x3c
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	085a      	lsrs	r2, r3, #1
 8002a82:	4b6e      	ldr	r3, [pc, #440]	@ (8002c3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a8c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002a8e:	2332      	movs	r3, #50	@ 0x32
 8002a90:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002a92:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002a96:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002a98:	4a69      	ldr	r2, [pc, #420]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	212c      	movs	r1, #44	@ 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3324      	adds	r3, #36	@ 0x24
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	212c      	movs	r1, #44	@ 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002abc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002abe:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002ac0:	495f      	ldr	r1, [pc, #380]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	202c      	movs	r0, #44	@ 0x2c
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	440b      	add	r3, r1
 8002acc:	3328      	adds	r3, #40	@ 0x28
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	69f9      	ldr	r1, [r7, #28]
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002adc:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	212c      	movs	r1, #44	@ 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3310      	adds	r3, #16
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	4a54      	ldr	r2, [pc, #336]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	212c      	movs	r1, #44	@ 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3320      	adds	r3, #32
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002b00:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002b02:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002b04:	494e      	ldr	r1, [pc, #312]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	202c      	movs	r0, #44	@ 0x2c
 8002b0a:	fb00 f303 	mul.w	r3, r0, r3
 8002b0e:	440b      	add	r3, r1
 8002b10:	3328      	adds	r3, #40	@ 0x28
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3304      	adds	r3, #4
 8002b16:	69f9      	ldr	r1, [r7, #28]
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002b20:	4a47      	ldr	r2, [pc, #284]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	212c      	movs	r1, #44	@ 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	4a43      	ldr	r2, [pc, #268]	@ (8002c40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	212c      	movs	r1, #44	@ 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3314      	adds	r3, #20
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4403      	add	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	dc01      	bgt.n	8002b50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dc01      	bgt.n	8002b5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b5e:	e062      	b.n	8002c26 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b64:	e059      	b.n	8002c1a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b6c:	3201      	adds	r2, #1
 8002b6e:	fb03 f202 	mul.w	r2, r3, r2
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d348      	bcc.n	8002c14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	e042      	b.n	8002c0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	fb03 f202 	mul.w	r2, r3, r2
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d332      	bcc.n	8002c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d82e      	bhi.n	8002c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002baa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d02a      	beq.n	8002c08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002bb2:	4b24      	ldr	r3, [pc, #144]	@ (8002c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4924      	ldr	r1, [pc, #144]	@ (8002c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bc4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	491f      	ldr	r1, [pc, #124]	@ (8002c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4919      	ldr	r1, [pc, #100]	@ (8002c48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3308      	adds	r3, #8
 8002bee:	6a3a      	ldr	r2, [r7, #32]
 8002bf0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8002bf6:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	4a11      	ldr	r2, [pc, #68]	@ (8002c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002bfe:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002c00:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c06:	d812      	bhi.n	8002c2e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2b0f      	cmp	r3, #15
 8002c12:	d9b9      	bls.n	8002b88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	3301      	adds	r3, #1
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d9a2      	bls.n	8002b66 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	3301      	adds	r3, #1
 8002c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	2b0f      	cmp	r3, #15
 8002c2a:	d999      	bls.n	8002b60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002c2c:	e000      	b.n	8002c30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002c2e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002c30:	373c      	adds	r7, #60	@ 0x3c
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	3b9aca00 	.word	0x3b9aca00
 8002c40:	08012b08 	.word	0x08012b08
 8002c44:	24000d38 	.word	0x24000d38
 8002c48:	24000338 	.word	0x24000338

08002c4c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b093      	sub	sp, #76	@ 0x4c
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	085a      	lsrs	r2, r3, #1
 8002c60:	4b7a      	ldr	r3, [pc, #488]	@ (8002e4c <I2C_Compute_SCLL_SCLH+0x200>)
 8002c62:	4413      	add	r3, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002c6c:	4a78      	ldr	r2, [pc, #480]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	212c      	movs	r1, #44	@ 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	085a      	lsrs	r2, r3, #1
 8002c7c:	4b73      	ldr	r3, [pc, #460]	@ (8002e4c <I2C_Compute_SCLL_SCLH+0x200>)
 8002c7e:	4413      	add	r3, r2
 8002c80:	4973      	ldr	r1, [pc, #460]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	202c      	movs	r0, #44	@ 0x2c
 8002c86:	fb00 f202 	mul.w	r2, r0, r2
 8002c8a:	440a      	add	r2, r1
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c92:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002c94:	2332      	movs	r3, #50	@ 0x32
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002c98:	4a6d      	ldr	r2, [pc, #436]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	212c      	movs	r1, #44	@ 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3328      	adds	r3, #40	@ 0x28
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002cb0:	4a67      	ldr	r2, [pc, #412]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	212c      	movs	r1, #44	@ 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a62      	ldr	r2, [pc, #392]	@ (8002e4c <I2C_Compute_SCLL_SCLH+0x200>)
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002cc8:	4a61      	ldr	r2, [pc, #388]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	212c      	movs	r1, #44	@ 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5c      	ldr	r2, [pc, #368]	@ (8002e4c <I2C_Compute_SCLL_SCLH+0x200>)
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce8:	e0a3      	b.n	8002e32 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002cea:	495a      	ldr	r1, [pc, #360]	@ (8002e54 <I2C_Compute_SCLL_SCLH+0x208>)
 8002cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d08:	e08c      	b.n	8002e24 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	441a      	add	r2, r3
 8002d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d12:	3301      	adds	r3, #1
 8002d14:	6979      	ldr	r1, [r7, #20]
 8002d16:	fb03 f101 	mul.w	r1, r3, r1
 8002d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	4413      	add	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002d24:	4a4a      	ldr	r2, [pc, #296]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	212c      	movs	r1, #44	@ 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3318      	adds	r3, #24
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d971      	bls.n	8002e1e <I2C_Compute_SCLL_SCLH+0x1d2>
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d268      	bcs.n	8002e1e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d50:	e062      	b.n	8002e18 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	441a      	add	r2, r3
 8002d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	6979      	ldr	r1, [r7, #20]
 8002d5e:	fb03 f101 	mul.w	r1, r3, r1
 8002d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	440b      	add	r3, r1
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	441a      	add	r2, r3
 8002d72:	4937      	ldr	r1, [pc, #220]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	202c      	movs	r0, #44	@ 0x2c
 8002d78:	fb00 f303 	mul.w	r3, r0, r3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3320      	adds	r3, #32
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	441a      	add	r2, r3
 8002d84:	4932      	ldr	r1, [pc, #200]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	202c      	movs	r0, #44	@ 0x2c
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	440b      	add	r3, r1
 8002d90:	3324      	adds	r3, #36	@ 0x24
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d338      	bcc.n	8002e12 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d834      	bhi.n	8002e12 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002da8:	4a29      	ldr	r2, [pc, #164]	@ (8002e50 <I2C_Compute_SCLL_SCLH+0x204>)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	212c      	movs	r1, #44	@ 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	331c      	adds	r3, #28
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d329      	bcc.n	8002e12 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d225      	bcs.n	8002e12 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da02      	bge.n	8002dda <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	425b      	negs	r3, r3
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d917      	bls.n	8002e12 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8002de6:	491b      	ldr	r1, [pc, #108]	@ (8002e54 <I2C_Compute_SCLL_SCLH+0x208>)
 8002de8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3310      	adds	r3, #16
 8002df6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002dfa:	4916      	ldr	r1, [pc, #88]	@ (8002e54 <I2C_Compute_SCLL_SCLH+0x208>)
 8002dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	330c      	adds	r3, #12
 8002e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e0c:	601a      	str	r2, [r3, #0]
              ret = count;
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	3301      	adds	r3, #1
 8002e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1a:	2bff      	cmp	r3, #255	@ 0xff
 8002e1c:	d999      	bls.n	8002d52 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e20:	3301      	adds	r3, #1
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e26:	2bff      	cmp	r3, #255	@ 0xff
 8002e28:	f67f af6f 	bls.w	8002d0a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	3301      	adds	r3, #1
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f4ff af56 	bcc.w	8002cea <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	374c      	adds	r7, #76	@ 0x4c
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	3b9aca00 	.word	0x3b9aca00
 8002e50:	08012b08 	.word	0x08012b08
 8002e54:	24000338 	.word	0x24000338
 8002e58:	24000d38 	.word	0x24000d38

08002e5c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002e64:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e6a:	4a30      	ldr	r2, [pc, #192]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002e6c:	f043 0308 	orr.w	r3, r3, #8
 8002e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e74:	4b2d      	ldr	r3, [pc, #180]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002e82:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e88:	4a28      	ldr	r2, [pc, #160]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ea4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002ea6:	2312      	movs	r3, #18
 8002ea8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	481c      	ldr	r0, [pc, #112]	@ (8002f30 <I2C4_MspInit+0xd4>)
 8002ebe:	f004 f821 	bl	8006f04 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002ec2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ec6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002ec8:	2312      	movs	r3, #18
 8002eca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4814      	ldr	r0, [pc, #80]	@ (8002f30 <I2C4_MspInit+0xd4>)
 8002ee0:	f004 f810 	bl	8006f04 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002eea:	4a10      	ldr	r2, [pc, #64]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f08:	4a08      	ldr	r2, [pc, #32]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f0e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f18:	4a04      	ldr	r2, [pc, #16]	@ (8002f2c <I2C4_MspInit+0xd0>)
 8002f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f1e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8002f22:	bf00      	nop
 8002f24:	3728      	adds	r7, #40	@ 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58020c00 	.word	0x58020c00

08002f34 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4619      	mov	r1, r3
 8002f46:	480b      	ldr	r0, [pc, #44]	@ (8002f74 <I2C4_MspDeInit+0x40>)
 8002f48:	f004 f98c 	bl	8007264 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4619      	mov	r1, r3
 8002f56:	4807      	ldr	r0, [pc, #28]	@ (8002f74 <I2C4_MspDeInit+0x40>)
 8002f58:	f004 f984 	bl	8007264 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <I2C4_MspDeInit+0x44>)
 8002f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f62:	4a05      	ldr	r2, [pc, #20]	@ (8002f78 <I2C4_MspDeInit+0x44>)
 8002f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8002f6c:	bf00      	nop
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58020c00 	.word	0x58020c00
 8002f78:	58024400 	.word	0x58024400

08002f7c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	4603      	mov	r3, r0
 8002f86:	81fb      	strh	r3, [r7, #14]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	81bb      	strh	r3, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002f90:	8978      	ldrh	r0, [r7, #10]
 8002f92:	89ba      	ldrh	r2, [r7, #12]
 8002f94:	89f9      	ldrh	r1, [r7, #14]
 8002f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f9a:	9302      	str	r3, [sp, #8]
 8002f9c:	8b3b      	ldrh	r3, [r7, #24]
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4807      	ldr	r0, [pc, #28]	@ (8002fc4 <I2C4_WriteReg+0x48>)
 8002fa8:	f004 fb54 	bl	8007654 <HAL_I2C_Mem_Write>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e001      	b.n	8002fba <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002fb6:	f06f 0307 	mvn.w	r3, #7
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	24000d3c 	.word	0x24000d3c

08002fc8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	81fb      	strh	r3, [r7, #14]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	81bb      	strh	r3, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002fdc:	8978      	ldrh	r0, [r7, #10]
 8002fde:	89ba      	ldrh	r2, [r7, #12]
 8002fe0:	89f9      	ldrh	r1, [r7, #14]
 8002fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	8b3b      	ldrh	r3, [r7, #24]
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4807      	ldr	r0, [pc, #28]	@ (8003010 <I2C4_ReadReg+0x48>)
 8002ff4:	f004 fc42 	bl	800787c <HAL_I2C_Mem_Read>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e001      	b.n	8003006 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003002:	f06f 0307 	mvn.w	r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	24000d3c 	.word	0x24000d3c

08003014 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800301e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003028:	2200      	movs	r2, #0
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f805 	bl	800303c <BSP_LCD_InitEx>
 8003032:	4603      	mov	r3, r0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b09e      	sub	sp, #120	@ 0x78
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800304a:	2300      	movs	r3, #0
 800304c:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d808      	bhi.n	800306a <BSP_LCD_InitEx+0x2e>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <BSP_LCD_InitEx+0x2e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d006      	beq.n	8003072 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800306a:	f06f 0301 	mvn.w	r3, #1
 800306e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003070:	e0a8      	b.n	80031c4 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d109      	bne.n	800308c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8003078:	2302      	movs	r3, #2
 800307a:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 800307c:	4a54      	ldr	r2, [pc, #336]	@ (80031d0 <BSP_LCD_InitEx+0x194>)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	015b      	lsls	r3, r3, #5
 8003082:	4413      	add	r3, r2
 8003084:	3310      	adds	r3, #16
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e008      	b.n	800309e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800308c:	2300      	movs	r3, #0
 800308e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8003090:	4a4f      	ldr	r2, [pc, #316]	@ (80031d0 <BSP_LCD_InitEx+0x194>)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	015b      	lsls	r3, r3, #5
 8003096:	4413      	add	r3, r2
 8003098:	3310      	adds	r3, #16
 800309a:	2204      	movs	r2, #4
 800309c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800309e:	4a4c      	ldr	r2, [pc, #304]	@ (80031d0 <BSP_LCD_InitEx+0x194>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	015b      	lsls	r3, r3, #5
 80030a4:	4413      	add	r3, r2
 80030a6:	330c      	adds	r3, #12
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80030ac:	4a48      	ldr	r2, [pc, #288]	@ (80031d0 <BSP_LCD_InitEx+0x194>)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	015b      	lsls	r3, r3, #5
 80030b2:	4413      	add	r3, r2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80030b8:	4a45      	ldr	r2, [pc, #276]	@ (80031d0 <BSP_LCD_InitEx+0x194>)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	015b      	lsls	r3, r3, #5
 80030be:	4413      	add	r3, r2
 80030c0:	3304      	adds	r3, #4
 80030c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030c6:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80030c8:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <BSP_LCD_InitEx+0x198>)
 80030ca:	4a43      	ldr	r2, [pc, #268]	@ (80031d8 <BSP_LCD_InitEx+0x19c>)
 80030cc:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80030ce:	4b43      	ldr	r3, [pc, #268]	@ (80031dc <BSP_LCD_InitEx+0x1a0>)
 80030d0:	4a43      	ldr	r2, [pc, #268]	@ (80031e0 <BSP_LCD_InitEx+0x1a4>)
 80030d2:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80030d4:	483f      	ldr	r0, [pc, #252]	@ (80031d4 <BSP_LCD_InitEx+0x198>)
 80030d6:	f000 fd1b 	bl	8003b10 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80030da:	4840      	ldr	r0, [pc, #256]	@ (80031dc <BSP_LCD_InitEx+0x1a0>)
 80030dc:	f000 fde4 	bl	8003ca8 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 80030e0:	4b40      	ldr	r3, [pc, #256]	@ (80031e4 <BSP_LCD_InitEx+0x1a8>)
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 80030e4:	4b40      	ldr	r3, [pc, #256]	@ (80031e8 <BSP_LCD_InitEx+0x1ac>)
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 80030e8:	2370      	movs	r3, #112	@ 0x70
 80030ea:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80030ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80030f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd fac2 	bl	8000680 <FT5336_RegisterBusIO>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da03      	bge.n	800310a <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003102:	f06f 0304 	mvn.w	r3, #4
 8003106:	677b      	str	r3, [r7, #116]	@ 0x74
 8003108:	e02b      	b.n	8003162 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800310a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800310e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd fbad 	bl	8000874 <FT5336_ReadID>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	da03      	bge.n	8003128 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003120:	f06f 0304 	mvn.w	r3, #4
 8003124:	677b      	str	r3, [r7, #116]	@ 0x74
 8003126:	e01c      	b.n	8003162 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8003128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800312a:	2b51      	cmp	r3, #81	@ 0x51
 800312c:	d003      	beq.n	8003136 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800312e:	f06f 0306 	mvn.w	r3, #6
 8003132:	677b      	str	r3, [r7, #116]	@ 0x74
 8003134:	e015      	b.n	8003162 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8003136:	4827      	ldr	r0, [pc, #156]	@ (80031d4 <BSP_LCD_InitEx+0x198>)
 8003138:	f000 f8e8 	bl	800330c <MX_LTDC_ClockConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003142:	f06f 0303 	mvn.w	r3, #3
 8003146:	677b      	str	r3, [r7, #116]	@ 0x74
 8003148:	e00b      	b.n	8003162 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800314a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	4820      	ldr	r0, [pc, #128]	@ (80031d4 <BSP_LCD_InitEx+0x198>)
 8003152:	f000 f84d 	bl	80031f0 <MX_LTDC_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800315c:	f06f 0303 	mvn.w	r3, #3
 8003160:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8003162:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12d      	bne.n	80031c4 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8003168:	2000      	movs	r0, #0
 800316a:	f000 fe2f 	bl	8003dcc <BSP_SDRAM_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8003174:	f06f 0303 	mvn.w	r3, #3
 8003178:	e025      	b.n	80031c6 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8003186:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800318a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 800318c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8003190:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	461a      	mov	r2, r3
 800319c:	2100      	movs	r1, #0
 800319e:	480d      	ldr	r0, [pc, #52]	@ (80031d4 <BSP_LCD_InitEx+0x198>)
 80031a0:	f000 f872 	bl	8003288 <MX_LTDC_ConfigLayer>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80031aa:	f06f 0303 	mvn.w	r3, #3
 80031ae:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80031b0:	480e      	ldr	r0, [pc, #56]	@ (80031ec <BSP_LCD_InitEx+0x1b0>)
 80031b2:	f000 fde1 	bl	8003d78 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80031b6:	4a06      	ldr	r2, [pc, #24]	@ (80031d0 <BSP_LCD_InitEx+0x194>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	015b      	lsls	r3, r3, #5
 80031bc:	4413      	add	r3, r2
 80031be:	3318      	adds	r3, #24
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80031c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3778      	adds	r7, #120	@ 0x78
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	24000eec 	.word	0x24000eec
 80031d4:	24000e44 	.word	0x24000e44
 80031d8:	50001000 	.word	0x50001000
 80031dc:	24000ddc 	.word	0x24000ddc
 80031e0:	52001000 	.word	0x52001000
 80031e4:	08002769 	.word	0x08002769
 80031e8:	08002905 	.word	0x08002905
 80031ec:	24000d90 	.word	0x24000d90

080031f0 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <MX_LTDC_Init+0x94>)
 8003200:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2228      	movs	r2, #40	@ 0x28
 800321e:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	222a      	movs	r2, #42	@ 0x2a
 8003224:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2209      	movs	r2, #9
 800323e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	220b      	movs	r2, #11
 8003244:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f103 020b 	add.w	r2, r3, #11
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f103 020d 	add.w	r2, r3, #13
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	22ff      	movs	r2, #255	@ 0xff
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	@ 0xff
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	22ff      	movs	r2, #255	@ 0xff
 800326e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f004 ff86 	bl	8008184 <HAL_LTDC_Init>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	50001000 	.word	0x50001000

08003288 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b092      	sub	sp, #72	@ 0x48
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 80032b2:	23ff      	movs	r3, #255	@ 0xff
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80032ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032be:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032c0:	2307      	movs	r3, #7
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	4619      	mov	r1, r3
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f005 f81b 	bl	8008338 <HAL_LTDC_ConfigLayer>
 8003302:	4603      	mov	r3, r0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3748      	adds	r7, #72	@ 0x48
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b0b2      	sub	sp, #200	@ 0xc8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8003314:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8003320:	2305      	movs	r3, #5
 8003322:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8003324:	23a0      	movs	r3, #160	@ 0xa0
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003328:	2302      	movs	r3, #2
 800332a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800332c:	2302      	movs	r3, #2
 800332e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8003330:	2353      	movs	r3, #83	@ 0x53
 8003332:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	4618      	mov	r0, r3
 8003342:	f006 fb6f 	bl	8009a24 <HAL_RCCEx_PeriphCLKConfig>
 8003346:	4603      	mov	r3, r0
}
 8003348:	4618      	mov	r0, r3
 800334a:	37c8      	adds	r7, #200	@ 0xc8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003364:	f06f 0301 	mvn.w	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e007      	b.n	800337c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800336c:	4a07      	ldr	r2, [pc, #28]	@ (800338c <BSP_LCD_GetPixelFormat+0x3c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	015b      	lsls	r3, r3, #5
 8003372:	4413      	add	r3, r2
 8003374:	330c      	adds	r3, #12
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800337c:	68fb      	ldr	r3, [r7, #12]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	24000eec 	.word	0x24000eec

08003390 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033a4:	f06f 0301 	mvn.w	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e006      	b.n	80033ba <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80033ac:	4a06      	ldr	r2, [pc, #24]	@ (80033c8 <BSP_LCD_SetActiveLayer+0x38>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	015b      	lsls	r3, r3, #5
 80033b2:	4413      	add	r3, r2
 80033b4:	3308      	adds	r3, #8
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80033ba:	68fb      	ldr	r3, [r7, #12]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	24000eec 	.word	0x24000eec

080033cc <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033e0:	f06f 0301 	mvn.w	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e006      	b.n	80033f6 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80033e8:	4a06      	ldr	r2, [pc, #24]	@ (8003404 <BSP_LCD_GetXSize+0x38>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	015b      	lsls	r3, r3, #5
 80033ee:	4413      	add	r3, r2
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	24000eec 	.word	0x24000eec

08003408 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800341c:	f06f 0301 	mvn.w	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e007      	b.n	8003434 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8003424:	4a07      	ldr	r2, [pc, #28]	@ (8003444 <BSP_LCD_GetYSize+0x3c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	015b      	lsls	r3, r3, #5
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	24000eec 	.word	0x24000eec

08003448 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	@ 0x38
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	330a      	adds	r3, #10
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	330b      	adds	r3, #11
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	441a      	add	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	041b      	lsls	r3, r3, #16
 8003474:	441a      	add	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	330d      	adds	r3, #13
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	4413      	add	r3, r2
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	3312      	adds	r3, #18
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	3313      	adds	r3, #19
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	441a      	add	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	441a      	add	r2, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	3315      	adds	r3, #21
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	4413      	add	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	3316      	adds	r3, #22
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	3317      	adds	r3, #23
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	441a      	add	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	3318      	adds	r3, #24
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	441a      	add	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	3319      	adds	r3, #25
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	4413      	add	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	331c      	adds	r3, #28
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	331d      	adds	r3, #29
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	4413      	add	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80034e6:	4a37      	ldr	r2, [pc, #220]	@ (80035c4 <BSP_LCD_DrawBitmap+0x17c>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	4413      	add	r3, r2
 80034ee:	3308      	adds	r3, #8
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a35      	ldr	r2, [pc, #212]	@ (80035c8 <BSP_LCD_DrawBitmap+0x180>)
 80034f4:	2134      	movs	r1, #52	@ 0x34
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	335c      	adds	r3, #92	@ 0x5c
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4930      	ldr	r1, [pc, #192]	@ (80035c4 <BSP_LCD_DrawBitmap+0x17c>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	015b      	lsls	r3, r3, #5
 8003506:	440b      	add	r3, r1
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	fb03 f101 	mul.w	r1, r3, r1
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	440b      	add	r3, r1
 8003514:	482b      	ldr	r0, [pc, #172]	@ (80035c4 <BSP_LCD_DrawBitmap+0x17c>)
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	0149      	lsls	r1, r1, #5
 800351a:	4401      	add	r1, r0
 800351c:	3110      	adds	r1, #16
 800351e:	6809      	ldr	r1, [r1, #0]
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3b20      	subs	r3, #32
 800352c:	2b07      	cmp	r3, #7
 800352e:	d802      	bhi.n	8003536 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
 8003534:	e008      	b.n	8003548 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3b10      	subs	r3, #16
 800353a:	2b07      	cmp	r3, #7
 800353c:	d802      	bhi.n	8003544 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800353e:	2302      	movs	r3, #2
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
 8003542:	e001      	b.n	8003548 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8003544:	2301      	movs	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3b01      	subs	r3, #1
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	08d2      	lsrs	r2, r2, #3
 8003556:	fb03 f202 	mul.w	r2, r3, r2
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	4413      	add	r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003568:	e023      	b.n	80035b2 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 800356a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6a39      	ldr	r1, [r7, #32]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fa77 	bl	8003a68 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800357a:	4a12      	ldr	r2, [pc, #72]	@ (80035c4 <BSP_LCD_DrawBitmap+0x17c>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	015b      	lsls	r3, r3, #5
 8003580:	4413      	add	r3, r2
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	490f      	ldr	r1, [pc, #60]	@ (80035c4 <BSP_LCD_DrawBitmap+0x17c>)
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	0152      	lsls	r2, r2, #5
 800358a:	440a      	add	r2, r1
 800358c:	3210      	adds	r2, #16
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003596:	4413      	add	r3, r2
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	08db      	lsrs	r3, r3, #3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	425b      	negs	r3, r3
 80035a6:	6a3a      	ldr	r2, [r7, #32]
 80035a8:	4413      	add	r3, r2
 80035aa:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	3301      	adds	r3, #1
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d3d7      	bcc.n	800356a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 80035ba:	69fb      	ldr	r3, [r7, #28]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3730      	adds	r7, #48	@ 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	24000eec 	.word	0x24000eec
 80035c8:	24000e44 	.word	0x24000e44

080035cc <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e032      	b.n	800364a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e028      	b.n	800363c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3301      	adds	r3, #1
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	431a      	orrs	r2, r3
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3303      	adds	r3, #3
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	18d1      	adds	r1, r2, r3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	441a      	add	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f95e 	bl	80038e0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <BSP_LCD_FillRGBRect+0x90>)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	015b      	lsls	r3, r3, #5
 800362a:	4413      	add	r3, r2
 800362c:	3310      	adds	r3, #16
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4413      	add	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	429a      	cmp	r2, r3
 8003642:	d3d2      	bcc.n	80035ea <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d3c8      	bcc.n	80035e4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	24000eec 	.word	0x24000eec

08003660 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800366e:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <BSP_LCD_DrawHLine+0x94>)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	015b      	lsls	r3, r3, #5
 8003674:	4413      	add	r3, r2
 8003676:	3308      	adds	r3, #8
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <BSP_LCD_DrawHLine+0x98>)
 800367c:	2134      	movs	r1, #52	@ 0x34
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	335c      	adds	r3, #92	@ 0x5c
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	491a      	ldr	r1, [pc, #104]	@ (80036f4 <BSP_LCD_DrawHLine+0x94>)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	015b      	lsls	r3, r3, #5
 800368e:	440b      	add	r3, r1
 8003690:	3310      	adds	r3, #16
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4817      	ldr	r0, [pc, #92]	@ (80036f4 <BSP_LCD_DrawHLine+0x94>)
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	0149      	lsls	r1, r1, #5
 800369a:	4401      	add	r1, r0
 800369c:	6809      	ldr	r1, [r1, #0]
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	fb01 f000 	mul.w	r0, r1, r0
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	4401      	add	r1, r0
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	441a      	add	r2, r3
 80036b6:	490f      	ldr	r1, [pc, #60]	@ (80036f4 <BSP_LCD_DrawHLine+0x94>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015b      	lsls	r3, r3, #5
 80036bc:	440b      	add	r3, r1
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d907      	bls.n	80036d4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80036c4:	4a0b      	ldr	r2, [pc, #44]	@ (80036f4 <BSP_LCD_DrawHLine+0x94>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	4413      	add	r3, r2
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	2300      	movs	r3, #0
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2301      	movs	r3, #1
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f956 	bl	8003994 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	24000eec 	.word	0x24000eec
 80036f8:	24000e44 	.word	0x24000e44

080036fc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800370a:	4a24      	ldr	r2, [pc, #144]	@ (800379c <BSP_LCD_DrawVLine+0xa0>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	015b      	lsls	r3, r3, #5
 8003710:	4413      	add	r3, r2
 8003712:	3308      	adds	r3, #8
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a22      	ldr	r2, [pc, #136]	@ (80037a0 <BSP_LCD_DrawVLine+0xa4>)
 8003718:	2134      	movs	r1, #52	@ 0x34
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	335c      	adds	r3, #92	@ 0x5c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	491d      	ldr	r1, [pc, #116]	@ (800379c <BSP_LCD_DrawVLine+0xa0>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	015b      	lsls	r3, r3, #5
 800372a:	440b      	add	r3, r1
 800372c:	3310      	adds	r3, #16
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	481a      	ldr	r0, [pc, #104]	@ (800379c <BSP_LCD_DrawVLine+0xa0>)
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	0149      	lsls	r1, r1, #5
 8003736:	4401      	add	r1, r0
 8003738:	6809      	ldr	r1, [r1, #0]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	fb01 f000 	mul.w	r0, r1, r0
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	4401      	add	r1, r0
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	441a      	add	r2, r3
 8003752:	4912      	ldr	r1, [pc, #72]	@ (800379c <BSP_LCD_DrawVLine+0xa0>)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	440b      	add	r3, r1
 800375a:	3304      	adds	r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d908      	bls.n	8003774 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8003762:	4a0e      	ldr	r2, [pc, #56]	@ (800379c <BSP_LCD_DrawVLine+0xa0>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	4413      	add	r3, r2
 800376a:	3304      	adds	r3, #4
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8003774:	6979      	ldr	r1, [r7, #20]
 8003776:	4a09      	ldr	r2, [pc, #36]	@ (800379c <BSP_LCD_DrawVLine+0xa0>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	4413      	add	r3, r2
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	9201      	str	r2, [sp, #4]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f901 	bl	8003994 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	24000eec 	.word	0x24000eec
 80037a0:	24000e44 	.word	0x24000e44

080037a4 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80037b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003820 <BSP_LCD_FillRect+0x7c>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	4413      	add	r3, r2
 80037ba:	3308      	adds	r3, #8
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a19      	ldr	r2, [pc, #100]	@ (8003824 <BSP_LCD_FillRect+0x80>)
 80037c0:	2134      	movs	r1, #52	@ 0x34
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	335c      	adds	r3, #92	@ 0x5c
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4914      	ldr	r1, [pc, #80]	@ (8003820 <BSP_LCD_FillRect+0x7c>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	440b      	add	r3, r1
 80037d4:	3310      	adds	r3, #16
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4811      	ldr	r0, [pc, #68]	@ (8003820 <BSP_LCD_FillRect+0x7c>)
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	0149      	lsls	r1, r1, #5
 80037de:	4401      	add	r1, r0
 80037e0:	6809      	ldr	r1, [r1, #0]
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	fb01 f000 	mul.w	r0, r1, r0
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4401      	add	r1, r0
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <BSP_LCD_FillRect+0x7c>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015b      	lsls	r3, r3, #5
 80037fc:	4413      	add	r3, r2
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f8c0 	bl	8003994 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	24000eec 	.word	0x24000eec
 8003824:	24000e44 	.word	0x24000e44

08003828 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003836:	4a28      	ldr	r2, [pc, #160]	@ (80038d8 <BSP_LCD_ReadPixel+0xb0>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	4413      	add	r3, r2
 800383e:	3308      	adds	r3, #8
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <BSP_LCD_ReadPixel+0xb4>)
 8003844:	2134      	movs	r1, #52	@ 0x34
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3348      	adds	r3, #72	@ 0x48
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11c      	bne.n	800388e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003854:	4a20      	ldr	r2, [pc, #128]	@ (80038d8 <BSP_LCD_ReadPixel+0xb0>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015b      	lsls	r3, r3, #5
 800385a:	4413      	add	r3, r2
 800385c:	3308      	adds	r3, #8
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1e      	ldr	r2, [pc, #120]	@ (80038dc <BSP_LCD_ReadPixel+0xb4>)
 8003862:	2134      	movs	r1, #52	@ 0x34
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	335c      	adds	r3, #92	@ 0x5c
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	491a      	ldr	r1, [pc, #104]	@ (80038d8 <BSP_LCD_ReadPixel+0xb0>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015b      	lsls	r3, r3, #5
 8003874:	440b      	add	r3, r1
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	fb03 f101 	mul.w	r1, r3, r1
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	440b      	add	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e01d      	b.n	80038ca <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800388e:	4a12      	ldr	r2, [pc, #72]	@ (80038d8 <BSP_LCD_ReadPixel+0xb0>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	015b      	lsls	r3, r3, #5
 8003894:	4413      	add	r3, r2
 8003896:	3308      	adds	r3, #8
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a10      	ldr	r2, [pc, #64]	@ (80038dc <BSP_LCD_ReadPixel+0xb4>)
 800389c:	2134      	movs	r1, #52	@ 0x34
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	335c      	adds	r3, #92	@ 0x5c
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	490b      	ldr	r1, [pc, #44]	@ (80038d8 <BSP_LCD_ReadPixel+0xb0>)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015b      	lsls	r3, r3, #5
 80038ae:	440b      	add	r3, r1
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	fb03 f101 	mul.w	r1, r3, r1
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	440b      	add	r3, r1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	24000eec 	.word	0x24000eec
 80038dc:	24000e44 	.word	0x24000e44

080038e0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80038ee:	4a27      	ldr	r2, [pc, #156]	@ (800398c <BSP_LCD_WritePixel+0xac>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	015b      	lsls	r3, r3, #5
 80038f4:	4413      	add	r3, r2
 80038f6:	3308      	adds	r3, #8
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <BSP_LCD_WritePixel+0xb0>)
 80038fc:	2134      	movs	r1, #52	@ 0x34
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3348      	adds	r3, #72	@ 0x48
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11c      	bne.n	8003946 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 800390c:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <BSP_LCD_WritePixel+0xac>)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015b      	lsls	r3, r3, #5
 8003912:	4413      	add	r3, r2
 8003914:	3308      	adds	r3, #8
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1d      	ldr	r2, [pc, #116]	@ (8003990 <BSP_LCD_WritePixel+0xb0>)
 800391a:	2134      	movs	r1, #52	@ 0x34
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	335c      	adds	r3, #92	@ 0x5c
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4919      	ldr	r1, [pc, #100]	@ (800398c <BSP_LCD_WritePixel+0xac>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	015b      	lsls	r3, r3, #5
 800392c:	440b      	add	r3, r1
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	fb03 f101 	mul.w	r1, r3, r1
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	440b      	add	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e01b      	b.n	800397e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8003946:	4a11      	ldr	r2, [pc, #68]	@ (800398c <BSP_LCD_WritePixel+0xac>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015b      	lsls	r3, r3, #5
 800394c:	4413      	add	r3, r2
 800394e:	3308      	adds	r3, #8
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a0f      	ldr	r2, [pc, #60]	@ (8003990 <BSP_LCD_WritePixel+0xb0>)
 8003954:	2134      	movs	r1, #52	@ 0x34
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	335c      	adds	r3, #92	@ 0x5c
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	490a      	ldr	r1, [pc, #40]	@ (800398c <BSP_LCD_WritePixel+0xac>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	015b      	lsls	r3, r3, #5
 8003966:	440b      	add	r3, r1
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	fb03 f101 	mul.w	r1, r3, r1
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	440b      	add	r3, r1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	b292      	uxth	r2, r2
 800397c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	24000eec 	.word	0x24000eec
 8003990:	24000e44 	.word	0x24000e44

08003994 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80039a6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a5c <LL_FillBuffer+0xc8>)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	015b      	lsls	r3, r3, #5
 80039ac:	4413      	add	r3, r2
 80039ae:	330c      	adds	r3, #12
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d129      	bne.n	8003a0a <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80039b6:	2302      	movs	r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	0adb      	lsrs	r3, r3, #11
 80039be:	f003 021f 	and.w	r2, r3, #31
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	4413      	add	r3, r2
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	3317      	adds	r3, #23
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	0419      	lsls	r1, r3, #16
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039da:	4613      	mov	r3, r2
 80039dc:	01db      	lsls	r3, r3, #7
 80039de:	4413      	add	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	3321      	adds	r3, #33	@ 0x21
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	4319      	orrs	r1, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	3317      	adds	r3, #23
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	430b      	orrs	r3, r1
 8003a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a06:	613b      	str	r3, [r7, #16]
    break;
 8003a08:	e002      	b.n	8003a10 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
    break;
 8003a0e:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a12:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a16:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003a18:	4a11      	ldr	r2, [pc, #68]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003a1e:	4a10      	ldr	r2, [pc, #64]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a26:	4a0f      	ldr	r2, [pc, #60]	@ (8003a64 <LL_FillBuffer+0xd0>)
 8003a28:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003a2a:	480d      	ldr	r0, [pc, #52]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a2c:	f002 ff64 	bl	80068f8 <HAL_DMA2D_Init>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10e      	bne.n	8003a54 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	4807      	ldr	r0, [pc, #28]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a42:	f002 ffc7 	bl	80069d4 <HAL_DMA2D_Start>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003a4c:	2132      	movs	r1, #50	@ 0x32
 8003a4e:	4804      	ldr	r0, [pc, #16]	@ (8003a60 <LL_FillBuffer+0xcc>)
 8003a50:	f002 ffeb 	bl	8006a2a <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	24000eec 	.word	0x24000eec
 8003a60:	24000ddc 	.word	0x24000ddc
 8003a64:	52001000 	.word	0x52001000

08003a68 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8003a76:	4a23      	ldr	r2, [pc, #140]	@ (8003b04 <LL_ConvertLineToRGB+0x9c>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	4413      	add	r3, r2
 8003a7e:	330c      	adds	r3, #12
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d102      	bne.n	8003a8c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8003a86:	2302      	movs	r3, #2
 8003a88:	617b      	str	r3, [r7, #20]
    break;
 8003a8a:	e002      	b.n	8003a92 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
    break;
 8003a90:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003a94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a98:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003aa0:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003aa6:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003aae:	22ff      	movs	r2, #255	@ 0xff
 8003ab0:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8003ab2:	4a15      	ldr	r2, [pc, #84]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003ab8:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003abe:	4b12      	ldr	r3, [pc, #72]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003ac0:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <LL_ConvertLineToRGB+0xa4>)
 8003ac2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003ac4:	4810      	ldr	r0, [pc, #64]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003ac6:	f002 ff17 	bl	80068f8 <HAL_DMA2D_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d115      	bne.n	8003afc <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	480d      	ldr	r0, [pc, #52]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003ad4:	f003 f892 	bl	8006bfc <HAL_DMA2D_ConfigLayer>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10e      	bne.n	8003afc <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4807      	ldr	r0, [pc, #28]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003aea:	f002 ff73 	bl	80069d4 <HAL_DMA2D_Start>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003af4:	2132      	movs	r1, #50	@ 0x32
 8003af6:	4804      	ldr	r0, [pc, #16]	@ (8003b08 <LL_ConvertLineToRGB+0xa0>)
 8003af8:	f002 ff97 	bl	8006a2a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	24000eec 	.word	0x24000eec
 8003b08:	24000ddc 	.word	0x24000ddc
 8003b0c:	52001000 	.word	0x52001000

08003b10 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	@ 0x38
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5b      	ldr	r2, [pc, #364]	@ (8003c8c <LTDC_MspInit+0x17c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	f040 80b0 	bne.w	8003c84 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003b24:	4b5a      	ldr	r3, [pc, #360]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b2a:	4a59      	ldr	r2, [pc, #356]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b34:	4b56      	ldr	r3, [pc, #344]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b42:	4b53      	ldr	r3, [pc, #332]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b48:	4a51      	ldr	r2, [pc, #324]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b52:	4b4f      	ldr	r3, [pc, #316]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b60:	4b4b      	ldr	r3, [pc, #300]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b66:	4a4a      	ldr	r2, [pc, #296]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b70:	4b47      	ldr	r3, [pc, #284]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003b7e:	4b44      	ldr	r3, [pc, #272]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b84:	4a42      	ldr	r2, [pc, #264]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b8e:	4b40      	ldr	r3, [pc, #256]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bac:	4b38      	ldr	r3, [pc, #224]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bba:	4b35      	ldr	r3, [pc, #212]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bc0:	4a33      	ldr	r2, [pc, #204]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003bc2:	f043 0308 	orr.w	r3, r3, #8
 8003bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bca:	4b31      	ldr	r3, [pc, #196]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003bd8:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003bde:	2302      	movs	r3, #2
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003be6:	2302      	movs	r3, #2
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003bea:	230e      	movs	r3, #14
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4827      	ldr	r0, [pc, #156]	@ (8003c94 <LTDC_MspInit+0x184>)
 8003bf6:	f003 f985 	bl	8006f04 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_All;
 8003bfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003c00:	230e      	movs	r3, #14
 8003c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4823      	ldr	r0, [pc, #140]	@ (8003c98 <LTDC_MspInit+0x188>)
 8003c0c:	f003 f97a 	bl	8006f04 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003c10:	23ff      	movs	r3, #255	@ 0xff
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003c14:	230e      	movs	r3, #14
 8003c16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	481f      	ldr	r0, [pc, #124]	@ (8003c9c <LTDC_MspInit+0x18c>)
 8003c20:	f003 f970 	bl	8006f04 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8003c24:	f240 2302 	movw	r3, #514	@ 0x202
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003c32:	2302      	movs	r3, #2
 8003c34:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003c36:	230e      	movs	r3, #14
 8003c38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4817      	ldr	r0, [pc, #92]	@ (8003ca0 <LTDC_MspInit+0x190>)
 8003c42:	f003 f95f 	bl	8006f04 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8003c46:	2380      	movs	r3, #128	@ 0x80
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c52:	4619      	mov	r1, r3
 8003c54:	4813      	ldr	r0, [pc, #76]	@ (8003ca4 <LTDC_MspInit+0x194>)
 8003c56:	f003 f955 	bl	8006f04 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2180      	movs	r1, #128	@ 0x80
 8003c5e:	4811      	ldr	r0, [pc, #68]	@ (8003ca4 <LTDC_MspInit+0x194>)
 8003c60:	f003 fc0a 	bl	8007478 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003c74:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c7a:	4a05      	ldr	r2, [pc, #20]	@ (8003c90 <LTDC_MspInit+0x180>)
 8003c7c:	f023 0308 	bic.w	r3, r3, #8
 8003c80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8003c84:	bf00      	nop
 8003c86:	3738      	adds	r7, #56	@ 0x38
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	50001000 	.word	0x50001000
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58022000 	.word	0x58022000
 8003c98:	58022400 	.word	0x58022400
 8003c9c:	58022800 	.word	0x58022800
 8003ca0:	58021c00 	.word	0x58021c00
 8003ca4:	58020c00 	.word	0x58020c00

08003ca8 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <DMA2D_MspInit+0x54>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d11a      	bne.n	8003cf0 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003cba:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003cbc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003cc2:	f043 0310 	orr.w	r3, r3, #16
 8003cc6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003ccc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003cd8:	4b09      	ldr	r3, [pc, #36]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cdc:	4a08      	ldr	r2, [pc, #32]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003cde:	f043 0310 	orr.w	r3, r3, #16
 8003ce2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce8:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <DMA2D_MspInit+0x58>)
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	52001000 	.word	0x52001000
 8003d00:	58024400 	.word	0x58024400

08003d04 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003d0c:	4b18      	ldr	r3, [pc, #96]	@ (8003d70 <TIMx_PWM_MspInit+0x6c>)
 8003d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d12:	4a17      	ldr	r2, [pc, #92]	@ (8003d70 <TIMx_PWM_MspInit+0x6c>)
 8003d14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d1c:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <TIMx_PWM_MspInit+0x6c>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8003d2a:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <TIMx_PWM_MspInit+0x6c>)
 8003d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d30:	4a0f      	ldr	r2, [pc, #60]	@ (8003d70 <TIMx_PWM_MspInit+0x6c>)
 8003d32:	f043 0302 	orr.w	r3, r3, #2
 8003d36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <TIMx_PWM_MspInit+0x6c>)
 8003d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003d50:	2301      	movs	r3, #1
 8003d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003d54:	2303      	movs	r3, #3
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4619      	mov	r1, r3
 8003d62:	4804      	ldr	r0, [pc, #16]	@ (8003d74 <TIMx_PWM_MspInit+0x70>)
 8003d64:	f003 f8ce 	bl	8006f04 <HAL_GPIO_Init>
}
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	@ 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	58024400 	.word	0x58024400
 8003d74:	58022800 	.word	0x58022800

08003d78 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <TIMx_PWM_Init+0x50>)
 8003d84:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f008 fd1d 	bl	800c7c6 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ffb9 	bl	8003d04 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003d9e:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f008 fcad 	bl	800c718 <HAL_TIM_PWM_Init>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40010400 	.word	0x40010400

08003dcc <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003dde:	f06f 0301 	mvn.w	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e044      	b.n	8003e70 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2234      	movs	r2, #52	@ 0x34
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	4a23      	ldr	r2, [pc, #140]	@ (8003e7c <BSP_SDRAM_Init+0xb0>)
 8003df0:	4413      	add	r3, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f892 	bl	8003f1c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2234      	movs	r2, #52	@ 0x34
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	4a1e      	ldr	r2, [pc, #120]	@ (8003e7c <BSP_SDRAM_Init+0xb0>)
 8003e02:	4413      	add	r3, r2
 8003e04:	2210      	movs	r2, #16
 8003e06:	2104      	movs	r1, #4
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 f83b 	bl	8003e84 <MX_SDRAM_BANK2_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	e029      	b.n	8003e70 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003e1c:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e1e:	2208      	movs	r2, #8
 8003e20:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8003e22:	4b17      	ldr	r3, [pc, #92]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e24:	2203      	movs	r2, #3
 8003e26:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8003e28:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e2a:	f240 6203 	movw	r2, #1539	@ 0x603
 8003e2e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8003e36:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003e3c:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e3e:	2230      	movs	r2, #48	@ 0x30
 8003e40:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8003e42:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8003e48:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e4e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2234      	movs	r2, #52	@ 0x34
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	4a08      	ldr	r2, [pc, #32]	@ (8003e7c <BSP_SDRAM_Init+0xb0>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4908      	ldr	r1, [pc, #32]	@ (8003e80 <BSP_SDRAM_Init+0xb4>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc ff6e 	bl	8000d40 <MT48LC4M32B2_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8003e6a:	f06f 0304 	mvn.w	r3, #4
 8003e6e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003e70:	68fb      	ldr	r3, [r7, #12]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	24000f0c 	.word	0x24000f0c
 8003e80:	24000f40 	.word	0x24000f40

08003e84 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	@ 0x30
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8003e90:	4b20      	ldr	r3, [pc, #128]	@ (8003f14 <MX_SDRAM_BANK2_Init+0x90>)
 8003e92:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <MX_SDRAM_BANK2_Init+0x94>)
 8003e94:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003eae:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <MX_SDRAM_BANK2_Init+0x90>)
 8003eb0:	2240      	movs	r2, #64	@ 0x40
 8003eb2:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003eba:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003edc:	2307      	movs	r3, #7
 8003ede:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8003ee4:	2307      	movs	r3, #7
 8003ee6:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 8003eec:	2302      	movs	r3, #2
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f008 fa90 	bl	800c420 <HAL_SDRAM_Init>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3730      	adds	r7, #48	@ 0x30
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	24000f0c 	.word	0x24000f0c
 8003f18:	52004140 	.word	0x52004140

08003f1c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08e      	sub	sp, #56	@ 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f24:	4b73      	ldr	r3, [pc, #460]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003f2a:	4a72      	ldr	r2, [pc, #456]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003f34:	4b6f      	ldr	r3, [pc, #444]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003f42:	4b6c      	ldr	r3, [pc, #432]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003f48:	4a6a      	ldr	r2, [pc, #424]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003f52:	4b68      	ldr	r3, [pc, #416]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f60:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f66:	4a63      	ldr	r2, [pc, #396]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f70:	4b60      	ldr	r3, [pc, #384]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f84:	4a5b      	ldr	r2, [pc, #364]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f8e:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f9c:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fa2:	4a54      	ldr	r2, [pc, #336]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fa4:	f043 0320 	orr.w	r3, r3, #32
 8003fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fac:	4b51      	ldr	r3, [pc, #324]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fba:	4b4e      	ldr	r3, [pc, #312]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fc0:	4a4c      	ldr	r2, [pc, #304]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fca:	4b4a      	ldr	r3, [pc, #296]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fd8:	4b46      	ldr	r3, [pc, #280]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fde:	4a45      	ldr	r2, [pc, #276]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <SDRAM_MspInit+0x1d8>)
 8003fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffe:	2303      	movs	r3, #3
 8004000:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004002:	230c      	movs	r3, #12
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8004006:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800400c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004010:	4619      	mov	r1, r3
 8004012:	4839      	ldr	r0, [pc, #228]	@ (80040f8 <SDRAM_MspInit+0x1dc>)
 8004014:	f002 ff76 	bl	8006f04 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004018:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800401e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004022:	4619      	mov	r1, r3
 8004024:	4835      	ldr	r0, [pc, #212]	@ (80040fc <SDRAM_MspInit+0x1e0>)
 8004026:	f002 ff6d 	bl	8006f04 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800402a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004034:	4619      	mov	r1, r3
 8004036:	4832      	ldr	r0, [pc, #200]	@ (8004100 <SDRAM_MspInit+0x1e4>)
 8004038:	f002 ff64 	bl	8006f04 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800403c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004046:	4619      	mov	r1, r3
 8004048:	482e      	ldr	r0, [pc, #184]	@ (8004104 <SDRAM_MspInit+0x1e8>)
 800404a:	f002 ff5b 	bl	8006f04 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800404e:	23e0      	movs	r3, #224	@ 0xe0
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8004052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004056:	4619      	mov	r1, r3
 8004058:	482b      	ldr	r0, [pc, #172]	@ (8004108 <SDRAM_MspInit+0x1ec>)
 800405a:	f002 ff53 	bl	8006f04 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800405e:	4b2b      	ldr	r3, [pc, #172]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004064:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8004066:	4b29      	ldr	r3, [pc, #164]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800406c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800406e:	4b27      	ldr	r3, [pc, #156]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004070:	2280      	movs	r2, #128	@ 0x80
 8004072:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8004074:	4b25      	ldr	r3, [pc, #148]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800407a:	4b24      	ldr	r3, [pc, #144]	@ (800410c <SDRAM_MspInit+0x1f0>)
 800407c:	f240 2202 	movw	r2, #514	@ 0x202
 8004080:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8004082:	4b22      	ldr	r3, [pc, #136]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004084:	f640 0208 	movw	r2, #2056	@ 0x808
 8004088:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800408a:	4b20      	ldr	r3, [pc, #128]	@ (800410c <SDRAM_MspInit+0x1f0>)
 800408c:	2220      	movs	r2, #32
 800408e:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8004090:	4b1e      	ldr	r3, [pc, #120]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004092:	2280      	movs	r2, #128	@ 0x80
 8004094:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8004096:	4b1d      	ldr	r3, [pc, #116]	@ (800410c <SDRAM_MspInit+0x1f0>)
 8004098:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800409e:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80040a4:	4b19      	ldr	r3, [pc, #100]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80040aa:	4b18      	ldr	r3, [pc, #96]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040ac:	2280      	movs	r2, #128	@ 0x80
 80040ae:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80040b0:	4b16      	ldr	r3, [pc, #88]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80040b6:	4b15      	ldr	r3, [pc, #84]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80040bc:	4b13      	ldr	r3, [pc, #76]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040be:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <SDRAM_MspInit+0x1f4>)
 80040c0:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80040c2:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <SDRAM_MspInit+0x1f8>)
 80040c4:	4a11      	ldr	r2, [pc, #68]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80040c8:	4b10      	ldr	r3, [pc, #64]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <SDRAM_MspInit+0x1f8>)
 80040cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80040ce:	480f      	ldr	r0, [pc, #60]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040d0:	f004 fb56 	bl	8008780 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80040d4:	480d      	ldr	r0, [pc, #52]	@ (800410c <SDRAM_MspInit+0x1f0>)
 80040d6:	f004 fb07 	bl	80086e8 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	210f      	movs	r1, #15
 80040de:	207a      	movs	r0, #122	@ 0x7a
 80040e0:	f002 fbe2 	bl	80068a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80040e4:	207a      	movs	r0, #122	@ 0x7a
 80040e6:	f002 fbf9 	bl	80068dc <HAL_NVIC_EnableIRQ>
}
 80040ea:	bf00      	nop
 80040ec:	3738      	adds	r7, #56	@ 0x38
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	58024400 	.word	0x58024400
 80040f8:	58020c00 	.word	0x58020c00
 80040fc:	58021000 	.word	0x58021000
 8004100:	58021400 	.word	0x58021400
 8004104:	58021800 	.word	0x58021800
 8004108:	58021c00 	.word	0x58021c00
 800410c:	24000f60 	.word	0x24000f60
 8004110:	52000040 	.word	0x52000040
 8004114:	24000f0c 	.word	0x24000f0c

08004118 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11c      	bne.n	8004166 <BSP_TS_Init+0x4e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d018      	beq.n	8004166 <BSP_TS_Init+0x4e>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800413c:	d813      	bhi.n	8004166 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00f      	beq.n	8004166 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800414e:	d80a      	bhi.n	8004166 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	428b      	cmp	r3, r1
 800415e:	bf28      	it	cs
 8004160:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004162:	429a      	cmp	r2, r3
 8004164:	d903      	bls.n	800416e <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004166:	f06f 0301 	mvn.w	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e06e      	b.n	800424c <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f98c 	bl	800448c <FT5336_Probe>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e064      	b.n	800424c <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4934      	ldr	r1, [pc, #208]	@ (8004258 <BSP_TS_Init+0x140>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	019b      	lsls	r3, r3, #6
 800418c:	440b      	add	r3, r1
 800418e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4930      	ldr	r1, [pc, #192]	@ (8004258 <BSP_TS_Init+0x140>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	019b      	lsls	r3, r3, #6
 800419a:	440b      	add	r3, r1
 800419c:	3304      	adds	r3, #4
 800419e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	492c      	ldr	r1, [pc, #176]	@ (8004258 <BSP_TS_Init+0x140>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	019b      	lsls	r3, r3, #6
 80041aa:	440b      	add	r3, r1
 80041ac:	3308      	adds	r3, #8
 80041ae:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4928      	ldr	r1, [pc, #160]	@ (8004258 <BSP_TS_Init+0x140>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	019b      	lsls	r3, r3, #6
 80041ba:	440b      	add	r3, r1
 80041bc:	330c      	adds	r3, #12
 80041be:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80041c0:	4b26      	ldr	r3, [pc, #152]	@ (800425c <BSP_TS_Init+0x144>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4926      	ldr	r1, [pc, #152]	@ (8004260 <BSP_TS_Init+0x148>)
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80041ce:	f107 010c 	add.w	r1, r7, #12
 80041d2:	4610      	mov	r0, r2
 80041d4:	4798      	blx	r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da03      	bge.n	80041e4 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80041dc:	f06f 0304 	mvn.w	r3, #4
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e033      	b.n	800424c <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	491c      	ldr	r1, [pc, #112]	@ (8004258 <BSP_TS_Init+0x140>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	019b      	lsls	r3, r3, #6
 80041ec:	440b      	add	r3, r1
 80041ee:	3310      	adds	r3, #16
 80041f0:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4918      	ldr	r1, [pc, #96]	@ (8004258 <BSP_TS_Init+0x140>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	440b      	add	r3, r1
 80041fc:	3314      	adds	r3, #20
 80041fe:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e01f      	b.n	8004246 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4413      	add	r3, r2
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	4811      	ldr	r0, [pc, #68]	@ (8004258 <BSP_TS_Init+0x140>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	0119      	lsls	r1, r3, #4
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	440b      	add	r3, r1
 800421c:	3306      	adds	r3, #6
 800421e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4413      	add	r3, r2
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	480a      	ldr	r0, [pc, #40]	@ (8004258 <BSP_TS_Init+0x140>)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0119      	lsls	r1, r3, #4
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	440b      	add	r3, r1
 8004238:	330a      	adds	r3, #10
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4403      	add	r3, r0
 800423e:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	3301      	adds	r3, #1
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d9dc      	bls.n	8004206 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800424c:	69fb      	ldr	r3, [r7, #28]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	24000fd4 	.word	0x24000fd4
 800425c:	24000fcc 	.word	0x24000fcc
 8004260:	24000fd0 	.word	0x24000fd0

08004264 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	@ 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004278:	f06f 0301 	mvn.w	r3, #1
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	e0f9      	b.n	8004474 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8004280:	4b7f      	ldr	r3, [pc, #508]	@ (8004480 <BSP_TS_GetState+0x21c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	497f      	ldr	r1, [pc, #508]	@ (8004484 <BSP_TS_GetState+0x220>)
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800428e:	f107 0108 	add.w	r1, r7, #8
 8004292:	4610      	mov	r0, r2
 8004294:	4798      	blx	r3
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	da03      	bge.n	80042a4 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800429c:	f06f 0304 	mvn.w	r3, #4
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a2:	e0e7      	b.n	8004474 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80d1 	beq.w	800444e <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80042b4:	4a74      	ldr	r2, [pc, #464]	@ (8004488 <BSP_TS_GetState+0x224>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	019b      	lsls	r3, r3, #6
 80042ba:	4413      	add	r3, r2
 80042bc:	3308      	adds	r3, #8
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80042d0:	4a6d      	ldr	r2, [pc, #436]	@ (8004488 <BSP_TS_GetState+0x224>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	4413      	add	r3, r2
 80042d8:	3308      	adds	r3, #8
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80042e4:	4a68      	ldr	r2, [pc, #416]	@ (8004488 <BSP_TS_GetState+0x224>)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	4413      	add	r3, r2
 80042ec:	3310      	adds	r3, #16
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80042f8:	4a63      	ldr	r2, [pc, #396]	@ (8004488 <BSP_TS_GetState+0x224>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	4413      	add	r3, r2
 8004300:	3308      	adds	r3, #8
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800430c:	4a5e      	ldr	r2, [pc, #376]	@ (8004488 <BSP_TS_GetState+0x224>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	019b      	lsls	r3, r3, #6
 8004312:	4413      	add	r3, r2
 8004314:	3314      	adds	r3, #20
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800431e:	4a5a      	ldr	r2, [pc, #360]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	4413      	add	r3, r2
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	fb03 f202 	mul.w	r2, r3, r2
 800432e:	4956      	ldr	r1, [pc, #344]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	019b      	lsls	r3, r3, #6
 8004334:	440b      	add	r3, r1
 8004336:	3310      	adds	r3, #16
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	fbb2 f2f3 	udiv	r2, r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004342:	4a51      	ldr	r2, [pc, #324]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	019b      	lsls	r3, r3, #6
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	fb03 f202 	mul.w	r2, r3, r2
 8004354:	494c      	ldr	r1, [pc, #304]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	440b      	add	r3, r1
 800435c:	3314      	adds	r3, #20
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	fbb2 f2f3 	udiv	r2, r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4945      	ldr	r1, [pc, #276]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	019b      	lsls	r3, r3, #6
 8004378:	440b      	add	r3, r1
 800437a:	3318      	adds	r3, #24
 800437c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800437e:	429a      	cmp	r2, r3
 8004380:	d909      	bls.n	8004396 <BSP_TS_GetState+0x132>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4940      	ldr	r1, [pc, #256]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	019b      	lsls	r3, r3, #6
 800438c:	440b      	add	r3, r1
 800438e:	3318      	adds	r3, #24
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	e008      	b.n	80043a8 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8004396:	4a3c      	ldr	r2, [pc, #240]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	019b      	lsls	r3, r3, #6
 800439c:	4413      	add	r3, r2
 800439e:	3318      	adds	r3, #24
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80043a6:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80043a8:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4936      	ldr	r1, [pc, #216]	@ (8004488 <BSP_TS_GetState+0x224>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	440b      	add	r3, r1
 80043b6:	332c      	adds	r3, #44	@ 0x2c
 80043b8:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d909      	bls.n	80043d2 <BSP_TS_GetState+0x16e>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	4931      	ldr	r1, [pc, #196]	@ (8004488 <BSP_TS_GetState+0x224>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	019b      	lsls	r3, r3, #6
 80043c8:	440b      	add	r3, r1
 80043ca:	332c      	adds	r3, #44	@ 0x2c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	e008      	b.n	80043e4 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 80043d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <BSP_TS_GetState+0x224>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	019b      	lsls	r3, r3, #6
 80043d8:	4413      	add	r3, r2
 80043da:	332c      	adds	r3, #44	@ 0x2c
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80043e2:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80043e4:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80043e6:	4a28      	ldr	r2, [pc, #160]	@ (8004488 <BSP_TS_GetState+0x224>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	019b      	lsls	r3, r3, #6
 80043ec:	4413      	add	r3, r2
 80043ee:	330c      	adds	r3, #12
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d808      	bhi.n	800440a <BSP_TS_GetState+0x1a6>
 80043f8:	4a23      	ldr	r2, [pc, #140]	@ (8004488 <BSP_TS_GetState+0x224>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	4413      	add	r3, r2
 8004400:	330c      	adds	r3, #12
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	429a      	cmp	r2, r3
 8004408:	d910      	bls.n	800442c <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	491e      	ldr	r1, [pc, #120]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	019b      	lsls	r3, r3, #6
 8004414:	440b      	add	r3, r1
 8004416:	3318      	adds	r3, #24
 8004418:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	491a      	ldr	r1, [pc, #104]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	019b      	lsls	r3, r3, #6
 8004424:	440b      	add	r3, r1
 8004426:	332c      	adds	r3, #44	@ 0x2c
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e023      	b.n	8004474 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800442c:	4a16      	ldr	r2, [pc, #88]	@ (8004488 <BSP_TS_GetState+0x224>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	4413      	add	r3, r2
 8004434:	3318      	adds	r3, #24
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800443c:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <BSP_TS_GetState+0x224>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	4413      	add	r3, r2
 8004444:	332c      	adds	r3, #44	@ 0x2c
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	e012      	b.n	8004474 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004454:	4a0c      	ldr	r2, [pc, #48]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	4413      	add	r3, r2
 800445c:	3318      	adds	r3, #24
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004464:	4a08      	ldr	r2, [pc, #32]	@ (8004488 <BSP_TS_GetState+0x224>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	4413      	add	r3, r2
 800446c:	332c      	adds	r3, #44	@ 0x2c
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004476:	4618      	mov	r0, r3
 8004478:	3728      	adds	r7, #40	@ 0x28
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	24000fcc 	.word	0x24000fcc
 8004484:	24000fd0 	.word	0x24000fd0
 8004488:	24000fd4 	.word	0x24000fd4

0800448c <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	@ 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800449c:	2370      	movs	r3, #112	@ 0x70
 800449e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80044a0:	4b23      	ldr	r3, [pc, #140]	@ (8004530 <FT5336_Probe+0xa4>)
 80044a2:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80044a4:	4b23      	ldr	r3, [pc, #140]	@ (8004534 <FT5336_Probe+0xa8>)
 80044a6:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80044a8:	4b23      	ldr	r3, [pc, #140]	@ (8004538 <FT5336_Probe+0xac>)
 80044aa:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80044ac:	4b23      	ldr	r3, [pc, #140]	@ (800453c <FT5336_Probe+0xb0>)
 80044ae:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 80044b0:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <FT5336_Probe+0xb4>)
 80044b2:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	4619      	mov	r1, r3
 80044ba:	4822      	ldr	r0, [pc, #136]	@ (8004544 <FT5336_Probe+0xb8>)
 80044bc:	f7fc f8e0 	bl	8000680 <FT5336_RegisterBusIO>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80044c6:	f06f 0307 	mvn.w	r3, #7
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80044cc:	e02a      	b.n	8004524 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	4619      	mov	r1, r3
 80044d4:	481b      	ldr	r0, [pc, #108]	@ (8004544 <FT5336_Probe+0xb8>)
 80044d6:	f7fc f9cd 	bl	8000874 <FT5336_ReadID>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80044e0:	f06f 0304 	mvn.w	r3, #4
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e6:	e01d      	b.n	8004524 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b51      	cmp	r3, #81	@ 0x51
 80044ec:	d003      	beq.n	80044f6 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80044ee:	f06f 0306 	mvn.w	r3, #6
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f4:	e016      	b.n	8004524 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 80044f6:	4a14      	ldr	r2, [pc, #80]	@ (8004548 <FT5336_Probe+0xbc>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4912      	ldr	r1, [pc, #72]	@ (8004544 <FT5336_Probe+0xb8>)
 80044fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004500:	4b12      	ldr	r3, [pc, #72]	@ (800454c <FT5336_Probe+0xc0>)
 8004502:	4a13      	ldr	r2, [pc, #76]	@ (8004550 <FT5336_Probe+0xc4>)
 8004504:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004506:	4b11      	ldr	r3, [pc, #68]	@ (800454c <FT5336_Probe+0xc0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	490e      	ldr	r1, [pc, #56]	@ (8004548 <FT5336_Probe+0xbc>)
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004514:	4610      	mov	r0, r2
 8004516:	4798      	blx	r3
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800451e:	f06f 0304 	mvn.w	r3, #4
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004526:	4618      	mov	r0, r3
 8004528:	3728      	adds	r7, #40	@ 0x28
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	08002769 	.word	0x08002769
 8004534:	080027dd 	.word	0x080027dd
 8004538:	08002905 	.word	0x08002905
 800453c:	080028a9 	.word	0x080028a9
 8004540:	08002961 	.word	0x08002961
 8004544:	24001014 	.word	0x24001014
 8004548:	24000fd0 	.word	0x24000fd0
 800454c:	24000fcc 	.word	0x24000fcc
 8004550:	24000000 	.word	0x24000000

08004554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <HAL_MspInit+0x30>)
 800455c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004560:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <HAL_MspInit+0x30>)
 8004562:	f043 0302 	orr.w	r3, r3, #2
 8004566:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_MspInit+0x30>)
 800456c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	58024400 	.word	0x58024400

08004588 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800459a:	bf00      	nop
 800459c:	e7fd      	b.n	800459a <HardFault_Handler+0x4>

0800459e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <MemManage_Handler+0x4>

080045a6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <BusFault_Handler+0x4>

080045ae <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80045ae:	b480      	push	{r7}
 80045b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <UsageFault_Handler+0x4>

080045b6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80045e4:	f7fd f894 	bl	8001710 <HAL_IncTick>
}
 80045e8:	bf00      	nop
 80045ea:	bd80      	pop	{r7, pc}

080045ec <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 80045f0:	2000      	movs	r0, #0
 80045f2:	f7fe f8a7 	bl	8002744 <BSP_PB_IRQHandler>
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004604:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <_sbrk+0x5c>)
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <_sbrk+0x60>)
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <_sbrk+0x64>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <_sbrk+0x64>)
 800461a:	4a12      	ldr	r2, [pc, #72]	@ (8004664 <_sbrk+0x68>)
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d207      	bcs.n	800463c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800462c:	f00a fcb6 	bl	800ef9c <__errno>
 8004630:	4603      	mov	r3, r0
 8004632:	220c      	movs	r2, #12
 8004634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	e009      	b.n	8004650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <_sbrk+0x64>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004642:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <_sbrk+0x64>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	4a05      	ldr	r2, [pc, #20]	@ (8004660 <_sbrk+0x64>)
 800464c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800464e:	68fb      	ldr	r3, [r7, #12]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	24080000 	.word	0x24080000
 800465c:	00000400 	.word	0x00000400
 8004660:	2400103c 	.word	0x2400103c
 8004664:	240012f0 	.word	0x240012f0

08004668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800466c:	4b37      	ldr	r3, [pc, #220]	@ (800474c <SystemInit+0xe4>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	4a36      	ldr	r2, [pc, #216]	@ (800474c <SystemInit+0xe4>)
 8004674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800467c:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <SystemInit+0xe8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2b06      	cmp	r3, #6
 8004686:	d807      	bhi.n	8004698 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004688:	4b31      	ldr	r3, [pc, #196]	@ (8004750 <SystemInit+0xe8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 030f 	bic.w	r3, r3, #15
 8004690:	4a2f      	ldr	r2, [pc, #188]	@ (8004750 <SystemInit+0xe8>)
 8004692:	f043 0307 	orr.w	r3, r3, #7
 8004696:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004698:	4b2e      	ldr	r3, [pc, #184]	@ (8004754 <SystemInit+0xec>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	@ (8004754 <SystemInit+0xec>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004754 <SystemInit+0xec>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80046aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004754 <SystemInit+0xec>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4929      	ldr	r1, [pc, #164]	@ (8004754 <SystemInit+0xec>)
 80046b0:	4b29      	ldr	r3, [pc, #164]	@ (8004758 <SystemInit+0xf0>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046b6:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <SystemInit+0xe8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046c2:	4b23      	ldr	r3, [pc, #140]	@ (8004750 <SystemInit+0xe8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 030f 	bic.w	r3, r3, #15
 80046ca:	4a21      	ldr	r2, [pc, #132]	@ (8004750 <SystemInit+0xe8>)
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80046d2:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <SystemInit+0xec>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80046d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <SystemInit+0xec>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80046de:	4b1d      	ldr	r3, [pc, #116]	@ (8004754 <SystemInit+0xec>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <SystemInit+0xec>)
 80046e6:	4a1d      	ldr	r2, [pc, #116]	@ (800475c <SystemInit+0xf4>)
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <SystemInit+0xec>)
 80046ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <SystemInit+0xf8>)
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80046f0:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <SystemInit+0xec>)
 80046f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004764 <SystemInit+0xfc>)
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80046f6:	4b17      	ldr	r3, [pc, #92]	@ (8004754 <SystemInit+0xec>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80046fc:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <SystemInit+0xec>)
 80046fe:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <SystemInit+0xfc>)
 8004700:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004702:	4b14      	ldr	r3, [pc, #80]	@ (8004754 <SystemInit+0xec>)
 8004704:	2200      	movs	r2, #0
 8004706:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <SystemInit+0xec>)
 800470a:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <SystemInit+0xfc>)
 800470c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800470e:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <SystemInit+0xec>)
 8004710:	2200      	movs	r2, #0
 8004712:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <SystemInit+0xec>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0e      	ldr	r2, [pc, #56]	@ (8004754 <SystemInit+0xec>)
 800471a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <SystemInit+0xec>)
 8004722:	2200      	movs	r2, #0
 8004724:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004726:	4b10      	ldr	r3, [pc, #64]	@ (8004768 <SystemInit+0x100>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <SystemInit+0x104>)
 800472c:	4013      	ands	r3, r2
 800472e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004732:	d202      	bcs.n	800473a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004734:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <SystemInit+0x108>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800473a:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <SystemInit+0x10c>)
 800473c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004740:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00
 8004750:	52002000 	.word	0x52002000
 8004754:	58024400 	.word	0x58024400
 8004758:	eaf6ed7f 	.word	0xeaf6ed7f
 800475c:	02020200 	.word	0x02020200
 8004760:	01ff0000 	.word	0x01ff0000
 8004764:	01010280 	.word	0x01010280
 8004768:	5c001000 	.word	0x5c001000
 800476c:	ffff0000 	.word	0xffff0000
 8004770:	51008108 	.word	0x51008108
 8004774:	52004000 	.word	0x52004000

08004778 <Binary_search>:
 *      Author: Nik
 */

#include "temp_conversion.h"

TempPair Binary_search(double res) {
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b08d      	sub	sp, #52	@ 0x34
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	ed87 0b00 	vstr	d0, [r7]
	int left = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int right = LUTSize - 1;
 8004788:	4b32      	ldr	r3, [pc, #200]	@ (8004854 <Binary_search+0xdc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3b01      	subs	r3, #1
 800478e:	62bb      	str	r3, [r7, #40]	@ 0x28

	while (left <= right) {
 8004790:	e04e      	b.n	8004830 <Binary_search+0xb8>
		int mid = left + (right - left) / 2;
 8004792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	da00      	bge.n	800479e <Binary_search+0x26>
 800479c:	3301      	adds	r3, #1
 800479e:	105b      	asrs	r3, r3, #1
 80047a0:	461a      	mov	r2, r3
 80047a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a4:	4413      	add	r3, r2
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24

		if (LUT[mid].res >= res) {
 80047a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004858 <Binary_search+0xe0>)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80047b8:	ed97 6b00 	vldr	d6, [r7]
 80047bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d819      	bhi.n	80047fa <Binary_search+0x82>
			if (LUT[mid+1].res <= res) {
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	3301      	adds	r3, #1
 80047ca:	4a23      	ldr	r2, [pc, #140]	@ (8004858 <Binary_search+0xe0>)
 80047cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80047d8:	ed97 6b00 	vldr	d6, [r7]
 80047dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80047e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e4:	db05      	blt.n	80047f2 <Binary_search+0x7a>
				return Get_temps(mid);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f836 	bl	800485c <Get_temps>
 80047f0:	e02c      	b.n	800484c <Binary_search+0xd4>
			} else {
				left = mid + 1;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	3301      	adds	r3, #1
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f8:	e01a      	b.n	8004830 <Binary_search+0xb8>
			}
		} else {
			if (LUT[mid-1].res >= res) {
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4a16      	ldr	r2, [pc, #88]	@ (8004858 <Binary_search+0xe0>)
 8004800:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800480c:	ed97 6b00 	vldr	d6, [r7]
 8004810:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	d807      	bhi.n	800482a <Binary_search+0xb2>
				return Get_temps(mid-1);
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	1e5a      	subs	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f81a 	bl	800485c <Get_temps>
 8004828:	e010      	b.n	800484c <Binary_search+0xd4>
			} else {
				right = mid - 1;
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	3b01      	subs	r3, #1
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (left <= right) {
 8004830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	429a      	cmp	r2, r3
 8004836:	ddac      	ble.n	8004792 <Binary_search+0x1a>
			}
		}
	}

	TempPair error;
	error.res1 = -1;
 8004838:	f04f 33ff 	mov.w	r3, #4294967295
 800483c:	61bb      	str	r3, [r7, #24]
	return error;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	461c      	mov	r4, r3
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	3734      	adds	r7, #52	@ 0x34
 8004850:	46bd      	mov	sp, r7
 8004852:	bd90      	pop	{r4, r7, pc}
 8004854:	0800fcf8 	.word	0x0800fcf8
 8004858:	0800f980 	.word	0x0800f980

0800485c <Get_temps>:

TempPair Get_temps(int mid) {
 800485c:	b490      	push	{r4, r7}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	TempPair result;
	result.temp1 = LUT[mid].temp;
 8004866:	4a12      	ldr	r2, [pc, #72]	@ (80048b0 <Get_temps+0x54>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60bb      	str	r3, [r7, #8]
	result.res1 = LUT[mid].res;
 8004872:	4a0f      	ldr	r2, [pc, #60]	@ (80048b0 <Get_temps+0x54>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800487a:	60fb      	str	r3, [r7, #12]
	result.temp2 = LUT[mid+1].temp;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a0b      	ldr	r2, [pc, #44]	@ (80048b0 <Get_temps+0x54>)
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	613b      	str	r3, [r7, #16]
	result.res2 = LUT[mid+1].res;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	4a08      	ldr	r2, [pc, #32]	@ (80048b0 <Get_temps+0x54>)
 8004890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004894:	617b      	str	r3, [r7, #20]
	return result;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	461c      	mov	r4, r3
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc90      	pop	{r4, r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	0800f980 	.word	0x0800f980

080048b4 <Linear_interpolation>:

float Linear_interpolation(TempPair temps, double res) {
 80048b4:	b490      	push	{r4, r7}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	f107 0408 	add.w	r4, r7, #8
 80048be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80048c2:	ed87 0b00 	vstr	d0, [r7]
	float weight = (res - temps.res1) / (temps.res2 - temps.res1);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80048d0:	ed97 6b00 	vldr	d6, [r7]
 80048d4:	ee36 5b47 	vsub.f64	d5, d6, d7
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80048e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80048ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]

	return temps.temp1 + weight;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004900:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004904:	eeb0 0a67 	vmov.f32	s0, s15
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bc90      	pop	{r4, r7}
 800490e:	4770      	bx	lr

08004910 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	@ 0x28
 8004914:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004916:	f107 031c 	add.w	r3, r7, #28
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004922:	463b      	mov	r3, r7
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	611a      	str	r2, [r3, #16]
 8004930:	615a      	str	r2, [r3, #20]
 8004932:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8004934:	4b22      	ldr	r3, [pc, #136]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 8004936:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800493a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 800493c:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 800493e:	22c7      	movs	r2, #199	@ 0xc7
 8004940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004942:	4b1f      	ldr	r3, [pc, #124]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 8004944:	2200      	movs	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004948:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 800494a:	f04f 32ff 	mov.w	r2, #4294967295
 800494e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004950:	4b1b      	ldr	r3, [pc, #108]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004956:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 8004958:	2200      	movs	r2, #0
 800495a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800495c:	4818      	ldr	r0, [pc, #96]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 800495e:	f007 fedb 	bl	800c718 <HAL_TIM_PWM_Init>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004968:	f7fc ffa4 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4619      	mov	r1, r3
 800497a:	4811      	ldr	r0, [pc, #68]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 800497c:	f008 ff16 	bl	800d7ac <HAL_TIMEx_MasterConfigSynchronization>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004986:	f7fc ff95 	bl	80018b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800498a:	2360      	movs	r3, #96	@ 0x60
 800498c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800499a:	463b      	mov	r3, r7
 800499c:	2204      	movs	r2, #4
 800499e:	4619      	mov	r1, r3
 80049a0:	4807      	ldr	r0, [pc, #28]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 80049a2:	f008 fa31 	bl	800ce08 <HAL_TIM_PWM_ConfigChannel>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80049ac:	f7fc ff82 	bl	80018b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80049b0:	4803      	ldr	r0, [pc, #12]	@ (80049c0 <MX_TIM2_Init+0xb0>)
 80049b2:	f000 f84f 	bl	8004a54 <HAL_TIM_MspPostInit>

}
 80049b6:	bf00      	nop
 80049b8:	3728      	adds	r7, #40	@ 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	24001040 	.word	0x24001040

080049c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	@ 0x28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	605a      	str	r2, [r3, #4]
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e4:	d12d      	bne.n	8004a42 <HAL_TIM_PWM_MspInit+0x7e>
  {
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049e6:	4b19      	ldr	r3, [pc, #100]	@ (8004a4c <HAL_TIM_PWM_MspInit+0x88>)
 80049e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ec:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <HAL_TIM_PWM_MspInit+0x88>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <HAL_TIM_PWM_MspInit+0x88>)
 80049f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a04:	4b11      	ldr	r3, [pc, #68]	@ (8004a4c <HAL_TIM_PWM_MspInit+0x88>)
 8004a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0a:	4a10      	ldr	r2, [pc, #64]	@ (8004a4c <HAL_TIM_PWM_MspInit+0x88>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a14:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <HAL_TIM_PWM_MspInit+0x88>)
 8004a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a22:	2308      	movs	r3, #8
 8004a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a26:	2302      	movs	r3, #2
 8004a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a32:	2301      	movs	r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4804      	ldr	r0, [pc, #16]	@ (8004a50 <HAL_TIM_PWM_MspInit+0x8c>)
 8004a3e:	f002 fa61 	bl	8006f04 <HAL_GPIO_Init>

  }
}
 8004a42:	bf00      	nop
 8004a44:	3728      	adds	r7, #40	@ 0x28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	58020000 	.word	0x58020000

08004a54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f107 030c 	add.w	r3, r7, #12
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a74:	d11e      	bne.n	8004ab4 <HAL_TIM_MspPostInit+0x60>
  {

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <HAL_TIM_MspPostInit+0x68>)
 8004a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004abc <HAL_TIM_MspPostInit+0x68>)
 8004a7e:	f043 0302 	orr.w	r3, r3, #2
 8004a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <HAL_TIM_MspPostInit+0x68>)
 8004a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a94:	2308      	movs	r3, #8
 8004a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa8:	f107 030c 	add.w	r3, r7, #12
 8004aac:	4619      	mov	r1, r3
 8004aae:	4804      	ldr	r0, [pc, #16]	@ (8004ac0 <HAL_TIM_MspPostInit+0x6c>)
 8004ab0:	f002 fa28 	bl	8006f04 <HAL_GPIO_Init>

  }

}
 8004ab4:	bf00      	nop
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	58020400 	.word	0x58020400

08004ac4 <HAL_TIM_PWM_MspDeInit>:

void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d10f      	bne.n	8004af6 <HAL_TIM_PWM_MspDeInit+0x32>
  {
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <HAL_TIM_PWM_MspDeInit+0x3c>)
 8004ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004adc:	4a08      	ldr	r2, [pc, #32]	@ (8004b00 <HAL_TIM_PWM_MspDeInit+0x3c>)
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8

    /**TIM2 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8004ae6:	2108      	movs	r1, #8
 8004ae8:	4806      	ldr	r0, [pc, #24]	@ (8004b04 <HAL_TIM_PWM_MspDeInit+0x40>)
 8004aea:	f002 fbbb 	bl	8007264 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8004aee:	2108      	movs	r1, #8
 8004af0:	4805      	ldr	r0, [pc, #20]	@ (8004b08 <HAL_TIM_PWM_MspDeInit+0x44>)
 8004af2:	f002 fbb7 	bl	8007264 <HAL_GPIO_DeInit>

  }
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
 8004b04:	58020400 	.word	0x58020400
 8004b08:	58020000 	.word	0x58020000

08004b0c <Touchscreen_template_init>:
				{415, 211}
		};

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void Touchscreen_template_init(void) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af02      	add	r7, sp, #8
	  ts_status = BSP_ERROR_NONE;
 8004b12:	4b47      	ldr	r3, [pc, #284]	@ (8004c30 <Touchscreen_template_init+0x124>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
	  uint32_t x_size, y_size;

	  BSP_LCD_GetXSize(0, &x_size);
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7fe fc54 	bl	80033cc <BSP_LCD_GetXSize>
	  BSP_LCD_GetYSize(0, &y_size);
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4619      	mov	r1, r3
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f7fe fc6c 	bl	8003408 <BSP_LCD_GetYSize>

	  hTS.Width = x_size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a40      	ldr	r2, [pc, #256]	@ (8004c34 <Touchscreen_template_init+0x128>)
 8004b34:	6013      	str	r3, [r2, #0]
	  hTS.Height = y_size;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a3e      	ldr	r2, [pc, #248]	@ (8004c34 <Touchscreen_template_init+0x128>)
 8004b3a:	6053      	str	r3, [r2, #4]
	  hTS.Orientation =TS_SWAP_XY ;
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c34 <Touchscreen_template_init+0x128>)
 8004b3e:	2208      	movs	r2, #8
 8004b40:	609a      	str	r2, [r3, #8]
	  hTS.Accuracy = 5;
 8004b42:	4b3c      	ldr	r3, [pc, #240]	@ (8004c34 <Touchscreen_template_init+0x128>)
 8004b44:	2205      	movs	r2, #5
 8004b46:	60da      	str	r2, [r3, #12]

	  /* Touchscreen initialization */
	  ts_status = BSP_TS_Init(0, &hTS);
 8004b48:	493a      	ldr	r1, [pc, #232]	@ (8004c34 <Touchscreen_template_init+0x128>)
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7ff fae4 	bl	8004118 <BSP_TS_Init>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	4b36      	ldr	r3, [pc, #216]	@ (8004c30 <Touchscreen_template_init+0x124>)
 8004b56:	601a      	str	r2, [r3, #0]

	  if(ts_status == BSP_ERROR_NONE)
 8004b58:	4b35      	ldr	r3, [pc, #212]	@ (8004c30 <Touchscreen_template_init+0x124>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d163      	bne.n	8004c28 <Touchscreen_template_init+0x11c>
	  {
		uint32_t x_size, y_size;

		BSP_LCD_GetXSize(0, &x_size);
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	2000      	movs	r0, #0
 8004b66:	f7fe fc31 	bl	80033cc <BSP_LCD_GetXSize>
		BSP_LCD_GetYSize(0, &y_size);
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fe fc4a 	bl	8003408 <BSP_LCD_GetYSize>


		/* Clear the LCD */
		UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	f7fd f860 	bl	8001c3c <UTIL_LCD_Clear>

		/* Set Temperature Alarm description */
		UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_RED);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004c38 <Touchscreen_template_init+0x12c>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2350      	movs	r3, #80	@ 0x50
 8004b84:	2100      	movs	r1, #0
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7fd fa38 	bl	8001ffc <UTIL_LCD_FillRect>
		UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	f7fc ff5c 	bl	8001a4c <UTIL_LCD_SetTextColor>
		UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
 8004b94:	4828      	ldr	r0, [pc, #160]	@ (8004c38 <Touchscreen_template_init+0x12c>)
 8004b96:	f7fc ff6d 	bl	8001a74 <UTIL_LCD_SetBackColor>
		UTIL_LCD_SetFont(&Font24);
 8004b9a:	4828      	ldr	r0, [pc, #160]	@ (8004c3c <Touchscreen_template_init+0x130>)
 8004b9c:	f7fc ff7e 	bl	8001a9c <UTIL_LCD_SetFont>
		UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Temperature Alarm", CENTER_MODE);
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	4a27      	ldr	r2, [pc, #156]	@ (8004c40 <Touchscreen_template_init+0x134>)
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fd f894 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>
		UTIL_LCD_SetFont(&Font20);
 8004bac:	4825      	ldr	r0, [pc, #148]	@ (8004c44 <Touchscreen_template_init+0x138>)
 8004bae:	f7fc ff75 	bl	8001a9c <UTIL_LCD_SetFont>
		UTIL_LCD_DisplayStringAt(0, 131, (uint8_t *)"Current Temperature", CENTER_MODE);
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4a24      	ldr	r2, [pc, #144]	@ (8004c48 <Touchscreen_template_init+0x13c>)
 8004bb6:	2183      	movs	r1, #131	@ 0x83
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fd f88b 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>
		UTIL_LCD_SetFont(&Font12);
 8004bbe:	4823      	ldr	r0, [pc, #140]	@ (8004c4c <Touchscreen_template_init+0x140>)
 8004bc0:	f7fc ff6c 	bl	8001a9c <UTIL_LCD_SetFont>
		UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the touchscreen to", CENTER_MODE);
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4a22      	ldr	r2, [pc, #136]	@ (8004c50 <Touchscreen_template_init+0x144>)
 8004bc8:	211e      	movs	r1, #30
 8004bca:	2000      	movs	r0, #0
 8004bcc:	f7fd f882 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>
		UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"change at what temperature", CENTER_MODE);
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4a20      	ldr	r2, [pc, #128]	@ (8004c54 <Touchscreen_template_init+0x148>)
 8004bd4:	212d      	movs	r1, #45	@ 0x2d
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fd f87c 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>
		UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"the alarm will trigger.", CENTER_MODE);
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4a1e      	ldr	r2, [pc, #120]	@ (8004c58 <Touchscreen_template_init+0x14c>)
 8004be0:	213c      	movs	r1, #60	@ 0x3c
 8004be2:	2000      	movs	r0, #0
 8004be4:	f7fd f876 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>

		// Draw button border
		UTIL_LCD_DrawRect(400, 90, 70, y_size - 100, UTIL_LCD_COLOR_RED);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	3b64      	subs	r3, #100	@ 0x64
 8004bec:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <Touchscreen_template_init+0x12c>)
 8004bee:	9200      	str	r2, [sp, #0]
 8004bf0:	2246      	movs	r2, #70	@ 0x46
 8004bf2:	215a      	movs	r1, #90	@ 0x5a
 8004bf4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8004bf8:	f7fd f9d6 	bl	8001fa8 <UTIL_LCD_DrawRect>
		UTIL_LCD_DrawRect(401, 91, 68, y_size - 102, UTIL_LCD_COLOR_RED);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	3b66      	subs	r3, #102	@ 0x66
 8004c00:	4a0d      	ldr	r2, [pc, #52]	@ (8004c38 <Touchscreen_template_init+0x12c>)
 8004c02:	9200      	str	r2, [sp, #0]
 8004c04:	2244      	movs	r2, #68	@ 0x44
 8004c06:	215b      	movs	r1, #91	@ 0x5b
 8004c08:	f240 1091 	movw	r0, #401	@ 0x191
 8004c0c:	f7fd f9cc 	bl	8001fa8 <UTIL_LCD_DrawRect>

		// Draw buttons
		UTIL_LCD_FillPolygon(button_up, 3, UTIL_LCD_COLOR_BLACK);
 8004c10:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004c14:	2103      	movs	r1, #3
 8004c16:	4811      	ldr	r0, [pc, #68]	@ (8004c5c <Touchscreen_template_init+0x150>)
 8004c18:	f7fd fa2a 	bl	8002070 <UTIL_LCD_FillPolygon>
		UTIL_LCD_FillPolygon(button_down, 3, UTIL_LCD_COLOR_BLACK);
 8004c1c:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004c20:	2103      	movs	r1, #3
 8004c22:	480f      	ldr	r0, [pc, #60]	@ (8004c60 <Touchscreen_template_init+0x154>)
 8004c24:	f7fd fa24 	bl	8002070 <UTIL_LCD_FillPolygon>
	  }
}
 8004c28:	bf00      	nop
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	24001098 	.word	0x24001098
 8004c34:	2400109c 	.word	0x2400109c
 8004c38:	ffff0000 	.word	0xffff0000
 8004c3c:	24000040 	.word	0x24000040
 8004c40:	0800f8e8 	.word	0x0800f8e8
 8004c44:	24000048 	.word	0x24000048
 8004c48:	0800f8fc 	.word	0x0800f8fc
 8004c4c:	24000050 	.word	0x24000050
 8004c50:	0800f910 	.word	0x0800f910
 8004c54:	0800f930 	.word	0x0800f930
 8004c58:	0800f94c 	.word	0x0800f94c
 8004c5c:	24000068 	.word	0x24000068
 8004c60:	24000074 	.word	0x24000074

08004c64 <Draw_temperature>:

void Draw_temperature(int temp_int, int temp_frac) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	static char buffer[8];

	sprintf(buffer, "%d.%02d", temp_int, temp_frac);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	490d      	ldr	r1, [pc, #52]	@ (8004ca8 <Draw_temperature+0x44>)
 8004c74:	480d      	ldr	r0, [pc, #52]	@ (8004cac <Draw_temperature+0x48>)
 8004c76:	f00a f969 	bl	800ef4c <siprintf>

	UTIL_LCD_SetFont(&Font24);
 8004c7a:	480d      	ldr	r0, [pc, #52]	@ (8004cb0 <Draw_temperature+0x4c>)
 8004c7c:	f7fc ff0e 	bl	8001a9c <UTIL_LCD_SetFont>
	UTIL_LCD_FillRect(105, 151, 266, 50, UTIL_LCD_COLOR_RED);
 8004c80:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <Draw_temperature+0x50>)
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2332      	movs	r3, #50	@ 0x32
 8004c86:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8004c8a:	2197      	movs	r1, #151	@ 0x97
 8004c8c:	2069      	movs	r0, #105	@ 0x69
 8004c8e:	f7fd f9b5 	bl	8001ffc <UTIL_LCD_FillRect>
	UTIL_LCD_DisplayStringAt(0, 166, (uint8_t *)buffer, CENTER_MODE);
 8004c92:	2301      	movs	r3, #1
 8004c94:	4a05      	ldr	r2, [pc, #20]	@ (8004cac <Draw_temperature+0x48>)
 8004c96:	21a6      	movs	r1, #166	@ 0xa6
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7fd f81b 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	0800f964 	.word	0x0800f964
 8004cac:	240010b0 	.word	0x240010b0
 8004cb0:	24000040 	.word	0x24000040
 8004cb4:	ffff0000 	.word	0xffff0000

08004cb8 <Button_check>:

Button_Pressed_Typedef Button_check(void) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	ts_status = BSP_TS_GetState(0, &TS_State);
 8004cbc:	4920      	ldr	r1, [pc, #128]	@ (8004d40 <Button_check+0x88>)
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7ff fad0 	bl	8004264 <BSP_TS_GetState>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004d44 <Button_check+0x8c>)
 8004cca:	601a      	str	r2, [r3, #0]

	if(TS_State.TouchDetected) {
 8004ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <Button_check+0x88>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d032      	beq.n	8004d3a <Button_check+0x82>
		x = TS_State.TouchX;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <Button_check+0x88>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	4b1b      	ldr	r3, [pc, #108]	@ (8004d48 <Button_check+0x90>)
 8004cdc:	801a      	strh	r2, [r3, #0]
		y = TS_State.TouchY;
 8004cde:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <Button_check+0x88>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <Button_check+0x94>)
 8004ce6:	801a      	strh	r2, [r3, #0]

		if (x <= 470 && x >= 400 && y <= 141 && y >= 91) {
 8004ce8:	4b17      	ldr	r3, [pc, #92]	@ (8004d48 <Button_check+0x90>)
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	f5b3 7feb 	cmp.w	r3, #470	@ 0x1d6
 8004cf0:	d80e      	bhi.n	8004d10 <Button_check+0x58>
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <Button_check+0x90>)
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004cfa:	d309      	bcc.n	8004d10 <Button_check+0x58>
 8004cfc:	4b13      	ldr	r3, [pc, #76]	@ (8004d4c <Button_check+0x94>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	2b8d      	cmp	r3, #141	@ 0x8d
 8004d02:	d805      	bhi.n	8004d10 <Button_check+0x58>
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <Button_check+0x94>)
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	2b5a      	cmp	r3, #90	@ 0x5a
 8004d0a:	d901      	bls.n	8004d10 <Button_check+0x58>
			return BUTTON_PRESSED_UP;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e015      	b.n	8004d3c <Button_check+0x84>
		}
		if (x <= 470 && x >= 400 && y <= 261 && y >= 211) {
 8004d10:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <Button_check+0x90>)
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	f5b3 7feb 	cmp.w	r3, #470	@ 0x1d6
 8004d18:	d80f      	bhi.n	8004d3a <Button_check+0x82>
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <Button_check+0x90>)
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004d22:	d30a      	bcc.n	8004d3a <Button_check+0x82>
 8004d24:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <Button_check+0x94>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8004d2c:	d205      	bcs.n	8004d3a <Button_check+0x82>
 8004d2e:	4b07      	ldr	r3, [pc, #28]	@ (8004d4c <Button_check+0x94>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	2bd2      	cmp	r3, #210	@ 0xd2
 8004d34:	d901      	bls.n	8004d3a <Button_check+0x82>
			return BUTTON_PRESSED_DOWN;
 8004d36:	2302      	movs	r3, #2
 8004d38:	e000      	b.n	8004d3c <Button_check+0x84>
		}
	}

	return BUTTON_PRESSED_NONE;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2400108c 	.word	0x2400108c
 8004d44:	24001098 	.word	0x24001098
 8004d48:	240010ac 	.word	0x240010ac
 8004d4c:	240010ae 	.word	0x240010ae

08004d50 <Draw_threshold>:

void Draw_threshold(int16_t alarm_temp) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
	static char buffer[8];

	sprintf(buffer, "%d", alarm_temp);
 8004d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	490c      	ldr	r1, [pc, #48]	@ (8004d94 <Draw_threshold+0x44>)
 8004d62:	480d      	ldr	r0, [pc, #52]	@ (8004d98 <Draw_threshold+0x48>)
 8004d64:	f00a f8f2 	bl	800ef4c <siprintf>

	UTIL_LCD_SetFont(&Font24);
 8004d68:	480c      	ldr	r0, [pc, #48]	@ (8004d9c <Draw_threshold+0x4c>)
 8004d6a:	f7fc fe97 	bl	8001a9c <UTIL_LCD_SetFont>
	UTIL_LCD_FillRect(405, 151, 60, 50, UTIL_LCD_COLOR_RED);
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <Draw_threshold+0x50>)
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	2332      	movs	r3, #50	@ 0x32
 8004d74:	223c      	movs	r2, #60	@ 0x3c
 8004d76:	2197      	movs	r1, #151	@ 0x97
 8004d78:	f240 1095 	movw	r0, #405	@ 0x195
 8004d7c:	f7fd f93e 	bl	8001ffc <UTIL_LCD_FillRect>
	UTIL_LCD_DisplayStringAt(195, 166, (uint8_t *)buffer, CENTER_MODE);
 8004d80:	2301      	movs	r3, #1
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <Draw_threshold+0x48>)
 8004d84:	21a6      	movs	r1, #166	@ 0xa6
 8004d86:	20c3      	movs	r0, #195	@ 0xc3
 8004d88:	f7fc ffa4 	bl	8001cd4 <UTIL_LCD_DisplayStringAt>
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	0800f96c 	.word	0x0800f96c
 8004d98:	240010b8 	.word	0x240010b8
 8004d9c:	24000040 	.word	0x24000040
 8004da0:	ffff0000 	.word	0xffff0000

08004da4 <Draw_buttons>:

void Draw_buttons(Button_Pressed_Typedef current_state, Button_Pressed_Typedef prev_state) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	460a      	mov	r2, r1
 8004dae:	71fb      	strb	r3, [r7, #7]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71bb      	strb	r3, [r7, #6]
	switch(current_state) {
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d026      	beq.n	8004e08 <Draw_buttons+0x64>
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	dc33      	bgt.n	8004e26 <Draw_buttons+0x82>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <Draw_buttons+0x24>
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d011      	beq.n	8004dea <Draw_buttons+0x46>
				UTIL_LCD_FillPolygon(button_up, 3, UTIL_LCD_COLOR_BLACK);
			}
			UTIL_LCD_FillPolygon(button_down, 3, UTIL_LCD_COLOR_DARKRED);
		break;
	}
}
 8004dc6:	e02e      	b.n	8004e26 <Draw_buttons+0x82>
			if (prev_state == BUTTON_PRESSED_UP) {
 8004dc8:	79bb      	ldrb	r3, [r7, #6]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d106      	bne.n	8004ddc <Draw_buttons+0x38>
				UTIL_LCD_FillPolygon(button_up, 3, UTIL_LCD_COLOR_BLACK);
 8004dce:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004dd2:	2103      	movs	r1, #3
 8004dd4:	4816      	ldr	r0, [pc, #88]	@ (8004e30 <Draw_buttons+0x8c>)
 8004dd6:	f7fd f94b 	bl	8002070 <UTIL_LCD_FillPolygon>
		break;
 8004dda:	e024      	b.n	8004e26 <Draw_buttons+0x82>
				UTIL_LCD_FillPolygon(button_down, 3, UTIL_LCD_COLOR_BLACK);
 8004ddc:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004de0:	2103      	movs	r1, #3
 8004de2:	4814      	ldr	r0, [pc, #80]	@ (8004e34 <Draw_buttons+0x90>)
 8004de4:	f7fd f944 	bl	8002070 <UTIL_LCD_FillPolygon>
		break;
 8004de8:	e01d      	b.n	8004e26 <Draw_buttons+0x82>
			if (prev_state == BUTTON_PRESSED_DOWN) {
 8004dea:	79bb      	ldrb	r3, [r7, #6]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d105      	bne.n	8004dfc <Draw_buttons+0x58>
				UTIL_LCD_FillPolygon(button_down, 3, UTIL_LCD_COLOR_BLACK);
 8004df0:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004df4:	2103      	movs	r1, #3
 8004df6:	480f      	ldr	r0, [pc, #60]	@ (8004e34 <Draw_buttons+0x90>)
 8004df8:	f7fd f93a 	bl	8002070 <UTIL_LCD_FillPolygon>
			UTIL_LCD_FillPolygon(button_up, 3, UTIL_LCD_COLOR_DARKRED);
 8004dfc:	4a0e      	ldr	r2, [pc, #56]	@ (8004e38 <Draw_buttons+0x94>)
 8004dfe:	2103      	movs	r1, #3
 8004e00:	480b      	ldr	r0, [pc, #44]	@ (8004e30 <Draw_buttons+0x8c>)
 8004e02:	f7fd f935 	bl	8002070 <UTIL_LCD_FillPolygon>
		break;
 8004e06:	e00e      	b.n	8004e26 <Draw_buttons+0x82>
			if (prev_state == BUTTON_PRESSED_UP) {
 8004e08:	79bb      	ldrb	r3, [r7, #6]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d105      	bne.n	8004e1a <Draw_buttons+0x76>
				UTIL_LCD_FillPolygon(button_up, 3, UTIL_LCD_COLOR_BLACK);
 8004e0e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004e12:	2103      	movs	r1, #3
 8004e14:	4806      	ldr	r0, [pc, #24]	@ (8004e30 <Draw_buttons+0x8c>)
 8004e16:	f7fd f92b 	bl	8002070 <UTIL_LCD_FillPolygon>
			UTIL_LCD_FillPolygon(button_down, 3, UTIL_LCD_COLOR_DARKRED);
 8004e1a:	4a07      	ldr	r2, [pc, #28]	@ (8004e38 <Draw_buttons+0x94>)
 8004e1c:	2103      	movs	r1, #3
 8004e1e:	4805      	ldr	r0, [pc, #20]	@ (8004e34 <Draw_buttons+0x90>)
 8004e20:	f7fd f926 	bl	8002070 <UTIL_LCD_FillPolygon>
		break;
 8004e24:	bf00      	nop
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	24000068 	.word	0x24000068
 8004e34:	24000074 	.word	0x24000074
 8004e38:	ff800000 	.word	0xff800000

08004e3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8004e40:	4b22      	ldr	r3, [pc, #136]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e42:	4a23      	ldr	r2, [pc, #140]	@ (8004ed0 <MX_USART3_UART_Init+0x94>)
 8004e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e46:	4b21      	ldr	r3, [pc, #132]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e62:	220c      	movs	r2, #12
 8004e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e66:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e84:	4811      	ldr	r0, [pc, #68]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e86:	f008 fdc7 	bl	800da18 <HAL_UART_Init>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004e90:	f7fc fd10 	bl	80018b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e94:	2100      	movs	r1, #0
 8004e96:	480d      	ldr	r0, [pc, #52]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004e98:	f009 fe57 	bl	800eb4a <HAL_UARTEx_SetTxFifoThreshold>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004ea2:	f7fc fd07 	bl	80018b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4808      	ldr	r0, [pc, #32]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004eaa:	f009 fe8c 	bl	800ebc6 <HAL_UARTEx_SetRxFifoThreshold>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004eb4:	f7fc fcfe 	bl	80018b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004eb8:	4804      	ldr	r0, [pc, #16]	@ (8004ecc <MX_USART3_UART_Init+0x90>)
 8004eba:	f009 fe0d 	bl	800ead8 <HAL_UARTEx_DisableFifoMode>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004ec4:	f7fc fcf6 	bl	80018b4 <Error_Handler>
  }

}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	240010c0 	.word	0x240010c0
 8004ed0:	40004800 	.word	0x40004800

08004ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004edc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	60da      	str	r2, [r3, #12]
 8004eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004eec:	f107 0310 	add.w	r3, r7, #16
 8004ef0:	22c0      	movs	r2, #192	@ 0xc0
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f00a f849 	bl	800ef8c <memset>
  if(uartHandle->Instance==USART3)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a27      	ldr	r2, [pc, #156]	@ (8004f9c <HAL_UART_MspInit+0xc8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d146      	bne.n	8004f92 <HAL_UART_MspInit+0xbe>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004f04:	f04f 0202 	mov.w	r2, #2
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f004 fd82 	bl	8009a24 <HAL_RCCEx_PeriphCLKConfig>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004f26:	f7fc fcc5 	bl	80018b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <HAL_UART_MspInit+0xcc>)
 8004f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f30:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa0 <HAL_UART_MspInit+0xcc>)
 8004f32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f3a:	4b19      	ldr	r3, [pc, #100]	@ (8004fa0 <HAL_UART_MspInit+0xcc>)
 8004f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f48:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <HAL_UART_MspInit+0xcc>)
 8004f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f4e:	4a14      	ldr	r2, [pc, #80]	@ (8004fa0 <HAL_UART_MspInit+0xcc>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f58:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <HAL_UART_MspInit+0xcc>)
 8004f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f80:	2307      	movs	r3, #7
 8004f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	@ (8004fa4 <HAL_UART_MspInit+0xd0>)
 8004f8e:	f001 ffb9 	bl	8006f04 <HAL_GPIO_Init>

  }
}
 8004f92:	bf00      	nop
 8004f94:	37e8      	adds	r7, #232	@ 0xe8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40004800 	.word	0x40004800
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	58020400 	.word	0x58020400

08004fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fe0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004fac:	f7ff fb5c 	bl	8004668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fb0:	480c      	ldr	r0, [pc, #48]	@ (8004fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fb2:	490d      	ldr	r1, [pc, #52]	@ (8004fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8004fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fb8:	e002      	b.n	8004fc0 <LoopCopyDataInit>

08004fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fbe:	3304      	adds	r3, #4

08004fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fc4:	d3f9      	bcc.n	8004fba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8004ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fcc:	e001      	b.n	8004fd2 <LoopFillZerobss>

08004fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fd0:	3204      	adds	r2, #4

08004fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fd4:	d3fb      	bcc.n	8004fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004fd6:	f009 ffe7 	bl	800efa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fda:	f7fc f9a1 	bl	8001320 <main>
  bx  lr
 8004fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fe0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004fe4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004fe8:	240000d8 	.word	0x240000d8
  ldr r2, =_sidata
 8004fec:	08012c34 	.word	0x08012c34
  ldr r2, =_sbss
 8004ff0:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 8004ff4:	240012ec 	.word	0x240012ec

08004ff8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ff8:	e7fe      	b.n	8004ff8 <ADC3_IRQHandler>
	...

08004ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005002:	2003      	movs	r0, #3
 8005004:	f001 fc45 	bl	8006892 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005008:	f004 faf4 	bl	80095f4 <HAL_RCC_GetSysClockFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <HAL_Init+0x68>)
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	4913      	ldr	r1, [pc, #76]	@ (8005068 <HAL_Init+0x6c>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
 8005024:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005026:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <HAL_Init+0x68>)
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4a0e      	ldr	r2, [pc, #56]	@ (8005068 <HAL_Init+0x6c>)
 8005030:	5cd3      	ldrb	r3, [r2, r3]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	4a0b      	ldr	r2, [pc, #44]	@ (800506c <HAL_Init+0x70>)
 800503e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005040:	4a0b      	ldr	r2, [pc, #44]	@ (8005070 <HAL_Init+0x74>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005046:	200f      	movs	r0, #15
 8005048:	f008 fc5c 	bl	800d904 <HAL_InitTick>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e002      	b.n	800505c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005056:	f7ff fa7d 	bl	8004554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	58024400 	.word	0x58024400
 8005068:	08012bb8 	.word	0x08012bb8
 800506c:	24000064 	.word	0x24000064
 8005070:	24000060 	.word	0x24000060

08005074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return uwTick;
 8005078:	4b03      	ldr	r3, [pc, #12]	@ (8005088 <HAL_GetTick+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	24001154 	.word	0x24001154

0800508c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005090:	4b03      	ldr	r3, [pc, #12]	@ (80050a0 <HAL_GetREVID+0x14>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0c1b      	lsrs	r3, r3, #16
}
 8005096:	4618      	mov	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	5c001000 	.word	0x5c001000

080050a4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_EnableCompensationCell+0x1c>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <HAL_EnableCompensationCell+0x1c>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6213      	str	r3, [r2, #32]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	58000400 	.word	0x58000400

080050c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	609a      	str	r2, [r3, #8]
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3360      	adds	r3, #96	@ 0x60
 800513e:	461a      	mov	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	430b      	orrs	r3, r1
 800515a:	431a      	orrs	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	611a      	str	r2, [r3, #16]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3360      	adds	r3, #96	@ 0x60
 80051ae:	461a      	mov	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	601a      	str	r2, [r3, #0]
  }
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3330      	adds	r3, #48	@ 0x30
 800520a:	461a      	mov	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	4413      	add	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	211f      	movs	r1, #31
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	401a      	ands	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0e9b      	lsrs	r3, r3, #26
 8005232:	f003 011f 	and.w	r1, r3, #31
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	431a      	orrs	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3314      	adds	r3, #20
 8005262:	461a      	mov	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	0e5b      	lsrs	r3, r3, #25
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	4413      	add	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	0d1b      	lsrs	r3, r3, #20
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2107      	movs	r1, #7
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	0d1b      	lsrs	r3, r3, #20
 800528c:	f003 031f 	and.w	r3, r3, #31
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	431a      	orrs	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0318 	and.w	r3, r3, #24
 80052ca:	4908      	ldr	r1, [pc, #32]	@ (80052ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80052cc:	40d9      	lsrs	r1, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	400b      	ands	r3, r1
 80052d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d6:	431a      	orrs	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	000fffff 	.word	0x000fffff

080052f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 031f 	and.w	r3, r3, #31
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6093      	str	r3, [r2, #8]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	5fffffc0 	.word	0x5fffffc0

0800534c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005360:	d101      	bne.n	8005366 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <LL_ADC_EnableInternalRegulator+0x24>)
 8005382:	4013      	ands	r3, r2
 8005384:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	6fffffc0 	.word	0x6fffffc0

0800539c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053b0:	d101      	bne.n	80053b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <LL_ADC_Enable+0x24>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	f043 0201 	orr.w	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	7fffffc0 	.word	0x7fffffc0

080053ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <LL_ADC_IsEnabled+0x18>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <LL_ADC_IsEnabled+0x1a>
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	4b05      	ldr	r3, [pc, #20]	@ (8005438 <LL_ADC_REG_StartConversion+0x24>)
 8005422:	4013      	ands	r3, r2
 8005424:	f043 0204 	orr.w	r2, r3, #4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	7fffffc0 	.word	0x7fffffc0

0800543c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d101      	bne.n	8005454 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b08      	cmp	r3, #8
 8005474:	d101      	bne.n	800547a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b089      	sub	sp, #36	@ 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e18f      	b.n	80057c2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fb fdd5 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff ff3f 	bl	800534c <LL_ADC_IsDeepPowerDownEnabled>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff ff25 	bl	8005328 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff ff5a 	bl	800539c <LL_ADC_IsInternalRegulatorEnabled>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d114      	bne.n	8005518 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff3e 	bl	8005374 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054f8:	4b87      	ldr	r3, [pc, #540]	@ (8005718 <HAL_ADC_Init+0x290>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	4a87      	ldr	r2, [pc, #540]	@ (800571c <HAL_ADC_Init+0x294>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	099b      	lsrs	r3, r3, #6
 8005506:	3301      	adds	r3, #1
 8005508:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800550a:	e002      	b.n	8005512 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	3b01      	subs	r3, #1
 8005510:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f9      	bne.n	800550c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff ff3d 	bl	800539c <LL_ADC_IsInternalRegulatorEnabled>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10d      	bne.n	8005544 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552c:	f043 0210 	orr.w	r2, r3, #16
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005538:	f043 0201 	orr.w	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff77 	bl	800543c <LL_ADC_REG_IsConversionOngoing>
 800554e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8129 	bne.w	80057b0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f040 8125 	bne.w	80057b0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800556e:	f043 0202 	orr.w	r2, r3, #2
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff36 	bl	80053ec <LL_ADC_IsEnabled>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d136      	bne.n	80055f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a65      	ldr	r2, [pc, #404]	@ (8005720 <HAL_ADC_Init+0x298>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_ADC_Init+0x112>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a63      	ldr	r2, [pc, #396]	@ (8005724 <HAL_ADC_Init+0x29c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10e      	bne.n	80055b8 <HAL_ADC_Init+0x130>
 800559a:	4861      	ldr	r0, [pc, #388]	@ (8005720 <HAL_ADC_Init+0x298>)
 800559c:	f7ff ff26 	bl	80053ec <LL_ADC_IsEnabled>
 80055a0:	4604      	mov	r4, r0
 80055a2:	4860      	ldr	r0, [pc, #384]	@ (8005724 <HAL_ADC_Init+0x29c>)
 80055a4:	f7ff ff22 	bl	80053ec <LL_ADC_IsEnabled>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4323      	orrs	r3, r4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e008      	b.n	80055ca <HAL_ADC_Init+0x142>
 80055b8:	485b      	ldr	r0, [pc, #364]	@ (8005728 <HAL_ADC_Init+0x2a0>)
 80055ba:	f7ff ff17 	bl	80053ec <LL_ADC_IsEnabled>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d012      	beq.n	80055f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a53      	ldr	r2, [pc, #332]	@ (8005720 <HAL_ADC_Init+0x298>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_ADC_Init+0x15a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a51      	ldr	r2, [pc, #324]	@ (8005724 <HAL_ADC_Init+0x29c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_ADC_Init+0x15e>
 80055e2:	4a52      	ldr	r2, [pc, #328]	@ (800572c <HAL_ADC_Init+0x2a4>)
 80055e4:	e000      	b.n	80055e8 <HAL_ADC_Init+0x160>
 80055e6:	4a52      	ldr	r2, [pc, #328]	@ (8005730 <HAL_ADC_Init+0x2a8>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f7ff fd68 	bl	80050c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80055f4:	f7ff fd4a 	bl	800508c <HAL_GetREVID>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80055fe:	4293      	cmp	r3, r2
 8005600:	d914      	bls.n	800562c <HAL_ADC_Init+0x1a4>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b10      	cmp	r3, #16
 8005608:	d110      	bne.n	800562c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7d5b      	ldrb	r3, [r3, #21]
 800560e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005614:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800561a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7f1b      	ldrb	r3, [r3, #28]
 8005620:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005622:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005624:	f043 030c 	orr.w	r3, r3, #12
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	e00d      	b.n	8005648 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7d5b      	ldrb	r3, [r3, #21]
 8005630:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005636:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800563c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7f1b      	ldrb	r3, [r3, #28]
 8005642:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005644:	4313      	orrs	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7f1b      	ldrb	r3, [r3, #28]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d106      	bne.n	800565e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	3b01      	subs	r3, #1
 8005656:	045b      	lsls	r3, r3, #17
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	4b2c      	ldr	r3, [pc, #176]	@ (8005734 <HAL_ADC_Init+0x2ac>)
 8005682:	4013      	ands	r3, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	430b      	orrs	r3, r1
 800568c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fed2 	bl	800543c <LL_ADC_REG_IsConversionOngoing>
 8005698:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fedf 	bl	8005462 <LL_ADC_INJ_IsConversionOngoing>
 80056a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d15f      	bne.n	800576c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d15c      	bne.n	800576c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	7d1b      	ldrb	r3, [r3, #20]
 80056b6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005738 <HAL_ADC_Init+0x2b0>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	69b9      	ldr	r1, [r7, #24]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d130      	bne.n	8005740 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	4b14      	ldr	r3, [pc, #80]	@ (800573c <HAL_ADC_Init+0x2b4>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056f2:	3a01      	subs	r2, #1
 80056f4:	0411      	lsls	r1, r2, #16
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80056fa:	4311      	orrs	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005700:	4311      	orrs	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005706:	430a      	orrs	r2, r1
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	611a      	str	r2, [r3, #16]
 8005714:	e01c      	b.n	8005750 <HAL_ADC_Init+0x2c8>
 8005716:	bf00      	nop
 8005718:	24000060 	.word	0x24000060
 800571c:	053e2d63 	.word	0x053e2d63
 8005720:	40022000 	.word	0x40022000
 8005724:	40022100 	.word	0x40022100
 8005728:	58026000 	.word	0x58026000
 800572c:	40022300 	.word	0x40022300
 8005730:	58026300 	.word	0x58026300
 8005734:	fff0c003 	.word	0xfff0c003
 8005738:	ffffbffc 	.word	0xffffbffc
 800573c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fdd6 	bl	8006318 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d10c      	bne.n	800578e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577a:	f023 010f 	bic.w	r1, r3, #15
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	1e5a      	subs	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	631a      	str	r2, [r3, #48]	@ 0x30
 800578c:	e007      	b.n	800579e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 020f 	bic.w	r2, r2, #15
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	f043 0201 	orr.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80057ae:	e007      	b.n	80057c0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b4:	f043 0210 	orr.w	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3724      	adds	r7, #36	@ 0x24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	bf00      	nop

080057cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a5c      	ldr	r2, [pc, #368]	@ (800594c <HAL_ADC_Start+0x180>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_ADC_Start+0x1c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005950 <HAL_ADC_Start+0x184>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d101      	bne.n	80057ec <HAL_ADC_Start+0x20>
 80057e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005954 <HAL_ADC_Start+0x188>)
 80057ea:	e000      	b.n	80057ee <HAL_ADC_Start+0x22>
 80057ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005958 <HAL_ADC_Start+0x18c>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fd7e 	bl	80052f0 <LL_ADC_GetMultimode>
 80057f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fe1e 	bl	800543c <LL_ADC_REG_IsConversionOngoing>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 809a 	bne.w	800593c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_ADC_Start+0x4a>
 8005812:	2302      	movs	r3, #2
 8005814:	e095      	b.n	8005942 <HAL_ADC_Start+0x176>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fcf0 	bl	8006204 <ADC_Enable>
 8005824:	4603      	mov	r3, r0
 8005826:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 8081 	bne.w	8005932 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005834:	4b49      	ldr	r3, [pc, #292]	@ (800595c <HAL_ADC_Start+0x190>)
 8005836:	4013      	ands	r3, r2
 8005838:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a42      	ldr	r2, [pc, #264]	@ (8005950 <HAL_ADC_Start+0x184>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d002      	beq.n	8005850 <HAL_ADC_Start+0x84>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	e000      	b.n	8005852 <HAL_ADC_Start+0x86>
 8005850:	4b3e      	ldr	r3, [pc, #248]	@ (800594c <HAL_ADC_Start+0x180>)
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	4293      	cmp	r3, r2
 8005858:	d002      	beq.n	8005860 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005878:	d106      	bne.n	8005888 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587e:	f023 0206 	bic.w	r2, r3, #6
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	659a      	str	r2, [r3, #88]	@ 0x58
 8005886:	e002      	b.n	800588e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	221c      	movs	r2, #28
 8005894:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005950 <HAL_ADC_Start+0x184>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d002      	beq.n	80058ae <HAL_ADC_Start+0xe2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	e000      	b.n	80058b0 <HAL_ADC_Start+0xe4>
 80058ae:	4b27      	ldr	r3, [pc, #156]	@ (800594c <HAL_ADC_Start+0x180>)
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d008      	beq.n	80058ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d002      	beq.n	80058ca <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d114      	bne.n	80058f4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fd91 	bl	8005414 <LL_ADC_REG_StartConversion>
 80058f2:	e025      	b.n	8005940 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <HAL_ADC_Start+0x184>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d002      	beq.n	8005910 <HAL_ADC_Start+0x144>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	e000      	b.n	8005912 <HAL_ADC_Start+0x146>
 8005910:	4b0e      	ldr	r3, [pc, #56]	@ (800594c <HAL_ADC_Start+0x180>)
 8005912:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005924:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005928:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005930:	e006      	b.n	8005940 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800593a:	e001      	b.n	8005940 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800593c:	2302      	movs	r3, #2
 800593e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40022000 	.word	0x40022000
 8005950:	40022100 	.word	0x40022100
 8005954:	40022300 	.word	0x40022300
 8005958:	58026300 	.word	0x58026300
 800595c:	fffff0fe 	.word	0xfffff0fe

08005960 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a72      	ldr	r2, [pc, #456]	@ (8005b38 <HAL_ADC_PollForConversion+0x1d8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_ADC_PollForConversion+0x1e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a70      	ldr	r2, [pc, #448]	@ (8005b3c <HAL_ADC_PollForConversion+0x1dc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_ADC_PollForConversion+0x22>
 800597e:	4b70      	ldr	r3, [pc, #448]	@ (8005b40 <HAL_ADC_PollForConversion+0x1e0>)
 8005980:	e000      	b.n	8005984 <HAL_ADC_PollForConversion+0x24>
 8005982:	4b70      	ldr	r3, [pc, #448]	@ (8005b44 <HAL_ADC_PollForConversion+0x1e4>)
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fcb3 	bl	80052f0 <LL_ADC_GetMultimode>
 800598a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d102      	bne.n	800599a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005994:	2308      	movs	r3, #8
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	e037      	b.n	8005a0a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d002      	beq.n	80059ac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	d111      	bne.n	80059d0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e0b1      	b.n	8005b2e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80059ca:	2304      	movs	r3, #4
 80059cc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80059ce:	e01c      	b.n	8005a0a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a58      	ldr	r2, [pc, #352]	@ (8005b38 <HAL_ADC_PollForConversion+0x1d8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_ADC_PollForConversion+0x84>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a57      	ldr	r2, [pc, #348]	@ (8005b3c <HAL_ADC_PollForConversion+0x1dc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_ADC_PollForConversion+0x88>
 80059e4:	4b56      	ldr	r3, [pc, #344]	@ (8005b40 <HAL_ADC_PollForConversion+0x1e0>)
 80059e6:	e000      	b.n	80059ea <HAL_ADC_PollForConversion+0x8a>
 80059e8:	4b56      	ldr	r3, [pc, #344]	@ (8005b44 <HAL_ADC_PollForConversion+0x1e4>)
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fc8e 	bl	800530c <LL_ADC_GetMultiDMATransfer>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e093      	b.n	8005b2e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005a06:	2304      	movs	r3, #4
 8005a08:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005a0a:	f7ff fb33 	bl	8005074 <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005a10:	e021      	b.n	8005a56 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d01d      	beq.n	8005a56 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005a1a:	f7ff fb2b 	bl	8005074 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <HAL_ADC_PollForConversion+0xd0>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d112      	bne.n	8005a56 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e06b      	b.n	8005b2e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0d6      	beq.n	8005a12 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fbad 	bl	80051d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01c      	beq.n	8005aba <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7d5b      	ldrb	r3, [r3, #21]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d118      	bne.n	8005aba <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d111      	bne.n	8005aba <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d105      	bne.n	8005aba <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	f043 0201 	orr.w	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <HAL_ADC_PollForConversion+0x1dc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d002      	beq.n	8005aca <HAL_ADC_PollForConversion+0x16a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	e000      	b.n	8005acc <HAL_ADC_PollForConversion+0x16c>
 8005aca:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <HAL_ADC_PollForConversion+0x1d8>)
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d008      	beq.n	8005ae6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b05      	cmp	r3, #5
 8005ade:	d002      	beq.n	8005ae6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d104      	bne.n	8005af0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e00c      	b.n	8005b0a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <HAL_ADC_PollForConversion+0x1dc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d002      	beq.n	8005b00 <HAL_ADC_PollForConversion+0x1a0>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	e000      	b.n	8005b02 <HAL_ADC_PollForConversion+0x1a2>
 8005b00:	4b0d      	ldr	r3, [pc, #52]	@ (8005b38 <HAL_ADC_PollForConversion+0x1d8>)
 8005b02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d104      	bne.n	8005b1a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2208      	movs	r2, #8
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e008      	b.n	8005b2c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d103      	bne.n	8005b2c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	220c      	movs	r2, #12
 8005b2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40022000 	.word	0x40022000
 8005b3c:	40022100 	.word	0x40022100
 8005b40:	40022300 	.word	0x40022300
 8005b44:	58026300 	.word	0x58026300

08005b48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b0a1      	sub	sp, #132	@ 0x84
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a9d      	ldr	r2, [pc, #628]	@ (8005df4 <HAL_ADC_ConfigChannel+0x290>)
 8005b7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x2a>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e321      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x66e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fc4e 	bl	800543c <LL_ADC_REG_IsConversionOngoing>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 8306 	bne.w	80061b4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d108      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x62>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	0e9b      	lsrs	r3, r3, #26
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	e016      	b.n	8005bf4 <HAL_ADC_ConfigChannel+0x90>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bce:	fa93 f3a3 	rbit	r3, r3
 8005bd2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005bde:	2320      	movs	r3, #32
 8005be0:	e003      	b.n	8005bea <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005be2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005be4:	fab3 f383 	clz	r3, r3
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2201      	movs	r2, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	69d1      	ldr	r1, [r2, #28]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6859      	ldr	r1, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7ff faf3 	bl	80051fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fc0f 	bl	800543c <LL_ADC_REG_IsConversionOngoing>
 8005c1e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fc1c 	bl	8005462 <LL_ADC_INJ_IsConversionOngoing>
 8005c2a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 80b3 	bne.w	8005d9a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 80af 	bne.w	8005d9a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f7ff fb02 	bl	8005252 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005df8 <HAL_ADC_ConfigChannel+0x294>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c5a:	d10b      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x110>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	089b      	lsrs	r3, r3, #2
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	e01d      	b.n	8005cb0 <HAL_ADC_ConfigChannel+0x14c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0310 	and.w	r3, r3, #16
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x136>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	f003 0307 	and.w	r3, r3, #7
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	e00a      	b.n	8005cb0 <HAL_ADC_ConfigChannel+0x14c>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d027      	beq.n	8005d0a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6919      	ldr	r1, [r3, #16]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cc8:	f7ff fa30 	bl	800512c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6919      	ldr	r1, [r3, #16]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	7e5b      	ldrb	r3, [r3, #25]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d102      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x17e>
 8005cdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ce0:	e000      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x180>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f7ff fa5a 	bl	800519e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6919      	ldr	r1, [r3, #16]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	7e1b      	ldrb	r3, [r3, #24]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x19c>
 8005cfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cfe:	e000      	b.n	8005d02 <HAL_ADC_ConfigChannel+0x19e>
 8005d00:	2300      	movs	r3, #0
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7ff fa32 	bl	800516c <LL_ADC_SetDataRightShift>
 8005d08:	e047      	b.n	8005d9a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	069b      	lsls	r3, r3, #26
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d107      	bne.n	8005d2e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d2c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	069b      	lsls	r3, r3, #26
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d107      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d50:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	069b      	lsls	r3, r3, #26
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d107      	bne.n	8005d76 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d74:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	069b      	lsls	r3, r3, #26
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d107      	bne.n	8005d9a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d98:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fb24 	bl	80053ec <LL_ADC_IsEnabled>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 820d 	bne.w	80061c6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	461a      	mov	r2, r3
 8005dba:	f7ff fa75 	bl	80052a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005df4 <HAL_ADC_ConfigChannel+0x290>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	f040 8133 	bne.w	8006030 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d110      	bne.n	8005dfc <HAL_ADC_ConfigChannel+0x298>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	0e9b      	lsrs	r3, r3, #26
 8005de0:	3301      	adds	r3, #1
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b09      	cmp	r3, #9
 8005de8:	bf94      	ite	ls
 8005dea:	2301      	movls	r3, #1
 8005dec:	2300      	movhi	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	e01e      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x2cc>
 8005df2:	bf00      	nop
 8005df4:	47ff0000 	.word	0x47ff0000
 8005df8:	5c001000 	.word	0x5c001000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e04:	fa93 f3a3 	rbit	r3, r3
 8005e08:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005e0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005e14:	2320      	movs	r3, #32
 8005e16:	e003      	b.n	8005e20 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005e18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e1a:	fab3 f383 	clz	r3, r3
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	3301      	adds	r3, #1
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	bf94      	ite	ls
 8005e2a:	2301      	movls	r3, #1
 8005e2c:	2300      	movhi	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d079      	beq.n	8005f28 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d107      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x2ec>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0e9b      	lsrs	r3, r3, #26
 8005e46:	3301      	adds	r3, #1
 8005e48:	069b      	lsls	r3, r3, #26
 8005e4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e4e:	e015      	b.n	8005e7c <HAL_ADC_ConfigChannel+0x318>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e58:	fa93 f3a3 	rbit	r3, r3
 8005e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e60:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005e68:	2320      	movs	r3, #32
 8005e6a:	e003      	b.n	8005e74 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e6e:	fab3 f383 	clz	r3, r3
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	3301      	adds	r3, #1
 8005e76:	069b      	lsls	r3, r3, #26
 8005e78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x338>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	0e9b      	lsrs	r3, r3, #26
 8005e8e:	3301      	adds	r3, #1
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	e017      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x368>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea4:	fa93 f3a3 	rbit	r3, r3
 8005ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	e003      	b.n	8005ec0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eba:	fab3 f383 	clz	r3, r3
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	f003 031f 	and.w	r3, r3, #31
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	ea42 0103 	orr.w	r1, r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_ADC_ConfigChannel+0x38e>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0e9b      	lsrs	r3, r3, #26
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	f003 021f 	and.w	r2, r3, #31
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	051b      	lsls	r3, r3, #20
 8005ef0:	e018      	b.n	8005f24 <HAL_ADC_ConfigChannel+0x3c0>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efa:	fa93 f3a3 	rbit	r3, r3
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005f0a:	2320      	movs	r3, #32
 8005f0c:	e003      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	fab3 f383 	clz	r3, r3
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	3301      	adds	r3, #1
 8005f18:	f003 021f 	and.w	r2, r3, #31
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f24:	430b      	orrs	r3, r1
 8005f26:	e07e      	b.n	8006026 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d107      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x3e0>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	0e9b      	lsrs	r3, r3, #26
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	069b      	lsls	r3, r3, #26
 8005f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f42:	e015      	b.n	8005f70 <HAL_ADC_ConfigChannel+0x40c>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	fa93 f3a3 	rbit	r3, r3
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	e003      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f62:	fab3 f383 	clz	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	069b      	lsls	r3, r3, #26
 8005f6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x42c>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	0e9b      	lsrs	r3, r3, #26
 8005f82:	3301      	adds	r3, #1
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	e017      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x45c>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	fa93 f3a3 	rbit	r3, r3
 8005f9c:	61bb      	str	r3, [r7, #24]
  return result;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005fa8:	2320      	movs	r3, #32
 8005faa:	e003      	b.n	8005fb4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	fab3 f383 	clz	r3, r3
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2101      	movs	r1, #1
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	ea42 0103 	orr.w	r1, r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <HAL_ADC_ConfigChannel+0x488>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0e9b      	lsrs	r3, r3, #26
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	4613      	mov	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3b1e      	subs	r3, #30
 8005fe4:	051b      	lsls	r3, r3, #20
 8005fe6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005fea:	e01b      	b.n	8006024 <HAL_ADC_ConfigChannel+0x4c0>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	fa93 f3a3 	rbit	r3, r3
 8005ff8:	60fb      	str	r3, [r7, #12]
  return result;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006004:	2320      	movs	r3, #32
 8006006:	e003      	b.n	8006010 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fab3 f383 	clz	r3, r3
 800600e:	b2db      	uxtb	r3, r3
 8006010:	3301      	adds	r3, #1
 8006012:	f003 021f 	and.w	r2, r3, #31
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	3b1e      	subs	r3, #30
 800601e:	051b      	lsls	r3, r3, #20
 8006020:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006024:	430b      	orrs	r3, r1
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	6892      	ldr	r2, [r2, #8]
 800602a:	4619      	mov	r1, r3
 800602c:	f7ff f911 	bl	8005252 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f280 80c6 	bge.w	80061c6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a67      	ldr	r2, [pc, #412]	@ (80061dc <HAL_ADC_ConfigChannel+0x678>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_ADC_ConfigChannel+0x4ea>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a65      	ldr	r2, [pc, #404]	@ (80061e0 <HAL_ADC_ConfigChannel+0x67c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <HAL_ADC_ConfigChannel+0x4ee>
 800604e:	4b65      	ldr	r3, [pc, #404]	@ (80061e4 <HAL_ADC_ConfigChannel+0x680>)
 8006050:	e000      	b.n	8006054 <HAL_ADC_ConfigChannel+0x4f0>
 8006052:	4b65      	ldr	r3, [pc, #404]	@ (80061e8 <HAL_ADC_ConfigChannel+0x684>)
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f85b 	bl	8005110 <LL_ADC_GetCommonPathInternalCh>
 800605a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a5e      	ldr	r2, [pc, #376]	@ (80061dc <HAL_ADC_ConfigChannel+0x678>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d004      	beq.n	8006070 <HAL_ADC_ConfigChannel+0x50c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a5d      	ldr	r2, [pc, #372]	@ (80061e0 <HAL_ADC_ConfigChannel+0x67c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10e      	bne.n	800608e <HAL_ADC_ConfigChannel+0x52a>
 8006070:	485a      	ldr	r0, [pc, #360]	@ (80061dc <HAL_ADC_ConfigChannel+0x678>)
 8006072:	f7ff f9bb 	bl	80053ec <LL_ADC_IsEnabled>
 8006076:	4604      	mov	r4, r0
 8006078:	4859      	ldr	r0, [pc, #356]	@ (80061e0 <HAL_ADC_ConfigChannel+0x67c>)
 800607a:	f7ff f9b7 	bl	80053ec <LL_ADC_IsEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	4323      	orrs	r3, r4
 8006082:	2b00      	cmp	r3, #0
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	e008      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x53c>
 800608e:	4857      	ldr	r0, [pc, #348]	@ (80061ec <HAL_ADC_ConfigChannel+0x688>)
 8006090:	f7ff f9ac 	bl	80053ec <LL_ADC_IsEnabled>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf0c      	ite	eq
 800609a:	2301      	moveq	r3, #1
 800609c:	2300      	movne	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d07d      	beq.n	80061a0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a51      	ldr	r2, [pc, #324]	@ (80061f0 <HAL_ADC_ConfigChannel+0x68c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d130      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x5ac>
 80060ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d12b      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a4b      	ldr	r2, [pc, #300]	@ (80061ec <HAL_ADC_ConfigChannel+0x688>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	f040 8081 	bne.w	80061c6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a44      	ldr	r2, [pc, #272]	@ (80061dc <HAL_ADC_ConfigChannel+0x678>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_ADC_ConfigChannel+0x574>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a43      	ldr	r2, [pc, #268]	@ (80061e0 <HAL_ADC_ConfigChannel+0x67c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <HAL_ADC_ConfigChannel+0x578>
 80060d8:	4a42      	ldr	r2, [pc, #264]	@ (80061e4 <HAL_ADC_ConfigChannel+0x680>)
 80060da:	e000      	b.n	80060de <HAL_ADC_ConfigChannel+0x57a>
 80060dc:	4a42      	ldr	r2, [pc, #264]	@ (80061e8 <HAL_ADC_ConfigChannel+0x684>)
 80060de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f7fe ffff 	bl	80050ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060ec:	4b41      	ldr	r3, [pc, #260]	@ (80061f4 <HAL_ADC_ConfigChannel+0x690>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	099b      	lsrs	r3, r3, #6
 80060f2:	4a41      	ldr	r2, [pc, #260]	@ (80061f8 <HAL_ADC_ConfigChannel+0x694>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	099b      	lsrs	r3, r3, #6
 80060fa:	3301      	adds	r3, #1
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006100:	e002      	b.n	8006108 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3b01      	subs	r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f9      	bne.n	8006102 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800610e:	e05a      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a39      	ldr	r2, [pc, #228]	@ (80061fc <HAL_ADC_ConfigChannel+0x698>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d11e      	bne.n	8006158 <HAL_ADC_ConfigChannel+0x5f4>
 800611a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800611c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d119      	bne.n	8006158 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a30      	ldr	r2, [pc, #192]	@ (80061ec <HAL_ADC_ConfigChannel+0x688>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d14b      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a2a      	ldr	r2, [pc, #168]	@ (80061dc <HAL_ADC_ConfigChannel+0x678>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_ADC_ConfigChannel+0x5de>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a28      	ldr	r2, [pc, #160]	@ (80061e0 <HAL_ADC_ConfigChannel+0x67c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x5e2>
 8006142:	4a28      	ldr	r2, [pc, #160]	@ (80061e4 <HAL_ADC_ConfigChannel+0x680>)
 8006144:	e000      	b.n	8006148 <HAL_ADC_ConfigChannel+0x5e4>
 8006146:	4a28      	ldr	r2, [pc, #160]	@ (80061e8 <HAL_ADC_ConfigChannel+0x684>)
 8006148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800614a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800614e:	4619      	mov	r1, r3
 8006150:	4610      	mov	r0, r2
 8006152:	f7fe ffca 	bl	80050ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006156:	e036      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a28      	ldr	r2, [pc, #160]	@ (8006200 <HAL_ADC_ConfigChannel+0x69c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d131      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
 8006162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d12c      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <HAL_ADC_ConfigChannel+0x688>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d127      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <HAL_ADC_ConfigChannel+0x678>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_ADC_ConfigChannel+0x626>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a16      	ldr	r2, [pc, #88]	@ (80061e0 <HAL_ADC_ConfigChannel+0x67c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d101      	bne.n	800618e <HAL_ADC_ConfigChannel+0x62a>
 800618a:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <HAL_ADC_ConfigChannel+0x680>)
 800618c:	e000      	b.n	8006190 <HAL_ADC_ConfigChannel+0x62c>
 800618e:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <HAL_ADC_ConfigChannel+0x684>)
 8006190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006192:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe ffa6 	bl	80050ea <LL_ADC_SetCommonPathInternalCh>
 800619e:	e012      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80061b2:	e008      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80061ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3784      	adds	r7, #132	@ 0x84
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd90      	pop	{r4, r7, pc}
 80061da:	bf00      	nop
 80061dc:	40022000 	.word	0x40022000
 80061e0:	40022100 	.word	0x40022100
 80061e4:	40022300 	.word	0x40022300
 80061e8:	58026300 	.word	0x58026300
 80061ec:	58026000 	.word	0x58026000
 80061f0:	cb840000 	.word	0xcb840000
 80061f4:	24000060 	.word	0x24000060
 80061f8:	053e2d63 	.word	0x053e2d63
 80061fc:	c7520000 	.word	0xc7520000
 8006200:	cfb80000 	.word	0xcfb80000

08006204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff f8eb 	bl	80053ec <LL_ADC_IsEnabled>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d16e      	bne.n	80062fa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	4b38      	ldr	r3, [pc, #224]	@ (8006304 <ADC_Enable+0x100>)
 8006224:	4013      	ands	r3, r2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622e:	f043 0210 	orr.w	r2, r3, #16
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	f043 0201 	orr.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e05a      	b.n	80062fc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f8ba 	bl	80053c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006250:	f7fe ff10 	bl	8005074 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2b      	ldr	r2, [pc, #172]	@ (8006308 <ADC_Enable+0x104>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d004      	beq.n	800626a <ADC_Enable+0x66>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a29      	ldr	r2, [pc, #164]	@ (800630c <ADC_Enable+0x108>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d101      	bne.n	800626e <ADC_Enable+0x6a>
 800626a:	4b29      	ldr	r3, [pc, #164]	@ (8006310 <ADC_Enable+0x10c>)
 800626c:	e000      	b.n	8006270 <ADC_Enable+0x6c>
 800626e:	4b29      	ldr	r3, [pc, #164]	@ (8006314 <ADC_Enable+0x110>)
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff f83d 	bl	80052f0 <LL_ADC_GetMultimode>
 8006276:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a23      	ldr	r2, [pc, #140]	@ (800630c <ADC_Enable+0x108>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d002      	beq.n	8006288 <ADC_Enable+0x84>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	e000      	b.n	800628a <ADC_Enable+0x86>
 8006288:	4b1f      	ldr	r3, [pc, #124]	@ (8006308 <ADC_Enable+0x104>)
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	4293      	cmp	r3, r2
 8006290:	d02c      	beq.n	80062ec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d130      	bne.n	80062fa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006298:	e028      	b.n	80062ec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff f8a4 	bl	80053ec <LL_ADC_IsEnabled>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff f888 	bl	80053c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80062b4:	f7fe fede 	bl	8005074 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d914      	bls.n	80062ec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d00d      	beq.n	80062ec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	f043 0210 	orr.w	r2, r3, #16
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e007      	b.n	80062fc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d1cf      	bne.n	800629a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	8000003f 	.word	0x8000003f
 8006308:	40022000 	.word	0x40022000
 800630c:	40022100 	.word	0x40022100
 8006310:	40022300 	.word	0x40022300
 8006314:	58026300 	.word	0x58026300

08006318 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a7a      	ldr	r2, [pc, #488]	@ (8006510 <ADC_ConfigureBoostMode+0x1f8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <ADC_ConfigureBoostMode+0x1c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a79      	ldr	r2, [pc, #484]	@ (8006514 <ADC_ConfigureBoostMode+0x1fc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d109      	bne.n	8006348 <ADC_ConfigureBoostMode+0x30>
 8006334:	4b78      	ldr	r3, [pc, #480]	@ (8006518 <ADC_ConfigureBoostMode+0x200>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800633c:	2b00      	cmp	r3, #0
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	e008      	b.n	800635a <ADC_ConfigureBoostMode+0x42>
 8006348:	4b74      	ldr	r3, [pc, #464]	@ (800651c <ADC_ConfigureBoostMode+0x204>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01c      	beq.n	8006398 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800635e:	f003 fac3 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 8006362:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800636c:	d010      	beq.n	8006390 <ADC_ConfigureBoostMode+0x78>
 800636e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006372:	d873      	bhi.n	800645c <ADC_ConfigureBoostMode+0x144>
 8006374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006378:	d002      	beq.n	8006380 <ADC_ConfigureBoostMode+0x68>
 800637a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800637e:	d16d      	bne.n	800645c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	0c1b      	lsrs	r3, r3, #16
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	60fb      	str	r3, [r7, #12]
        break;
 800638e:	e068      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	60fb      	str	r3, [r7, #12]
        break;
 8006396:	e064      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006398:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	f004 fd4a 	bl	800ae38 <HAL_RCCEx_GetPeriphCLKFreq>
 80063a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80063ae:	d051      	beq.n	8006454 <ADC_ConfigureBoostMode+0x13c>
 80063b0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80063b4:	d854      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80063ba:	d047      	beq.n	800644c <ADC_ConfigureBoostMode+0x134>
 80063bc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80063c0:	d84e      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063c2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80063c6:	d03d      	beq.n	8006444 <ADC_ConfigureBoostMode+0x12c>
 80063c8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80063cc:	d848      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063d2:	d033      	beq.n	800643c <ADC_ConfigureBoostMode+0x124>
 80063d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063d8:	d842      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063da:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80063de:	d029      	beq.n	8006434 <ADC_ConfigureBoostMode+0x11c>
 80063e0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80063e4:	d83c      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80063ea:	d01a      	beq.n	8006422 <ADC_ConfigureBoostMode+0x10a>
 80063ec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80063f0:	d836      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80063f6:	d014      	beq.n	8006422 <ADC_ConfigureBoostMode+0x10a>
 80063f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80063fc:	d830      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006402:	d00e      	beq.n	8006422 <ADC_ConfigureBoostMode+0x10a>
 8006404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006408:	d82a      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 800640a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800640e:	d008      	beq.n	8006422 <ADC_ConfigureBoostMode+0x10a>
 8006410:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006414:	d824      	bhi.n	8006460 <ADC_ConfigureBoostMode+0x148>
 8006416:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800641a:	d002      	beq.n	8006422 <ADC_ConfigureBoostMode+0x10a>
 800641c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006420:	d11e      	bne.n	8006460 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	0c9b      	lsrs	r3, r3, #18
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	60fb      	str	r3, [r7, #12]
        break;
 8006432:	e016      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	091b      	lsrs	r3, r3, #4
 8006438:	60fb      	str	r3, [r7, #12]
        break;
 800643a:	e012      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	60fb      	str	r3, [r7, #12]
        break;
 8006442:	e00e      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	60fb      	str	r3, [r7, #12]
        break;
 800644a:	e00a      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	09db      	lsrs	r3, r3, #7
 8006450:	60fb      	str	r3, [r7, #12]
        break;
 8006452:	e006      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	60fb      	str	r3, [r7, #12]
        break;
 800645a:	e002      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
        break;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006460:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006462:	f7fe fe13 	bl	800508c <HAL_GetREVID>
 8006466:	4603      	mov	r3, r0
 8006468:	f241 0203 	movw	r2, #4099	@ 0x1003
 800646c:	4293      	cmp	r3, r2
 800646e:	d815      	bhi.n	800649c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a2b      	ldr	r2, [pc, #172]	@ (8006520 <ADC_ConfigureBoostMode+0x208>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d908      	bls.n	800648a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006486:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006488:	e03e      	b.n	8006508 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006498:	609a      	str	r2, [r3, #8]
}
 800649a:	e035      	b.n	8006508 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006524 <ADC_ConfigureBoostMode+0x20c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d808      	bhi.n	80064bc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064b8:	609a      	str	r2, [r3, #8]
}
 80064ba:	e025      	b.n	8006508 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a1a      	ldr	r2, [pc, #104]	@ (8006528 <ADC_ConfigureBoostMode+0x210>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d80a      	bhi.n	80064da <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d6:	609a      	str	r2, [r3, #8]
}
 80064d8:	e016      	b.n	8006508 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a13      	ldr	r2, [pc, #76]	@ (800652c <ADC_ConfigureBoostMode+0x214>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d80a      	bhi.n	80064f8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f4:	609a      	str	r2, [r3, #8]
}
 80064f6:	e007      	b.n	8006508 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40022000 	.word	0x40022000
 8006514:	40022100 	.word	0x40022100
 8006518:	40022300 	.word	0x40022300
 800651c:	58026300 	.word	0x58026300
 8006520:	01312d00 	.word	0x01312d00
 8006524:	005f5e10 	.word	0x005f5e10
 8006528:	00bebc20 	.word	0x00bebc20
 800652c:	017d7840 	.word	0x017d7840

08006530 <LL_ADC_IsEnabled>:
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <LL_ADC_IsEnabled+0x18>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <LL_ADC_IsEnabled+0x1a>
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <LL_ADC_REG_IsConversionOngoing>:
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b04      	cmp	r3, #4
 8006568:	d101      	bne.n	800656e <LL_ADC_REG_IsConversionOngoing+0x18>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b09f      	sub	sp, #124	@ 0x7c
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006596:	2302      	movs	r3, #2
 8006598:	e0be      	b.n	8006718 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80065a2:	2300      	movs	r3, #0
 80065a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006720 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d102      	bne.n	80065ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80065b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80065b6:	60bb      	str	r3, [r7, #8]
 80065b8:	e001      	b.n	80065be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e09d      	b.n	8006718 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ffb9 	bl	8006556 <LL_ADC_REG_IsConversionOngoing>
 80065e4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff ffb3 	bl	8006556 <LL_ADC_REG_IsConversionOngoing>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d17f      	bne.n	80066f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80065f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d17c      	bne.n	80066f6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a47      	ldr	r2, [pc, #284]	@ (8006720 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a46      	ldr	r2, [pc, #280]	@ (8006724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006610:	4b45      	ldr	r3, [pc, #276]	@ (8006728 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006612:	e000      	b.n	8006616 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006614:	4b45      	ldr	r3, [pc, #276]	@ (800672c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006616:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d039      	beq.n	8006694 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	431a      	orrs	r2, r3
 800662e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006630:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3a      	ldr	r2, [pc, #232]	@ (8006720 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a38      	ldr	r2, [pc, #224]	@ (8006724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10e      	bne.n	8006664 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006646:	4836      	ldr	r0, [pc, #216]	@ (8006720 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006648:	f7ff ff72 	bl	8006530 <LL_ADC_IsEnabled>
 800664c:	4604      	mov	r4, r0
 800664e:	4835      	ldr	r0, [pc, #212]	@ (8006724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006650:	f7ff ff6e 	bl	8006530 <LL_ADC_IsEnabled>
 8006654:	4603      	mov	r3, r0
 8006656:	4323      	orrs	r3, r4
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf0c      	ite	eq
 800665c:	2301      	moveq	r3, #1
 800665e:	2300      	movne	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	e008      	b.n	8006676 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006664:	4832      	ldr	r0, [pc, #200]	@ (8006730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006666:	f7ff ff63 	bl	8006530 <LL_ADC_IsEnabled>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d047      	beq.n	800670a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800667a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	4b2d      	ldr	r3, [pc, #180]	@ (8006734 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006680:	4013      	ands	r3, r2
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	6811      	ldr	r1, [r2, #0]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	6892      	ldr	r2, [r2, #8]
 800668a:	430a      	orrs	r2, r1
 800668c:	431a      	orrs	r2, r3
 800668e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006690:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006692:	e03a      	b.n	800670a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800669c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800669e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006720 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10e      	bne.n	80066d2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80066b4:	481a      	ldr	r0, [pc, #104]	@ (8006720 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80066b6:	f7ff ff3b 	bl	8006530 <LL_ADC_IsEnabled>
 80066ba:	4604      	mov	r4, r0
 80066bc:	4819      	ldr	r0, [pc, #100]	@ (8006724 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80066be:	f7ff ff37 	bl	8006530 <LL_ADC_IsEnabled>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4323      	orrs	r3, r4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	e008      	b.n	80066e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80066d2:	4817      	ldr	r0, [pc, #92]	@ (8006730 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80066d4:	f7ff ff2c 	bl	8006530 <LL_ADC_IsEnabled>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d010      	beq.n	800670a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80066e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	4b11      	ldr	r3, [pc, #68]	@ (8006734 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066f2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066f4:	e009      	b.n	800670a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006708:	e000      	b.n	800670c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800670a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006714:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006718:	4618      	mov	r0, r3
 800671a:	377c      	adds	r7, #124	@ 0x7c
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}
 8006720:	40022000 	.word	0x40022000
 8006724:	40022100 	.word	0x40022100
 8006728:	40022300 	.word	0x40022300
 800672c:	58026300 	.word	0x58026300
 8006730:	58026000 	.word	0x58026000
 8006734:	fffff0e0 	.word	0xfffff0e0

08006738 <__NVIC_SetPriorityGrouping>:
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006748:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <__NVIC_SetPriorityGrouping+0x40>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006754:	4013      	ands	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006760:	4b06      	ldr	r3, [pc, #24]	@ (800677c <__NVIC_SetPriorityGrouping+0x44>)
 8006762:	4313      	orrs	r3, r2
 8006764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006766:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <__NVIC_SetPriorityGrouping+0x40>)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	60d3      	str	r3, [r2, #12]
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	e000ed00 	.word	0xe000ed00
 800677c:	05fa0000 	.word	0x05fa0000

08006780 <__NVIC_GetPriorityGrouping>:
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006784:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <__NVIC_GetPriorityGrouping+0x18>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f003 0307 	and.w	r3, r3, #7
}
 800678e:	4618      	mov	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	e000ed00 	.word	0xe000ed00

0800679c <__NVIC_EnableIRQ>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	db0b      	blt.n	80067c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	f003 021f 	and.w	r2, r3, #31
 80067b4:	4907      	ldr	r1, [pc, #28]	@ (80067d4 <__NVIC_EnableIRQ+0x38>)
 80067b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	2001      	movs	r0, #1
 80067be:	fa00 f202 	lsl.w	r2, r0, r2
 80067c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	e000e100 	.word	0xe000e100

080067d8 <__NVIC_SetPriority>:
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	db0a      	blt.n	8006802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	490c      	ldr	r1, [pc, #48]	@ (8006824 <__NVIC_SetPriority+0x4c>)
 80067f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067f6:	0112      	lsls	r2, r2, #4
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	440b      	add	r3, r1
 80067fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006800:	e00a      	b.n	8006818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	4908      	ldr	r1, [pc, #32]	@ (8006828 <__NVIC_SetPriority+0x50>)
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	3b04      	subs	r3, #4
 8006810:	0112      	lsls	r2, r2, #4
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	440b      	add	r3, r1
 8006816:	761a      	strb	r2, [r3, #24]
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	e000e100 	.word	0xe000e100
 8006828:	e000ed00 	.word	0xe000ed00

0800682c <NVIC_EncodePriority>:
{
 800682c:	b480      	push	{r7}
 800682e:	b089      	sub	sp, #36	@ 0x24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f1c3 0307 	rsb	r3, r3, #7
 8006846:	2b04      	cmp	r3, #4
 8006848:	bf28      	it	cs
 800684a:	2304      	movcs	r3, #4
 800684c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3304      	adds	r3, #4
 8006852:	2b06      	cmp	r3, #6
 8006854:	d902      	bls.n	800685c <NVIC_EncodePriority+0x30>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3b03      	subs	r3, #3
 800685a:	e000      	b.n	800685e <NVIC_EncodePriority+0x32>
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006860:	f04f 32ff 	mov.w	r2, #4294967295
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43da      	mvns	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	401a      	ands	r2, r3
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006874:	f04f 31ff 	mov.w	r1, #4294967295
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	fa01 f303 	lsl.w	r3, r1, r3
 800687e:	43d9      	mvns	r1, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006884:	4313      	orrs	r3, r2
}
 8006886:	4618      	mov	r0, r3
 8006888:	3724      	adds	r7, #36	@ 0x24
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff ff4c 	bl	8006738 <__NVIC_SetPriorityGrouping>
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068b6:	f7ff ff63 	bl	8006780 <__NVIC_GetPriorityGrouping>
 80068ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	f7ff ffb3 	bl	800682c <NVIC_EncodePriority>
 80068c6:	4602      	mov	r2, r0
 80068c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff ff82 	bl	80067d8 <__NVIC_SetPriority>
}
 80068d4:	bf00      	nop
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff ff56 	bl	800679c <__NVIC_EnableIRQ>
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e04f      	b.n	80069aa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f84e 	bl	80069c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	4b20      	ldr	r3, [pc, #128]	@ (80069b4 <HAL_DMA2D_Init+0xbc>)
 8006934:	4013      	ands	r3, r2
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6851      	ldr	r1, [r2, #4]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	69d2      	ldr	r2, [r2, #28]
 800693e:	4311      	orrs	r1, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	430b      	orrs	r3, r1
 8006946:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800694e:	4b1a      	ldr	r3, [pc, #104]	@ (80069b8 <HAL_DMA2D_Init+0xc0>)
 8006950:	4013      	ands	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6891      	ldr	r1, [r2, #8]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6992      	ldr	r2, [r2, #24]
 800695a:	4311      	orrs	r1, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	430b      	orrs	r3, r1
 8006962:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800696a:	4b14      	ldr	r3, [pc, #80]	@ (80069bc <HAL_DMA2D_Init+0xc4>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68d1      	ldr	r1, [r2, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	430b      	orrs	r3, r1
 8006978:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006980:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	051a      	lsls	r2, r3, #20
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	055b      	lsls	r3, r3, #21
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	fff8ffbf 	.word	0xfff8ffbf
 80069b8:	fffffef8 	.word	0xfffffef8
 80069bc:	ffff0000 	.word	0xffff0000

080069c0 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_DMA2D_Start+0x1c>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e018      	b.n	8006a22 <HAL_DMA2D_Start+0x4e>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f9a4 	bl	8006d58 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d056      	beq.n	8006af4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a46:	f7fe fb15 	bl	8005074 <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a4c:	e04b      	b.n	8006ae6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d023      	beq.n	8006aa8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a6e:	f043 0202 	orr.w	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a84:	f043 0201 	orr.w	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2221      	movs	r2, #33	@ 0x21
 8006a92:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2204      	movs	r2, #4
 8006a98:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0a5      	b.n	8006bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d01a      	beq.n	8006ae6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fe fae0 	bl	8005074 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d302      	bcc.n	8006ac6 <HAL_DMA2D_PollForTransfer+0x9c>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aca:	f043 0220 	orr.w	r2, r3, #32
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e086      	b.n	8006bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0ac      	beq.n	8006a4e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d061      	beq.n	8006bda <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b16:	f7fe faad 	bl	8005074 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b1c:	e056      	b.n	8006bcc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d02e      	beq.n	8006b8e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d005      	beq.n	8006b46 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b3e:	f043 0204 	orr.w	r2, r3, #4
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b54:	f043 0202 	orr.w	r2, r3, #2
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b6a:	f043 0201 	orr.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2229      	movs	r2, #41	@ 0x29
 8006b78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e032      	b.n	8006bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d01a      	beq.n	8006bcc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b96:	f7fe fa6d 	bl	8005074 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <HAL_DMA2D_PollForTransfer+0x182>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10f      	bne.n	8006bcc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2203      	movs	r2, #3
 8006bbc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e013      	b.n	8006bf4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0a1      	beq.n	8006b1e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2212      	movs	r2, #18
 8006be0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_DMA2D_ConfigLayer+0x24>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e092      	b.n	8006d46 <HAL_DMA2D_ConfigLayer+0x14a>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	1a9b      	subs	r3, r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	4413      	add	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c54:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006c60:	4b3c      	ldr	r3, [pc, #240]	@ (8006d54 <HAL_DMA2D_ConfigLayer+0x158>)
 8006c62:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b0a      	cmp	r3, #10
 8006c6a:	d003      	beq.n	8006c74 <HAL_DMA2D_ConfigLayer+0x78>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b09      	cmp	r3, #9
 8006c72:	d107      	bne.n	8006c84 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	e005      	b.n	8006c90 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d120      	bne.n	8006cd8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	ea02 0103 	and.w	r1, r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b0a      	cmp	r3, #10
 8006cbe:	d003      	beq.n	8006cc8 <HAL_DMA2D_ConfigLayer+0xcc>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b09      	cmp	r3, #9
 8006cc6:	d135      	bne.n	8006d34 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cd6:	e02d      	b.n	8006d34 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b0b      	cmp	r3, #11
 8006cde:	d109      	bne.n	8006cf4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	049b      	lsls	r3, r3, #18
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8006cf2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	ea02 0103 	and.w	r1, r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b0a      	cmp	r3, #10
 8006d1c:	d003      	beq.n	8006d26 <HAL_DMA2D_ConfigLayer+0x12a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d106      	bne.n	8006d34 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006d32:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	ff33000f 	.word	0xff33000f

08006d58 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b08b      	sub	sp, #44	@ 0x2c
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	041a      	lsls	r2, r3, #16
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	431a      	orrs	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d90:	d174      	bne.n	8006e7c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006d98:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006da0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006da8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d108      	bne.n	8006dca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dc8:	e053      	b.n	8006e72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d106      	bne.n	8006de0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dde:	e048      	b.n	8006e72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d111      	bne.n	8006e0c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	0cdb      	lsrs	r3, r3, #19
 8006dec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	0a9b      	lsrs	r3, r3, #10
 8006df2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	02db      	lsls	r3, r3, #11
 8006e02:	4313      	orrs	r3, r2
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0a:	e032      	b.n	8006e72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d117      	bne.n	8006e44 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	0fdb      	lsrs	r3, r3, #31
 8006e18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	0cdb      	lsrs	r3, r3, #19
 8006e1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	0adb      	lsrs	r3, r3, #11
 8006e24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	08db      	lsrs	r3, r3, #3
 8006e2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	029b      	lsls	r3, r3, #10
 8006e34:	431a      	orrs	r2, r3
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	03db      	lsls	r3, r3, #15
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e42:	e016      	b.n	8006e72 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	0f1b      	lsrs	r3, r3, #28
 8006e48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	0d1b      	lsrs	r3, r3, #20
 8006e4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	0b1b      	lsrs	r3, r3, #12
 8006e54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	011a      	lsls	r2, r3, #4
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	431a      	orrs	r2, r3
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	031b      	lsls	r3, r3, #12
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e78:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e7a:	e00d      	b.n	8006e98 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e84:	d104      	bne.n	8006e90 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	615a      	str	r2, [r3, #20]
}
 8006e8e:	e003      	b.n	8006e98 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	60da      	str	r2, [r3, #12]
}
 8006e98:	bf00      	nop
 8006e9a:	372c      	adds	r7, #44	@ 0x2c
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	011a      	lsls	r2, r3, #4
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <HAL_EXTI_IRQHandler+0x5c>)
 8006ece:	4413      	add	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4798      	blx	r3
    }
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	58000088 	.word	0x58000088

08006f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b089      	sub	sp, #36	@ 0x24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006f12:	4b89      	ldr	r3, [pc, #548]	@ (8007138 <HAL_GPIO_Init+0x234>)
 8006f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f16:	e194      	b.n	8007242 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	4013      	ands	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 8186 	beq.w	800723c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d005      	beq.n	8006f48 <HAL_GPIO_Init+0x44>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d130      	bne.n	8006faa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	2203      	movs	r2, #3
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f7e:	2201      	movs	r2, #1
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43db      	mvns	r3, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	f003 0201 	and.w	r2, r3, #1
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d017      	beq.n	8006fe6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d123      	bne.n	800703a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	08da      	lsrs	r2, r3, #3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3208      	adds	r2, #8
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	220f      	movs	r2, #15
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	43db      	mvns	r3, r3
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	4013      	ands	r3, r2
 8007014:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	08da      	lsrs	r2, r3, #3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3208      	adds	r2, #8
 8007034:	69b9      	ldr	r1, [r7, #24]
 8007036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	2203      	movs	r2, #3
 8007046:	fa02 f303 	lsl.w	r3, r2, r3
 800704a:	43db      	mvns	r3, r3
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	4013      	ands	r3, r2
 8007050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f003 0203 	and.w	r2, r3, #3
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	fa02 f303 	lsl.w	r3, r2, r3
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	4313      	orrs	r3, r2
 8007066:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80e0 	beq.w	800723c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800707c:	4b2f      	ldr	r3, [pc, #188]	@ (800713c <HAL_GPIO_Init+0x238>)
 800707e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007082:	4a2e      	ldr	r2, [pc, #184]	@ (800713c <HAL_GPIO_Init+0x238>)
 8007084:	f043 0302 	orr.w	r3, r3, #2
 8007088:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800708c:	4b2b      	ldr	r3, [pc, #172]	@ (800713c <HAL_GPIO_Init+0x238>)
 800708e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800709a:	4a29      	ldr	r2, [pc, #164]	@ (8007140 <HAL_GPIO_Init+0x23c>)
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	089b      	lsrs	r3, r3, #2
 80070a0:	3302      	adds	r3, #2
 80070a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	220f      	movs	r2, #15
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43db      	mvns	r3, r3
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	4013      	ands	r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a20      	ldr	r2, [pc, #128]	@ (8007144 <HAL_GPIO_Init+0x240>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d052      	beq.n	800716c <HAL_GPIO_Init+0x268>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007148 <HAL_GPIO_Init+0x244>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d031      	beq.n	8007132 <HAL_GPIO_Init+0x22e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1e      	ldr	r2, [pc, #120]	@ (800714c <HAL_GPIO_Init+0x248>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02b      	beq.n	800712e <HAL_GPIO_Init+0x22a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007150 <HAL_GPIO_Init+0x24c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d025      	beq.n	800712a <HAL_GPIO_Init+0x226>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_GPIO_Init+0x250>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01f      	beq.n	8007126 <HAL_GPIO_Init+0x222>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007158 <HAL_GPIO_Init+0x254>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d019      	beq.n	8007122 <HAL_GPIO_Init+0x21e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1a      	ldr	r2, [pc, #104]	@ (800715c <HAL_GPIO_Init+0x258>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_GPIO_Init+0x21a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a19      	ldr	r2, [pc, #100]	@ (8007160 <HAL_GPIO_Init+0x25c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00d      	beq.n	800711a <HAL_GPIO_Init+0x216>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a18      	ldr	r2, [pc, #96]	@ (8007164 <HAL_GPIO_Init+0x260>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <HAL_GPIO_Init+0x212>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a17      	ldr	r2, [pc, #92]	@ (8007168 <HAL_GPIO_Init+0x264>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <HAL_GPIO_Init+0x20e>
 800710e:	2309      	movs	r3, #9
 8007110:	e02d      	b.n	800716e <HAL_GPIO_Init+0x26a>
 8007112:	230a      	movs	r3, #10
 8007114:	e02b      	b.n	800716e <HAL_GPIO_Init+0x26a>
 8007116:	2308      	movs	r3, #8
 8007118:	e029      	b.n	800716e <HAL_GPIO_Init+0x26a>
 800711a:	2307      	movs	r3, #7
 800711c:	e027      	b.n	800716e <HAL_GPIO_Init+0x26a>
 800711e:	2306      	movs	r3, #6
 8007120:	e025      	b.n	800716e <HAL_GPIO_Init+0x26a>
 8007122:	2305      	movs	r3, #5
 8007124:	e023      	b.n	800716e <HAL_GPIO_Init+0x26a>
 8007126:	2304      	movs	r3, #4
 8007128:	e021      	b.n	800716e <HAL_GPIO_Init+0x26a>
 800712a:	2303      	movs	r3, #3
 800712c:	e01f      	b.n	800716e <HAL_GPIO_Init+0x26a>
 800712e:	2302      	movs	r3, #2
 8007130:	e01d      	b.n	800716e <HAL_GPIO_Init+0x26a>
 8007132:	2301      	movs	r3, #1
 8007134:	e01b      	b.n	800716e <HAL_GPIO_Init+0x26a>
 8007136:	bf00      	nop
 8007138:	58000080 	.word	0x58000080
 800713c:	58024400 	.word	0x58024400
 8007140:	58000400 	.word	0x58000400
 8007144:	58020000 	.word	0x58020000
 8007148:	58020400 	.word	0x58020400
 800714c:	58020800 	.word	0x58020800
 8007150:	58020c00 	.word	0x58020c00
 8007154:	58021000 	.word	0x58021000
 8007158:	58021400 	.word	0x58021400
 800715c:	58021800 	.word	0x58021800
 8007160:	58021c00 	.word	0x58021c00
 8007164:	58022000 	.word	0x58022000
 8007168:	58022400 	.word	0x58022400
 800716c:	2300      	movs	r3, #0
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	f002 0203 	and.w	r2, r2, #3
 8007174:	0092      	lsls	r2, r2, #2
 8007176:	4093      	lsls	r3, r2
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	4313      	orrs	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800717e:	4938      	ldr	r1, [pc, #224]	@ (8007260 <HAL_GPIO_Init+0x35c>)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	089b      	lsrs	r3, r3, #2
 8007184:	3302      	adds	r3, #2
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800718c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	43db      	mvns	r3, r3
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	4013      	ands	r3, r2
 800719c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80071b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80071ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	43db      	mvns	r3, r3
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	4013      	ands	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	43db      	mvns	r3, r3
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	4013      	ands	r3, r2
 80071f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	43db      	mvns	r3, r3
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	4013      	ands	r3, r2
 8007220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	3301      	adds	r3, #1
 8007240:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	fa22 f303 	lsr.w	r3, r2, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	f47f ae63 	bne.w	8006f18 <HAL_GPIO_Init+0x14>
  }
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	3724      	adds	r7, #36	@ 0x24
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	58000400 	.word	0x58000400

08007264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007272:	4b75      	ldr	r3, [pc, #468]	@ (8007448 <HAL_GPIO_DeInit+0x1e4>)
 8007274:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007276:	e0d9      	b.n	800742c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007278:	2201      	movs	r2, #1
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	fa02 f303 	lsl.w	r3, r2, r3
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	4013      	ands	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80cc 	beq.w	8007426 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800728e:	4a6f      	ldr	r2, [pc, #444]	@ (800744c <HAL_GPIO_DeInit+0x1e8>)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	3302      	adds	r3, #2
 8007296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	220f      	movs	r2, #15
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a67      	ldr	r2, [pc, #412]	@ (8007450 <HAL_GPIO_DeInit+0x1ec>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d037      	beq.n	8007328 <HAL_GPIO_DeInit+0xc4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a66      	ldr	r2, [pc, #408]	@ (8007454 <HAL_GPIO_DeInit+0x1f0>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d031      	beq.n	8007324 <HAL_GPIO_DeInit+0xc0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a65      	ldr	r2, [pc, #404]	@ (8007458 <HAL_GPIO_DeInit+0x1f4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02b      	beq.n	8007320 <HAL_GPIO_DeInit+0xbc>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a64      	ldr	r2, [pc, #400]	@ (800745c <HAL_GPIO_DeInit+0x1f8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d025      	beq.n	800731c <HAL_GPIO_DeInit+0xb8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a63      	ldr	r2, [pc, #396]	@ (8007460 <HAL_GPIO_DeInit+0x1fc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01f      	beq.n	8007318 <HAL_GPIO_DeInit+0xb4>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a62      	ldr	r2, [pc, #392]	@ (8007464 <HAL_GPIO_DeInit+0x200>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d019      	beq.n	8007314 <HAL_GPIO_DeInit+0xb0>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a61      	ldr	r2, [pc, #388]	@ (8007468 <HAL_GPIO_DeInit+0x204>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d013      	beq.n	8007310 <HAL_GPIO_DeInit+0xac>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a60      	ldr	r2, [pc, #384]	@ (800746c <HAL_GPIO_DeInit+0x208>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00d      	beq.n	800730c <HAL_GPIO_DeInit+0xa8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a5f      	ldr	r2, [pc, #380]	@ (8007470 <HAL_GPIO_DeInit+0x20c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d007      	beq.n	8007308 <HAL_GPIO_DeInit+0xa4>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a5e      	ldr	r2, [pc, #376]	@ (8007474 <HAL_GPIO_DeInit+0x210>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <HAL_GPIO_DeInit+0xa0>
 8007300:	2309      	movs	r3, #9
 8007302:	e012      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007304:	230a      	movs	r3, #10
 8007306:	e010      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007308:	2308      	movs	r3, #8
 800730a:	e00e      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 800730c:	2307      	movs	r3, #7
 800730e:	e00c      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007310:	2306      	movs	r3, #6
 8007312:	e00a      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007314:	2305      	movs	r3, #5
 8007316:	e008      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007318:	2304      	movs	r3, #4
 800731a:	e006      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 800731c:	2303      	movs	r3, #3
 800731e:	e004      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007320:	2302      	movs	r3, #2
 8007322:	e002      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <HAL_GPIO_DeInit+0xc6>
 8007328:	2300      	movs	r3, #0
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	f002 0203 	and.w	r2, r2, #3
 8007330:	0092      	lsls	r2, r2, #2
 8007332:	4093      	lsls	r3, r2
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d136      	bne.n	80073a8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	43db      	mvns	r3, r3
 8007342:	401a      	ands	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	43db      	mvns	r3, r3
 8007350:	401a      	ands	r2, r3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	43db      	mvns	r3, r3
 8007360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007364:	4013      	ands	r3, r2
 8007366:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	43db      	mvns	r3, r3
 8007372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007376:	4013      	ands	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	220f      	movs	r2, #15
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800738a:	4a30      	ldr	r2, [pc, #192]	@ (800744c <HAL_GPIO_DeInit+0x1e8>)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	089b      	lsrs	r3, r3, #2
 8007390:	3302      	adds	r3, #2
 8007392:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	43da      	mvns	r2, r3
 800739a:	482c      	ldr	r0, [pc, #176]	@ (800744c <HAL_GPIO_DeInit+0x1e8>)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	089b      	lsrs	r3, r3, #2
 80073a0:	400a      	ands	r2, r1
 80073a2:	3302      	adds	r3, #2
 80073a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	2103      	movs	r1, #3
 80073b2:	fa01 f303 	lsl.w	r3, r1, r3
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	08da      	lsrs	r2, r3, #3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3208      	adds	r2, #8
 80073c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	220f      	movs	r2, #15
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43db      	mvns	r3, r3
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	08d2      	lsrs	r2, r2, #3
 80073dc:	4019      	ands	r1, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3208      	adds	r2, #8
 80073e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	2103      	movs	r1, #3
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	43db      	mvns	r3, r3
 80073f6:	401a      	ands	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	2101      	movs	r1, #1
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	43db      	mvns	r3, r3
 800740a:	401a      	ands	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	2103      	movs	r1, #3
 800741a:	fa01 f303 	lsl.w	r3, r1, r3
 800741e:	43db      	mvns	r3, r3
 8007420:	401a      	ands	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	3301      	adds	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	f47f af1f 	bne.w	8007278 <HAL_GPIO_DeInit+0x14>
  }
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	58000080 	.word	0x58000080
 800744c:	58000400 	.word	0x58000400
 8007450:	58020000 	.word	0x58020000
 8007454:	58020400 	.word	0x58020400
 8007458:	58020800 	.word	0x58020800
 800745c:	58020c00 	.word	0x58020c00
 8007460:	58021000 	.word	0x58021000
 8007464:	58021400 	.word	0x58021400
 8007468:	58021800 	.word	0x58021800
 800746c:	58021c00 	.word	0x58021c00
 8007470:	58022000 	.word	0x58022000
 8007474:	58022400 	.word	0x58022400

08007478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	807b      	strh	r3, [r7, #2]
 8007484:	4613      	mov	r3, r2
 8007486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007488:	787b      	ldrb	r3, [r7, #1]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800748e:	887a      	ldrh	r2, [r7, #2]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007494:	e003      	b.n	800749e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007496:	887b      	ldrh	r3, [r7, #2]
 8007498:	041a      	lsls	r2, r3, #16
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	619a      	str	r2, [r3, #24]
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e07f      	b.n	80075be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8a9 	bl	800762a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2224      	movs	r2, #36	@ 0x24
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0201 	bic.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80074fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800750c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d107      	bne.n	8007526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007522:	609a      	str	r2, [r3, #8]
 8007524:	e006      	b.n	8007534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d104      	bne.n	8007546 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	4b1d      	ldr	r3, [pc, #116]	@ (80075c8 <HAL_I2C_Init+0x11c>)
 8007552:	430b      	orrs	r3, r1
 8007554:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007564:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69d9      	ldr	r1, [r3, #28]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1a      	ldr	r2, [r3, #32]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	02008000 	.word	0x02008000

080075cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e021      	b.n	8007622 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2224      	movs	r2, #36	@ 0x24
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f821 	bl	800763e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	461a      	mov	r2, r3
 8007662:	4603      	mov	r3, r0
 8007664:	817b      	strh	r3, [r7, #10]
 8007666:	460b      	mov	r3, r1
 8007668:	813b      	strh	r3, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b20      	cmp	r3, #32
 8007678:	f040 80f9 	bne.w	800786e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_I2C_Mem_Write+0x34>
 8007682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d105      	bne.n	8007694 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800768e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e0ed      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_I2C_Mem_Write+0x4e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0e6      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076aa:	f7fd fce3 	bl	8005074 <HAL_GetTick>
 80076ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	2319      	movs	r3, #25
 80076b6:	2201      	movs	r2, #1
 80076b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fadd 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0d1      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2221      	movs	r2, #33	@ 0x21
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2240      	movs	r2, #64	@ 0x40
 80076d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a3a      	ldr	r2, [r7, #32]
 80076e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80076ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076f4:	88f8      	ldrh	r0, [r7, #6]
 80076f6:	893a      	ldrh	r2, [r7, #8]
 80076f8:	8979      	ldrh	r1, [r7, #10]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	4603      	mov	r3, r0
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f9ed 	bl	8007ae4 <I2C_RequestMemoryWrite>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e0a9      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	2bff      	cmp	r3, #255	@ 0xff
 8007724:	d90e      	bls.n	8007744 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	22ff      	movs	r2, #255	@ 0xff
 800772a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007730:	b2da      	uxtb	r2, r3
 8007732:	8979      	ldrh	r1, [r7, #10]
 8007734:	2300      	movs	r3, #0
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fc57 	bl	8007ff0 <I2C_TransferConfig>
 8007742:	e00f      	b.n	8007764 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007752:	b2da      	uxtb	r2, r3
 8007754:	8979      	ldrh	r1, [r7, #10]
 8007756:	2300      	movs	r3, #0
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fc46 	bl	8007ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 fad6 	bl	8007d1a <I2C_WaitOnTXISFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e07b      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	781a      	ldrb	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d034      	beq.n	800781c <HAL_I2C_Mem_Write+0x1c8>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d130      	bne.n	800781c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	2200      	movs	r2, #0
 80077c2:	2180      	movs	r1, #128	@ 0x80
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fa59 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e04d      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2bff      	cmp	r3, #255	@ 0xff
 80077dc:	d90e      	bls.n	80077fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	22ff      	movs	r2, #255	@ 0xff
 80077e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	8979      	ldrh	r1, [r7, #10]
 80077ec:	2300      	movs	r3, #0
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fbfb 	bl	8007ff0 <I2C_TransferConfig>
 80077fa:	e00f      	b.n	800781c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780a:	b2da      	uxtb	r2, r3
 800780c:	8979      	ldrh	r1, [r7, #10]
 800780e:	2300      	movs	r3, #0
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fbea 	bl	8007ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d19e      	bne.n	8007764 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fabc 	bl	8007da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e01a      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2220      	movs	r2, #32
 8007840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6859      	ldr	r1, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <HAL_I2C_Mem_Write+0x224>)
 800784e:	400b      	ands	r3, r1
 8007850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2220      	movs	r2, #32
 8007856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e000      	b.n	8007870 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800786e:	2302      	movs	r3, #2
  }
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	fe00e800 	.word	0xfe00e800

0800787c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	4603      	mov	r3, r0
 800788c:	817b      	strh	r3, [r7, #10]
 800788e:	460b      	mov	r3, r1
 8007890:	813b      	strh	r3, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b20      	cmp	r3, #32
 80078a0:	f040 80fd 	bne.w	8007a9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_I2C_Mem_Read+0x34>
 80078aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d105      	bne.n	80078bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0f1      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_I2C_Mem_Read+0x4e>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e0ea      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078d2:	f7fd fbcf 	bl	8005074 <HAL_GetTick>
 80078d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2319      	movs	r3, #25
 80078de:	2201      	movs	r2, #1
 80078e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f9c9 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e0d5      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2222      	movs	r2, #34	@ 0x22
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2240      	movs	r2, #64	@ 0x40
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800791c:	88f8      	ldrh	r0, [r7, #6]
 800791e:	893a      	ldrh	r2, [r7, #8]
 8007920:	8979      	ldrh	r1, [r7, #10]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	4603      	mov	r3, r0
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f92d 	bl	8007b8c <I2C_RequestMemoryRead>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e0ad      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007948:	b29b      	uxth	r3, r3
 800794a:	2bff      	cmp	r3, #255	@ 0xff
 800794c:	d90e      	bls.n	800796c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	22ff      	movs	r2, #255	@ 0xff
 8007952:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007958:	b2da      	uxtb	r2, r3
 800795a:	8979      	ldrh	r1, [r7, #10]
 800795c:	4b52      	ldr	r3, [pc, #328]	@ (8007aa8 <HAL_I2C_Mem_Read+0x22c>)
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fb43 	bl	8007ff0 <I2C_TransferConfig>
 800796a:	e00f      	b.n	800798c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800797a:	b2da      	uxtb	r2, r3
 800797c:	8979      	ldrh	r1, [r7, #10]
 800797e:	4b4a      	ldr	r3, [pc, #296]	@ (8007aa8 <HAL_I2C_Mem_Read+0x22c>)
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fb32 	bl	8007ff0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007992:	2200      	movs	r2, #0
 8007994:	2104      	movs	r1, #4
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f970 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e07c      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d034      	beq.n	8007a4c <HAL_I2C_Mem_Read+0x1d0>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d130      	bne.n	8007a4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	2200      	movs	r2, #0
 80079f2:	2180      	movs	r1, #128	@ 0x80
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 f941 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e04d      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2bff      	cmp	r3, #255	@ 0xff
 8007a0c:	d90e      	bls.n	8007a2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	22ff      	movs	r2, #255	@ 0xff
 8007a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	8979      	ldrh	r1, [r7, #10]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 fae3 	bl	8007ff0 <I2C_TransferConfig>
 8007a2a:	e00f      	b.n	8007a4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	8979      	ldrh	r1, [r7, #10]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 fad2 	bl	8007ff0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d19a      	bne.n	800798c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f9a4 	bl	8007da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e01a      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6859      	ldr	r1, [r3, #4]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <HAL_I2C_Mem_Read+0x230>)
 8007a7e:	400b      	ands	r3, r1
 8007a80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e000      	b.n	8007aa0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007a9e:	2302      	movs	r3, #2
  }
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	80002400 	.word	0x80002400
 8007aac:	fe00e800 	.word	0xfe00e800

08007ab0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007abe:	b2db      	uxtb	r3, r3
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	461a      	mov	r2, r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	817b      	strh	r3, [r7, #10]
 8007af6:	460b      	mov	r3, r1
 8007af8:	813b      	strh	r3, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	8979      	ldrh	r1, [r7, #10]
 8007b04:	4b20      	ldr	r3, [pc, #128]	@ (8007b88 <I2C_RequestMemoryWrite+0xa4>)
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fa6f 	bl	8007ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	69b9      	ldr	r1, [r7, #24]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f8ff 	bl	8007d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e02c      	b.n	8007b80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d105      	bne.n	8007b38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b36:	e015      	b.n	8007b64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	0a1b      	lsrs	r3, r3, #8
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	69b9      	ldr	r1, [r7, #24]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f8e5 	bl	8007d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e012      	b.n	8007b80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b5a:	893b      	ldrh	r3, [r7, #8]
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2180      	movs	r1, #128	@ 0x80
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f884 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	80002000 	.word	0x80002000

08007b8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	817b      	strh	r3, [r7, #10]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	813b      	strh	r3, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	8979      	ldrh	r1, [r7, #10]
 8007bac:	4b20      	ldr	r3, [pc, #128]	@ (8007c30 <I2C_RequestMemoryRead+0xa4>)
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fa1c 	bl	8007ff0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	69b9      	ldr	r1, [r7, #24]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f8ac 	bl	8007d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e02c      	b.n	8007c26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d105      	bne.n	8007bde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bdc:	e015      	b.n	8007c0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bde:	893b      	ldrh	r3, [r7, #8]
 8007be0:	0a1b      	lsrs	r3, r3, #8
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	69b9      	ldr	r1, [r7, #24]
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f892 	bl	8007d1a <I2C_WaitOnTXISFlagUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e012      	b.n	8007c26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c00:	893b      	ldrh	r3, [r7, #8]
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2200      	movs	r2, #0
 8007c12:	2140      	movs	r1, #64	@ 0x40
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f831 	bl	8007c7c <I2C_WaitOnFlagUntilTimeout>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	80002000 	.word	0x80002000

08007c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d103      	bne.n	8007c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d007      	beq.n	8007c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	619a      	str	r2, [r3, #24]
  }
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c8c:	e031      	b.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d02d      	beq.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7fd f9ed 	bl	8005074 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d122      	bne.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d113      	bne.n	8007cf2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cce:	f043 0220 	orr.w	r2, r3, #32
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e00f      	b.n	8007d12 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	699a      	ldr	r2, [r3, #24]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	bf0c      	ite	eq
 8007d02:	2301      	moveq	r3, #1
 8007d04:	2300      	movne	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d0be      	beq.n	8007c8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d26:	e033      	b.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f87f 	bl	8007e30 <I2C_IsErrorOccurred>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e031      	b.n	8007da0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d025      	beq.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d44:	f7fd f996 	bl	8005074 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d302      	bcc.n	8007d5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11a      	bne.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d013      	beq.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d6c:	f043 0220 	orr.w	r2, r3, #32
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e007      	b.n	8007da0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d1c4      	bne.n	8007d28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007db4:	e02f      	b.n	8007e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f838 	bl	8007e30 <I2C_IsErrorOccurred>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e02d      	b.n	8007e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dca:	f7fd f953 	bl	8005074 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d11a      	bne.n	8007e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d013      	beq.n	8007e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df2:	f043 0220 	orr.w	r2, r3, #32
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e007      	b.n	8007e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d1c8      	bne.n	8007db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	@ 0x28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d068      	beq.n	8007f2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2210      	movs	r2, #16
 8007e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e64:	e049      	b.n	8007efa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d045      	beq.n	8007efa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e6e:	f7fd f901 	bl	8005074 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d302      	bcc.n	8007e84 <I2C_IsErrorOccurred+0x54>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d13a      	bne.n	8007efa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea6:	d121      	bne.n	8007eec <I2C_IsErrorOccurred+0xbc>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eae:	d01d      	beq.n	8007eec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007eb0:	7cfb      	ldrb	r3, [r7, #19]
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d01a      	beq.n	8007eec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ec6:	f7fd f8d5 	bl	8005074 <HAL_GetTick>
 8007eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ecc:	e00e      	b.n	8007eec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ece:	f7fd f8d1 	bl	8005074 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	2b19      	cmp	r3, #25
 8007eda:	d907      	bls.n	8007eec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	f043 0320 	orr.w	r3, r3, #32
 8007ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007eea:	e006      	b.n	8007efa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d1e9      	bne.n	8007ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d003      	beq.n	8007f10 <I2C_IsErrorOccurred+0xe0>
 8007f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0aa      	beq.n	8007e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f043 0304 	orr.w	r3, r3, #4
 8007f26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f043 0308 	orr.w	r3, r3, #8
 8007f68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	f043 0302 	orr.w	r3, r3, #2
 8007f8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01c      	beq.n	8007fde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7ff fe45 	bl	8007c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6859      	ldr	r1, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <I2C_IsErrorOccurred+0x1bc>)
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007fde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3728      	adds	r7, #40	@ 0x28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	fe00e800 	.word	0xfe00e800

08007ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	817b      	strh	r3, [r7, #10]
 8007ffe:	4613      	mov	r3, r2
 8008000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008002:	897b      	ldrh	r3, [r7, #10]
 8008004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008008:	7a7b      	ldrb	r3, [r7, #9]
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	4313      	orrs	r3, r2
 800801a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800801e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	0d5b      	lsrs	r3, r3, #21
 800802a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800802e:	4b08      	ldr	r3, [pc, #32]	@ (8008050 <I2C_TransferConfig+0x60>)
 8008030:	430b      	orrs	r3, r1
 8008032:	43db      	mvns	r3, r3
 8008034:	ea02 0103 	and.w	r1, r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	03ff63ff 	.word	0x03ff63ff

08008054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b20      	cmp	r3, #32
 8008068:	d138      	bne.n	80080dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008074:	2302      	movs	r3, #2
 8008076:	e032      	b.n	80080de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2224      	movs	r2, #36	@ 0x24
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6819      	ldr	r1, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e000      	b.n	80080de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	d139      	bne.n	8008174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800810a:	2302      	movs	r3, #2
 800810c:	e033      	b.n	8008176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2224      	movs	r2, #36	@ 0x24
 800811a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0201 	bic.w	r2, r2, #1
 800812c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800813c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
	...

08008184 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e0bf      	b.n	8008316 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8ba 	bl	8008324 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80081c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6999      	ldr	r1, [r3, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6899      	ldr	r1, [r3, #8]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008320 <HAL_LTDC_Init+0x19c>)
 80081f8:	400b      	ands	r3, r1
 80081fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	041b      	lsls	r3, r3, #16
 8008202:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6899      	ldr	r1, [r3, #8]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	431a      	orrs	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68d9      	ldr	r1, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	4b3e      	ldr	r3, [pc, #248]	@ (8008320 <HAL_LTDC_Init+0x19c>)
 8008226:	400b      	ands	r3, r1
 8008228:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	041b      	lsls	r3, r3, #16
 8008230:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68d9      	ldr	r1, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1a      	ldr	r2, [r3, #32]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6919      	ldr	r1, [r3, #16]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b33      	ldr	r3, [pc, #204]	@ (8008320 <HAL_LTDC_Init+0x19c>)
 8008254:	400b      	ands	r3, r1
 8008256:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	041b      	lsls	r3, r3, #16
 800825e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6919      	ldr	r1, [r3, #16]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6959      	ldr	r1, [r3, #20]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	4b27      	ldr	r3, [pc, #156]	@ (8008320 <HAL_LTDC_Init+0x19c>)
 8008282:	400b      	ands	r3, r1
 8008284:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828a:	041b      	lsls	r3, r3, #16
 800828c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6959      	ldr	r1, [r3, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80082b4:	041b      	lsls	r3, r3, #16
 80082b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80082c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80082da:	431a      	orrs	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0206 	orr.w	r2, r2, #6
 80082f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0201 	orr.w	r2, r2, #1
 8008302:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	f000f800 	.word	0xf000f800

08008324 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008338:	b5b0      	push	{r4, r5, r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <HAL_LTDC_ConfigLayer+0x1a>
 800834e:	2302      	movs	r3, #2
 8008350:	e02c      	b.n	80083ac <HAL_LTDC_ConfigLayer+0x74>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2134      	movs	r1, #52	@ 0x34
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	4413      	add	r3, r2
 800836e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4614      	mov	r4, r2
 8008376:	461d      	mov	r5, r3
 8008378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800837a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800837c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800837e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f811 	bl	80083b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2201      	movs	r2, #1
 8008398:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bdb0      	pop	{r4, r5, r7, pc}

080083b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b089      	sub	sp, #36	@ 0x24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083d0:	4413      	add	r3, r2
 80083d2:	041b      	lsls	r3, r3, #16
 80083d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	4413      	add	r3, r2
 80083e2:	3384      	adds	r3, #132	@ 0x84
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	4611      	mov	r1, r2
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	01d2      	lsls	r2, r2, #7
 80083f0:	440a      	add	r2, r1
 80083f2:	3284      	adds	r2, #132	@ 0x84
 80083f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80083f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	0c1b      	lsrs	r3, r3, #16
 8008406:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800840a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800840c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	01db      	lsls	r3, r3, #7
 8008418:	440b      	add	r3, r1
 800841a:	3384      	adds	r3, #132	@ 0x84
 800841c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008422:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008432:	4413      	add	r3, r2
 8008434:	041b      	lsls	r3, r3, #16
 8008436:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	01db      	lsls	r3, r3, #7
 8008442:	4413      	add	r3, r2
 8008444:	3384      	adds	r3, #132	@ 0x84
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	4611      	mov	r1, r2
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	01d2      	lsls	r2, r2, #7
 8008452:	440a      	add	r2, r1
 8008454:	3284      	adds	r2, #132	@ 0x84
 8008456:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800845a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800846a:	4413      	add	r3, r2
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4619      	mov	r1, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	01db      	lsls	r3, r3, #7
 8008478:	440b      	add	r3, r1
 800847a:	3384      	adds	r3, #132	@ 0x84
 800847c:	4619      	mov	r1, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4313      	orrs	r3, r2
 8008482:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	01db      	lsls	r3, r3, #7
 800848e:	4413      	add	r3, r2
 8008490:	3384      	adds	r3, #132	@ 0x84
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	4611      	mov	r1, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	01d2      	lsls	r2, r2, #7
 800849e:	440a      	add	r2, r1
 80084a0:	3284      	adds	r2, #132	@ 0x84
 80084a2:	f023 0307 	bic.w	r3, r3, #7
 80084a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	01db      	lsls	r3, r3, #7
 80084b2:	4413      	add	r3, r2
 80084b4:	3384      	adds	r3, #132	@ 0x84
 80084b6:	461a      	mov	r2, r3
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80084ce:	041b      	lsls	r3, r3, #16
 80084d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	061b      	lsls	r3, r3, #24
 80084d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	01db      	lsls	r3, r3, #7
 80084e4:	4413      	add	r3, r2
 80084e6:	3384      	adds	r3, #132	@ 0x84
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	4413      	add	r3, r2
 80084f6:	3384      	adds	r3, #132	@ 0x84
 80084f8:	461a      	mov	r2, r3
 80084fa:	2300      	movs	r3, #0
 80084fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008504:	461a      	mov	r2, r3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	431a      	orrs	r2, r3
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	431a      	orrs	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	440b      	add	r3, r1
 800851a:	3384      	adds	r3, #132	@ 0x84
 800851c:	4619      	mov	r1, r3
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	4313      	orrs	r3, r2
 8008522:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	01db      	lsls	r3, r3, #7
 800852e:	4413      	add	r3, r2
 8008530:	3384      	adds	r3, #132	@ 0x84
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	4611      	mov	r1, r2
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	01d2      	lsls	r2, r2, #7
 800853e:	440a      	add	r2, r1
 8008540:	3284      	adds	r2, #132	@ 0x84
 8008542:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008546:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	01db      	lsls	r3, r3, #7
 8008552:	4413      	add	r3, r2
 8008554:	3384      	adds	r3, #132	@ 0x84
 8008556:	461a      	mov	r2, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	01db      	lsls	r3, r3, #7
 8008568:	4413      	add	r3, r2
 800856a:	3384      	adds	r3, #132	@ 0x84
 800856c:	69da      	ldr	r2, [r3, #28]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4619      	mov	r1, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	01db      	lsls	r3, r3, #7
 8008578:	440b      	add	r3, r1
 800857a:	3384      	adds	r3, #132	@ 0x84
 800857c:	4619      	mov	r1, r3
 800857e:	4b58      	ldr	r3, [pc, #352]	@ (80086e0 <LTDC_SetConfig+0x32c>)
 8008580:	4013      	ands	r3, r2
 8008582:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	69da      	ldr	r2, [r3, #28]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	68f9      	ldr	r1, [r7, #12]
 800858e:	6809      	ldr	r1, [r1, #0]
 8008590:	4608      	mov	r0, r1
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	01c9      	lsls	r1, r1, #7
 8008596:	4401      	add	r1, r0
 8008598:	3184      	adds	r1, #132	@ 0x84
 800859a:	4313      	orrs	r3, r2
 800859c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	01db      	lsls	r3, r3, #7
 80085a8:	4413      	add	r3, r2
 80085aa:	3384      	adds	r3, #132	@ 0x84
 80085ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	01db      	lsls	r3, r3, #7
 80085b8:	4413      	add	r3, r2
 80085ba:	3384      	adds	r3, #132	@ 0x84
 80085bc:	461a      	mov	r2, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	01db      	lsls	r3, r3, #7
 80085cc:	4413      	add	r3, r2
 80085ce:	3384      	adds	r3, #132	@ 0x84
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80085e0:	2304      	movs	r3, #4
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	e01b      	b.n	800861e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d102      	bne.n	80085f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80085ee:	2303      	movs	r3, #3
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e014      	b.n	800861e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d00b      	beq.n	8008614 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008600:	2b02      	cmp	r3, #2
 8008602:	d007      	beq.n	8008614 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008608:	2b03      	cmp	r3, #3
 800860a:	d003      	beq.n	8008614 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008610:	2b07      	cmp	r3, #7
 8008612:	d102      	bne.n	800861a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008614:	2302      	movs	r3, #2
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	e001      	b.n	800861e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800861a:	2301      	movs	r3, #1
 800861c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	01db      	lsls	r3, r3, #7
 8008628:	4413      	add	r3, r2
 800862a:	3384      	adds	r3, #132	@ 0x84
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	4611      	mov	r1, r2
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	01d2      	lsls	r2, r2, #7
 8008638:	440a      	add	r2, r1
 800863a:	3284      	adds	r2, #132	@ 0x84
 800863c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008640:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	fb02 f303 	mul.w	r3, r2, r3
 800864c:	041a      	lsls	r2, r3, #16
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6859      	ldr	r1, [r3, #4]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	1acb      	subs	r3, r1, r3
 8008658:	69f9      	ldr	r1, [r7, #28]
 800865a:	fb01 f303 	mul.w	r3, r1, r3
 800865e:	3307      	adds	r3, #7
 8008660:	68f9      	ldr	r1, [r7, #12]
 8008662:	6809      	ldr	r1, [r1, #0]
 8008664:	4608      	mov	r0, r1
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	01c9      	lsls	r1, r1, #7
 800866a:	4401      	add	r1, r0
 800866c:	3184      	adds	r1, #132	@ 0x84
 800866e:	4313      	orrs	r3, r2
 8008670:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	01db      	lsls	r3, r3, #7
 800867c:	4413      	add	r3, r2
 800867e:	3384      	adds	r3, #132	@ 0x84
 8008680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4619      	mov	r1, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	01db      	lsls	r3, r3, #7
 800868c:	440b      	add	r3, r1
 800868e:	3384      	adds	r3, #132	@ 0x84
 8008690:	4619      	mov	r1, r3
 8008692:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <LTDC_SetConfig+0x330>)
 8008694:	4013      	ands	r3, r2
 8008696:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	01db      	lsls	r3, r3, #7
 80086a2:	4413      	add	r3, r2
 80086a4:	3384      	adds	r3, #132	@ 0x84
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	01db      	lsls	r3, r3, #7
 80086b8:	4413      	add	r3, r2
 80086ba:	3384      	adds	r3, #132	@ 0x84
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	4611      	mov	r1, r2
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	01d2      	lsls	r2, r2, #7
 80086c8:	440a      	add	r2, r1
 80086ca:	3284      	adds	r2, #132	@ 0x84
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	6013      	str	r3, [r2, #0]
}
 80086d2:	bf00      	nop
 80086d4:	3724      	adds	r7, #36	@ 0x24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	fffff8f8 	.word	0xfffff8f8
 80086e4:	fffff800 	.word	0xfffff800

080086e8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80086f0:	f7fc fcc0 	bl	8005074 <HAL_GetTick>
 80086f4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e03b      	b.n	8008778 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 0201 	bic.w	r2, r2, #1
 800871e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008720:	e00f      	b.n	8008742 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008722:	f7fc fca7 	bl	8005074 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b05      	cmp	r3, #5
 800872e:	d908      	bls.n	8008742 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2240      	movs	r2, #64	@ 0x40
 8008734:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2203      	movs	r2, #3
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e01a      	b.n	8008778 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e8      	bne.n	8008722 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f86d 	bl	8008830 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e048      	b.n	8008824 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 0201 	bic.w	r2, r2, #1
 80087a0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2200      	movs	r2, #0
 80087b0:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2200      	movs	r2, #0
 80087b8:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2200      	movs	r2, #0
 80087c0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2200      	movs	r2, #0
 80087c8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2200      	movs	r2, #0
 80087e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2200      	movs	r2, #0
 80087f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	221f      	movs	r2, #31
 80087f8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68d9      	ldr	r1, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695a      	ldr	r2, [r3, #20]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008856:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008862:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008868:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800886e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	3b01      	subs	r3, #1
 8008876:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008878:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008884:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008886:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008890:	d107      	bne.n	80088a2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80088a0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	da11      	bge.n	80088d6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695a      	ldr	r2, [r3, #20]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80088c0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c6:	425b      	negs	r3, r3
 80088c8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	b292      	uxth	r2, r2
 80088d2:	621a      	str	r2, [r3, #32]
 80088d4:	e006      	b.n	80088e4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	b292      	uxth	r2, r2
 80088e2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	da15      	bge.n	8008918 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695a      	ldr	r2, [r3, #20]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80088fa:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008900:	425b      	negs	r3, r3
 8008902:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6a19      	ldr	r1, [r3, #32]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	041a      	lsls	r2, r3, #16
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	621a      	str	r2, [r3, #32]
 8008916:	e009      	b.n	800892c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6a19      	ldr	r1, [r3, #32]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	041a      	lsls	r2, r3, #16
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008934:	d006      	beq.n	8008944 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	629a      	str	r2, [r3, #40]	@ 0x28
 8008942:	e003      	b.n	800894c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2200      	movs	r2, #0
 800894a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2200      	movs	r2, #0
 8008952:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008954:	bf00      	nop
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008968:	4b19      	ldr	r3, [pc, #100]	@ (80089d0 <HAL_PWREx_ConfigSupply+0x70>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	2b04      	cmp	r3, #4
 8008972:	d00a      	beq.n	800898a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008974:	4b16      	ldr	r3, [pc, #88]	@ (80089d0 <HAL_PWREx_ConfigSupply+0x70>)
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d001      	beq.n	8008986 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e01f      	b.n	80089c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e01d      	b.n	80089c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800898a:	4b11      	ldr	r3, [pc, #68]	@ (80089d0 <HAL_PWREx_ConfigSupply+0x70>)
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f023 0207 	bic.w	r2, r3, #7
 8008992:	490f      	ldr	r1, [pc, #60]	@ (80089d0 <HAL_PWREx_ConfigSupply+0x70>)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4313      	orrs	r3, r2
 8008998:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800899a:	f7fc fb6b 	bl	8005074 <HAL_GetTick>
 800899e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80089a0:	e009      	b.n	80089b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80089a2:	f7fc fb67 	bl	8005074 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089b0:	d901      	bls.n	80089b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e007      	b.n	80089c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80089b6:	4b06      	ldr	r3, [pc, #24]	@ (80089d0 <HAL_PWREx_ConfigSupply+0x70>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	d1ee      	bne.n	80089a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	58024800 	.word	0x58024800

080089d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	@ 0x30
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f000 bc48 	b.w	8009278 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8088 	beq.w	8008b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089f6:	4b99      	ldr	r3, [pc, #612]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a00:	4b96      	ldr	r3, [pc, #600]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d007      	beq.n	8008a1c <HAL_RCC_OscConfig+0x48>
 8008a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0e:	2b18      	cmp	r3, #24
 8008a10:	d111      	bne.n	8008a36 <HAL_RCC_OscConfig+0x62>
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	f003 0303 	and.w	r3, r3, #3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d10c      	bne.n	8008a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d06d      	beq.n	8008b04 <HAL_RCC_OscConfig+0x130>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d169      	bne.n	8008b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	f000 bc21 	b.w	8009278 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a3e:	d106      	bne.n	8008a4e <HAL_RCC_OscConfig+0x7a>
 8008a40:	4b86      	ldr	r3, [pc, #536]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a85      	ldr	r2, [pc, #532]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	e02e      	b.n	8008aac <HAL_RCC_OscConfig+0xd8>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCC_OscConfig+0x9c>
 8008a56:	4b81      	ldr	r3, [pc, #516]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a80      	ldr	r2, [pc, #512]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	4b7e      	ldr	r3, [pc, #504]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a7d      	ldr	r2, [pc, #500]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	e01d      	b.n	8008aac <HAL_RCC_OscConfig+0xd8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a78:	d10c      	bne.n	8008a94 <HAL_RCC_OscConfig+0xc0>
 8008a7a:	4b78      	ldr	r3, [pc, #480]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a77      	ldr	r2, [pc, #476]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	4b75      	ldr	r3, [pc, #468]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a74      	ldr	r2, [pc, #464]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	e00b      	b.n	8008aac <HAL_RCC_OscConfig+0xd8>
 8008a94:	4b71      	ldr	r3, [pc, #452]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a70      	ldr	r2, [pc, #448]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d013      	beq.n	8008adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7fc fade 	bl	8005074 <HAL_GetTick>
 8008ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008aba:	e008      	b.n	8008ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008abc:	f7fc fada 	bl	8005074 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b64      	cmp	r3, #100	@ 0x64
 8008ac8:	d901      	bls.n	8008ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e3d4      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ace:	4b63      	ldr	r3, [pc, #396]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCC_OscConfig+0xe8>
 8008ada:	e014      	b.n	8008b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008adc:	f7fc faca 	bl	8005074 <HAL_GetTick>
 8008ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ae4:	f7fc fac6 	bl	8005074 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b64      	cmp	r3, #100	@ 0x64
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e3c0      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008af6:	4b59      	ldr	r3, [pc, #356]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f0      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x110>
 8008b02:	e000      	b.n	8008b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 80ca 	beq.w	8008ca8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b14:	4b51      	ldr	r3, [pc, #324]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d007      	beq.n	8008b3a <HAL_RCC_OscConfig+0x166>
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	2b18      	cmp	r3, #24
 8008b2e:	d156      	bne.n	8008bde <HAL_RCC_OscConfig+0x20a>
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d151      	bne.n	8008bde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b3a:	4b48      	ldr	r3, [pc, #288]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_RCC_OscConfig+0x17e>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e392      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b52:	4b42      	ldr	r3, [pc, #264]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 0219 	bic.w	r2, r3, #25
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	493f      	ldr	r1, [pc, #252]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7fc fa86 	bl	8005074 <HAL_GetTick>
 8008b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b6c:	f7fc fa82 	bl	8005074 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e37c      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b7e:	4b37      	ldr	r3, [pc, #220]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0f0      	beq.n	8008b6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b8a:	f7fc fa7f 	bl	800508c <HAL_GetREVID>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d817      	bhi.n	8008bc8 <HAL_RCC_OscConfig+0x1f4>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b40      	cmp	r3, #64	@ 0x40
 8008b9e:	d108      	bne.n	8008bb2 <HAL_RCC_OscConfig+0x1de>
 8008ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bb0:	e07a      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	031b      	lsls	r3, r3, #12
 8008bc0:	4926      	ldr	r1, [pc, #152]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bc6:	e06f      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc8:	4b24      	ldr	r3, [pc, #144]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	061b      	lsls	r3, r3, #24
 8008bd6:	4921      	ldr	r1, [pc, #132]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bdc:	e064      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d047      	beq.n	8008c76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008be6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f023 0219 	bic.w	r2, r3, #25
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	491a      	ldr	r1, [pc, #104]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf8:	f7fc fa3c 	bl	8005074 <HAL_GetTick>
 8008bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c00:	f7fc fa38 	bl	8005074 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e332      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0304 	and.w	r3, r3, #4
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0f0      	beq.n	8008c00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c1e:	f7fc fa35 	bl	800508c <HAL_GetREVID>
 8008c22:	4603      	mov	r3, r0
 8008c24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d819      	bhi.n	8008c60 <HAL_RCC_OscConfig+0x28c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b40      	cmp	r3, #64	@ 0x40
 8008c32:	d108      	bne.n	8008c46 <HAL_RCC_OscConfig+0x272>
 8008c34:	4b09      	ldr	r3, [pc, #36]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008c3c:	4a07      	ldr	r2, [pc, #28]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c42:	6053      	str	r3, [r2, #4]
 8008c44:	e030      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2d4>
 8008c46:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	031b      	lsls	r3, r3, #12
 8008c54:	4901      	ldr	r1, [pc, #4]	@ (8008c5c <HAL_RCC_OscConfig+0x288>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	604b      	str	r3, [r1, #4]
 8008c5a:	e025      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2d4>
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	4b9a      	ldr	r3, [pc, #616]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	061b      	lsls	r3, r3, #24
 8008c6e:	4997      	ldr	r1, [pc, #604]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	604b      	str	r3, [r1, #4]
 8008c74:	e018      	b.n	8008ca8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c76:	4b95      	ldr	r3, [pc, #596]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a94      	ldr	r2, [pc, #592]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c82:	f7fc f9f7 	bl	8005074 <HAL_GetTick>
 8008c86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c8a:	f7fc f9f3 	bl	8005074 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e2ed      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c9c:	4b8b      	ldr	r3, [pc, #556]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1f0      	bne.n	8008c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 80a9 	beq.w	8008e08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cb6:	4b85      	ldr	r3, [pc, #532]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cc0:	4b82      	ldr	r3, [pc, #520]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d007      	beq.n	8008cdc <HAL_RCC_OscConfig+0x308>
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b18      	cmp	r3, #24
 8008cd0:	d13a      	bne.n	8008d48 <HAL_RCC_OscConfig+0x374>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d135      	bne.n	8008d48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x320>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	2b80      	cmp	r3, #128	@ 0x80
 8008cee:	d001      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e2c1      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cf4:	f7fc f9ca 	bl	800508c <HAL_GetREVID>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d817      	bhi.n	8008d32 <HAL_RCC_OscConfig+0x35e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d108      	bne.n	8008d1c <HAL_RCC_OscConfig+0x348>
 8008d0a:	4b70      	ldr	r3, [pc, #448]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008d12:	4a6e      	ldr	r2, [pc, #440]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d1a:	e075      	b.n	8008e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d1c:	4b6b      	ldr	r3, [pc, #428]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	069b      	lsls	r3, r3, #26
 8008d2a:	4968      	ldr	r1, [pc, #416]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d30:	e06a      	b.n	8008e08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d32:	4b66      	ldr	r3, [pc, #408]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	061b      	lsls	r3, r3, #24
 8008d40:	4962      	ldr	r1, [pc, #392]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d46:	e05f      	b.n	8008e08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d042      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d50:	4b5e      	ldr	r3, [pc, #376]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a5d      	ldr	r2, [pc, #372]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5c:	f7fc f98a 	bl	8005074 <HAL_GetTick>
 8008d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008d64:	f7fc f986 	bl	8005074 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e280      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d76:	4b55      	ldr	r3, [pc, #340]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d82:	f7fc f983 	bl	800508c <HAL_GetREVID>
 8008d86:	4603      	mov	r3, r0
 8008d88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d817      	bhi.n	8008dc0 <HAL_RCC_OscConfig+0x3ec>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d108      	bne.n	8008daa <HAL_RCC_OscConfig+0x3d6>
 8008d98:	4b4c      	ldr	r3, [pc, #304]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008da0:	4a4a      	ldr	r2, [pc, #296]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008da6:	6053      	str	r3, [r2, #4]
 8008da8:	e02e      	b.n	8008e08 <HAL_RCC_OscConfig+0x434>
 8008daa:	4b48      	ldr	r3, [pc, #288]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	069b      	lsls	r3, r3, #26
 8008db8:	4944      	ldr	r1, [pc, #272]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	604b      	str	r3, [r1, #4]
 8008dbe:	e023      	b.n	8008e08 <HAL_RCC_OscConfig+0x434>
 8008dc0:	4b42      	ldr	r3, [pc, #264]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	061b      	lsls	r3, r3, #24
 8008dce:	493f      	ldr	r1, [pc, #252]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60cb      	str	r3, [r1, #12]
 8008dd4:	e018      	b.n	8008e08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a3c      	ldr	r2, [pc, #240]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de2:	f7fc f947 	bl	8005074 <HAL_GetTick>
 8008de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008de8:	e008      	b.n	8008dfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008dea:	f7fc f943 	bl	8005074 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e23d      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dfc:	4b33      	ldr	r3, [pc, #204]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1f0      	bne.n	8008dea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d036      	beq.n	8008e82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d019      	beq.n	8008e50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e20:	4a2a      	ldr	r2, [pc, #168]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e22:	f043 0301 	orr.w	r3, r3, #1
 8008e26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e28:	f7fc f924 	bl	8005074 <HAL_GetTick>
 8008e2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e30:	f7fc f920 	bl	8005074 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e21a      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e42:	4b22      	ldr	r3, [pc, #136]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0f0      	beq.n	8008e30 <HAL_RCC_OscConfig+0x45c>
 8008e4e:	e018      	b.n	8008e82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e50:	4b1e      	ldr	r3, [pc, #120]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e54:	4a1d      	ldr	r2, [pc, #116]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e56:	f023 0301 	bic.w	r3, r3, #1
 8008e5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e5c:	f7fc f90a 	bl	8005074 <HAL_GetTick>
 8008e60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e64:	f7fc f906 	bl	8005074 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e200      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e76:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f0      	bne.n	8008e64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d039      	beq.n	8008f02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d01c      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ea2:	f7fc f8e7 	bl	8005074 <HAL_GetTick>
 8008ea6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eaa:	f7fc f8e3 	bl	8005074 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e1dd      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ebc:	4b03      	ldr	r3, [pc, #12]	@ (8008ecc <HAL_RCC_OscConfig+0x4f8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x4d6>
 8008ec8:	e01b      	b.n	8008f02 <HAL_RCC_OscConfig+0x52e>
 8008eca:	bf00      	nop
 8008ecc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a9a      	ldr	r2, [pc, #616]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008ed6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008edc:	f7fc f8ca 	bl	8005074 <HAL_GetTick>
 8008ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ee2:	e008      	b.n	8008ef6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ee4:	f7fc f8c6 	bl	8005074 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d901      	bls.n	8008ef6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e1c0      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ef6:	4b92      	ldr	r3, [pc, #584]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f0      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8081 	beq.w	8009012 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f10:	4b8c      	ldr	r3, [pc, #560]	@ (8009144 <HAL_RCC_OscConfig+0x770>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a8b      	ldr	r2, [pc, #556]	@ (8009144 <HAL_RCC_OscConfig+0x770>)
 8008f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f1c:	f7fc f8aa 	bl	8005074 <HAL_GetTick>
 8008f20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f22:	e008      	b.n	8008f36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f24:	f7fc f8a6 	bl	8005074 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b64      	cmp	r3, #100	@ 0x64
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e1a0      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f36:	4b83      	ldr	r3, [pc, #524]	@ (8009144 <HAL_RCC_OscConfig+0x770>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0f0      	beq.n	8008f24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d106      	bne.n	8008f58 <HAL_RCC_OscConfig+0x584>
 8008f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f56:	e02d      	b.n	8008fb4 <HAL_RCC_OscConfig+0x5e0>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10c      	bne.n	8008f7a <HAL_RCC_OscConfig+0x5a6>
 8008f60:	4b77      	ldr	r3, [pc, #476]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f64:	4a76      	ldr	r2, [pc, #472]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f6c:	4b74      	ldr	r3, [pc, #464]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f70:	4a73      	ldr	r2, [pc, #460]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f72:	f023 0304 	bic.w	r3, r3, #4
 8008f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f78:	e01c      	b.n	8008fb4 <HAL_RCC_OscConfig+0x5e0>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	d10c      	bne.n	8008f9c <HAL_RCC_OscConfig+0x5c8>
 8008f82:	4b6f      	ldr	r3, [pc, #444]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f86:	4a6e      	ldr	r2, [pc, #440]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f88:	f043 0304 	orr.w	r3, r3, #4
 8008f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f92:	4a6b      	ldr	r2, [pc, #428]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f9a:	e00b      	b.n	8008fb4 <HAL_RCC_OscConfig+0x5e0>
 8008f9c:	4b68      	ldr	r3, [pc, #416]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa0:	4a67      	ldr	r2, [pc, #412]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008fa2:	f023 0301 	bic.w	r3, r3, #1
 8008fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fa8:	4b65      	ldr	r3, [pc, #404]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fac:	4a64      	ldr	r2, [pc, #400]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008fae:	f023 0304 	bic.w	r3, r3, #4
 8008fb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d015      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fbc:	f7fc f85a 	bl	8005074 <HAL_GetTick>
 8008fc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fc2:	e00a      	b.n	8008fda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fc4:	f7fc f856 	bl	8005074 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e14e      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fda:	4b59      	ldr	r3, [pc, #356]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8008fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0ee      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x5f0>
 8008fe6:	e014      	b.n	8009012 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe8:	f7fc f844 	bl	8005074 <HAL_GetTick>
 8008fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fee:	e00a      	b.n	8009006 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ff0:	f7fc f840 	bl	8005074 <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e138      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009006:	4b4e      	ldr	r3, [pc, #312]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1ee      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 812d 	beq.w	8009276 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800901c:	4b48      	ldr	r3, [pc, #288]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009024:	2b18      	cmp	r3, #24
 8009026:	f000 80bd 	beq.w	80091a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902e:	2b02      	cmp	r3, #2
 8009030:	f040 809e 	bne.w	8009170 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009034:	4b42      	ldr	r3, [pc, #264]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a41      	ldr	r2, [pc, #260]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 800903a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800903e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7fc f818 	bl	8005074 <HAL_GetTick>
 8009044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009048:	f7fc f814 	bl	8005074 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e10e      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800905a:	4b39      	ldr	r3, [pc, #228]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009066:	4b36      	ldr	r3, [pc, #216]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800906a:	4b37      	ldr	r3, [pc, #220]	@ (8009148 <HAL_RCC_OscConfig+0x774>)
 800906c:	4013      	ands	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009076:	0112      	lsls	r2, r2, #4
 8009078:	430a      	orrs	r2, r1
 800907a:	4931      	ldr	r1, [pc, #196]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009084:	3b01      	subs	r3, #1
 8009086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908e:	3b01      	subs	r3, #1
 8009090:	025b      	lsls	r3, r3, #9
 8009092:	b29b      	uxth	r3, r3
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909a:	3b01      	subs	r3, #1
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a8:	3b01      	subs	r3, #1
 80090aa:	061b      	lsls	r3, r3, #24
 80090ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090b0:	4923      	ldr	r1, [pc, #140]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80090b6:	4b22      	ldr	r3, [pc, #136]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	4a21      	ldr	r2, [pc, #132]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090c6:	4b21      	ldr	r3, [pc, #132]	@ (800914c <HAL_RCC_OscConfig+0x778>)
 80090c8:	4013      	ands	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80090ce:	00d2      	lsls	r2, r2, #3
 80090d0:	491b      	ldr	r1, [pc, #108]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	f023 020c 	bic.w	r2, r3, #12
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e2:	4917      	ldr	r1, [pc, #92]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090e8:	4b15      	ldr	r3, [pc, #84]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	f023 0202 	bic.w	r2, r3, #2
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f4:	4912      	ldr	r1, [pc, #72]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090fa:	4b11      	ldr	r3, [pc, #68]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	4a10      	ldr	r2, [pc, #64]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009106:	4b0e      	ldr	r3, [pc, #56]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910a:	4a0d      	ldr	r2, [pc, #52]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 800910c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009112:	4b0b      	ldr	r3, [pc, #44]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	4a0a      	ldr	r2, [pc, #40]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800911c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800911e:	4b08      	ldr	r3, [pc, #32]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009122:	4a07      	ldr	r2, [pc, #28]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009124:	f043 0301 	orr.w	r3, r3, #1
 8009128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800912a:	4b05      	ldr	r3, [pc, #20]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a04      	ldr	r2, [pc, #16]	@ (8009140 <HAL_RCC_OscConfig+0x76c>)
 8009130:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009136:	f7fb ff9d 	bl	8005074 <HAL_GetTick>
 800913a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800913c:	e011      	b.n	8009162 <HAL_RCC_OscConfig+0x78e>
 800913e:	bf00      	nop
 8009140:	58024400 	.word	0x58024400
 8009144:	58024800 	.word	0x58024800
 8009148:	fffffc0c 	.word	0xfffffc0c
 800914c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009150:	f7fb ff90 	bl	8005074 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e08a      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009162:	4b47      	ldr	r3, [pc, #284]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0f0      	beq.n	8009150 <HAL_RCC_OscConfig+0x77c>
 800916e:	e082      	b.n	8009276 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009170:	4b43      	ldr	r3, [pc, #268]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a42      	ldr	r2, [pc, #264]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800917a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917c:	f7fb ff7a 	bl	8005074 <HAL_GetTick>
 8009180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009182:	e008      	b.n	8009196 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009184:	f7fb ff76 	bl	8005074 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e070      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009196:	4b3a      	ldr	r3, [pc, #232]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f0      	bne.n	8009184 <HAL_RCC_OscConfig+0x7b0>
 80091a2:	e068      	b.n	8009276 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80091a4:	4b36      	ldr	r3, [pc, #216]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80091aa:	4b35      	ldr	r3, [pc, #212]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d031      	beq.n	800921c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f003 0203 	and.w	r2, r3, #3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d12a      	bne.n	800921c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	091b      	lsrs	r3, r3, #4
 80091ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d122      	bne.n	800921c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d11a      	bne.n	800921c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	0a5b      	lsrs	r3, r3, #9
 80091ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d111      	bne.n	800921c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	0c1b      	lsrs	r3, r3, #16
 80091fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009204:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009206:	429a      	cmp	r2, r3
 8009208:	d108      	bne.n	800921c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009216:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009218:	429a      	cmp	r2, r3
 800921a:	d001      	beq.n	8009220 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e02b      	b.n	8009278 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009220:	4b17      	ldr	r3, [pc, #92]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009224:	08db      	lsrs	r3, r3, #3
 8009226:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800922a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	429a      	cmp	r2, r3
 8009234:	d01f      	beq.n	8009276 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009236:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923a:	4a11      	ldr	r2, [pc, #68]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 800923c:	f023 0301 	bic.w	r3, r3, #1
 8009240:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009242:	f7fb ff17 	bl	8005074 <HAL_GetTick>
 8009246:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009248:	bf00      	nop
 800924a:	f7fb ff13 	bl	8005074 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	4293      	cmp	r3, r2
 8009254:	d0f9      	beq.n	800924a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009256:	4b0a      	ldr	r3, [pc, #40]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800925a:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <HAL_RCC_OscConfig+0x8b0>)
 800925c:	4013      	ands	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	4906      	ldr	r1, [pc, #24]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009266:	4313      	orrs	r3, r2
 8009268:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800926a:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	4a04      	ldr	r2, [pc, #16]	@ (8009280 <HAL_RCC_OscConfig+0x8ac>)
 8009270:	f043 0301 	orr.w	r3, r3, #1
 8009274:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3730      	adds	r7, #48	@ 0x30
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58024400 	.word	0x58024400
 8009284:	ffff0007 	.word	0xffff0007

08009288 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e19c      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800929c:	4b8a      	ldr	r3, [pc, #552]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d910      	bls.n	80092cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092aa:	4b87      	ldr	r3, [pc, #540]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f023 020f 	bic.w	r2, r3, #15
 80092b2:	4985      	ldr	r1, [pc, #532]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ba:	4b83      	ldr	r3, [pc, #524]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 030f 	and.w	r3, r3, #15
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d001      	beq.n	80092cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e184      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d010      	beq.n	80092fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	4b7b      	ldr	r3, [pc, #492]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d908      	bls.n	80092fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092e8:	4b78      	ldr	r3, [pc, #480]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	4975      	ldr	r1, [pc, #468]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d010      	beq.n	8009328 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	4b70      	ldr	r3, [pc, #448]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009312:	429a      	cmp	r2, r3
 8009314:	d908      	bls.n	8009328 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009316:	4b6d      	ldr	r3, [pc, #436]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	496a      	ldr	r1, [pc, #424]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009324:	4313      	orrs	r3, r2
 8009326:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b00      	cmp	r3, #0
 8009332:	d010      	beq.n	8009356 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	4b64      	ldr	r3, [pc, #400]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009340:	429a      	cmp	r2, r3
 8009342:	d908      	bls.n	8009356 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009344:	4b61      	ldr	r3, [pc, #388]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	495e      	ldr	r1, [pc, #376]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009352:	4313      	orrs	r3, r2
 8009354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d010      	beq.n	8009384 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69da      	ldr	r2, [r3, #28]
 8009366:	4b59      	ldr	r3, [pc, #356]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800936e:	429a      	cmp	r2, r3
 8009370:	d908      	bls.n	8009384 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009372:	4b56      	ldr	r3, [pc, #344]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	4953      	ldr	r1, [pc, #332]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009380:	4313      	orrs	r3, r2
 8009382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d010      	beq.n	80093b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	4b4d      	ldr	r3, [pc, #308]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	429a      	cmp	r2, r3
 800939e:	d908      	bls.n	80093b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093a0:	4b4a      	ldr	r3, [pc, #296]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	f023 020f 	bic.w	r2, r3, #15
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	4947      	ldr	r1, [pc, #284]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d055      	beq.n	800946a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80093be:	4b43      	ldr	r3, [pc, #268]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	4940      	ldr	r1, [pc, #256]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d107      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093d8:	4b3c      	ldr	r3, [pc, #240]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d121      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0f6      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d107      	bne.n	8009400 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093f0:	4b36      	ldr	r3, [pc, #216]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d115      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0ea      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d107      	bne.n	8009418 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009408:	4b30      	ldr	r3, [pc, #192]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e0de      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009418:	4b2c      	ldr	r3, [pc, #176]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0d6      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009428:	4b28      	ldr	r3, [pc, #160]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f023 0207 	bic.w	r2, r3, #7
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4925      	ldr	r1, [pc, #148]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009436:	4313      	orrs	r3, r2
 8009438:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800943a:	f7fb fe1b 	bl	8005074 <HAL_GetTick>
 800943e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009440:	e00a      	b.n	8009458 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009442:	f7fb fe17 	bl	8005074 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009450:	4293      	cmp	r3, r2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e0be      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009458:	4b1c      	ldr	r3, [pc, #112]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	429a      	cmp	r2, r3
 8009468:	d1eb      	bne.n	8009442 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	4b14      	ldr	r3, [pc, #80]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	429a      	cmp	r2, r3
 8009484:	d208      	bcs.n	8009498 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009486:	4b11      	ldr	r3, [pc, #68]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	f023 020f 	bic.w	r2, r3, #15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	490e      	ldr	r1, [pc, #56]	@ (80094cc <HAL_RCC_ClockConfig+0x244>)
 8009494:	4313      	orrs	r3, r2
 8009496:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009498:	4b0b      	ldr	r3, [pc, #44]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d214      	bcs.n	80094d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094a6:	4b08      	ldr	r3, [pc, #32]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f023 020f 	bic.w	r2, r3, #15
 80094ae:	4906      	ldr	r1, [pc, #24]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094b6:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <HAL_RCC_ClockConfig+0x240>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d005      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e086      	b.n	80095d6 <HAL_RCC_ClockConfig+0x34e>
 80094c8:	52002000 	.word	0x52002000
 80094cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d010      	beq.n	80094fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	4b3f      	ldr	r3, [pc, #252]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d208      	bcs.n	80094fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094ec:	4b3c      	ldr	r3, [pc, #240]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	4939      	ldr	r1, [pc, #228]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 0308 	and.w	r3, r3, #8
 8009506:	2b00      	cmp	r3, #0
 8009508:	d010      	beq.n	800952c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695a      	ldr	r2, [r3, #20]
 800950e:	4b34      	ldr	r3, [pc, #208]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009516:	429a      	cmp	r2, r3
 8009518:	d208      	bcs.n	800952c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800951a:	4b31      	ldr	r3, [pc, #196]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	492e      	ldr	r1, [pc, #184]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009528:	4313      	orrs	r3, r2
 800952a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0310 	and.w	r3, r3, #16
 8009534:	2b00      	cmp	r3, #0
 8009536:	d010      	beq.n	800955a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	4b28      	ldr	r3, [pc, #160]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009544:	429a      	cmp	r2, r3
 8009546:	d208      	bcs.n	800955a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009548:	4b25      	ldr	r3, [pc, #148]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	4922      	ldr	r1, [pc, #136]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009556:	4313      	orrs	r3, r2
 8009558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d010      	beq.n	8009588 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69da      	ldr	r2, [r3, #28]
 800956a:	4b1d      	ldr	r3, [pc, #116]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009572:	429a      	cmp	r2, r3
 8009574:	d208      	bcs.n	8009588 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009576:	4b1a      	ldr	r3, [pc, #104]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	4917      	ldr	r1, [pc, #92]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009584:	4313      	orrs	r3, r2
 8009586:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009588:	f000 f834 	bl	80095f4 <HAL_RCC_GetSysClockFreq>
 800958c:	4602      	mov	r2, r0
 800958e:	4b14      	ldr	r3, [pc, #80]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	4912      	ldr	r1, [pc, #72]	@ (80095e4 <HAL_RCC_ClockConfig+0x35c>)
 800959a:	5ccb      	ldrb	r3, [r1, r3]
 800959c:	f003 031f 	and.w	r3, r3, #31
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095a6:	4b0e      	ldr	r3, [pc, #56]	@ (80095e0 <HAL_RCC_ClockConfig+0x358>)
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	4a0d      	ldr	r2, [pc, #52]	@ (80095e4 <HAL_RCC_ClockConfig+0x35c>)
 80095b0:	5cd3      	ldrb	r3, [r2, r3]
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	fa22 f303 	lsr.w	r3, r2, r3
 80095bc:	4a0a      	ldr	r2, [pc, #40]	@ (80095e8 <HAL_RCC_ClockConfig+0x360>)
 80095be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095c0:	4a0a      	ldr	r2, [pc, #40]	@ (80095ec <HAL_RCC_ClockConfig+0x364>)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80095c6:	4b0a      	ldr	r3, [pc, #40]	@ (80095f0 <HAL_RCC_ClockConfig+0x368>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f004 f99a 	bl	800d904 <HAL_InitTick>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	58024400 	.word	0x58024400
 80095e4:	08012bb8 	.word	0x08012bb8
 80095e8:	24000064 	.word	0x24000064
 80095ec:	24000060 	.word	0x24000060
 80095f0:	24000080 	.word	0x24000080

080095f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b089      	sub	sp, #36	@ 0x24
 80095f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095fa:	4bb3      	ldr	r3, [pc, #716]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009602:	2b18      	cmp	r3, #24
 8009604:	f200 8155 	bhi.w	80098b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009608:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <HAL_RCC_GetSysClockFreq+0x1c>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009675 	.word	0x08009675
 8009614:	080098b3 	.word	0x080098b3
 8009618:	080098b3 	.word	0x080098b3
 800961c:	080098b3 	.word	0x080098b3
 8009620:	080098b3 	.word	0x080098b3
 8009624:	080098b3 	.word	0x080098b3
 8009628:	080098b3 	.word	0x080098b3
 800962c:	080098b3 	.word	0x080098b3
 8009630:	0800969b 	.word	0x0800969b
 8009634:	080098b3 	.word	0x080098b3
 8009638:	080098b3 	.word	0x080098b3
 800963c:	080098b3 	.word	0x080098b3
 8009640:	080098b3 	.word	0x080098b3
 8009644:	080098b3 	.word	0x080098b3
 8009648:	080098b3 	.word	0x080098b3
 800964c:	080098b3 	.word	0x080098b3
 8009650:	080096a1 	.word	0x080096a1
 8009654:	080098b3 	.word	0x080098b3
 8009658:	080098b3 	.word	0x080098b3
 800965c:	080098b3 	.word	0x080098b3
 8009660:	080098b3 	.word	0x080098b3
 8009664:	080098b3 	.word	0x080098b3
 8009668:	080098b3 	.word	0x080098b3
 800966c:	080098b3 	.word	0x080098b3
 8009670:	080096a7 	.word	0x080096a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009674:	4b94      	ldr	r3, [pc, #592]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d009      	beq.n	8009694 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009680:	4b91      	ldr	r3, [pc, #580]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	08db      	lsrs	r3, r3, #3
 8009686:	f003 0303 	and.w	r3, r3, #3
 800968a:	4a90      	ldr	r2, [pc, #576]	@ (80098cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800968c:	fa22 f303 	lsr.w	r3, r2, r3
 8009690:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009692:	e111      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009694:	4b8d      	ldr	r3, [pc, #564]	@ (80098cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009696:	61bb      	str	r3, [r7, #24]
      break;
 8009698:	e10e      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800969a:	4b8d      	ldr	r3, [pc, #564]	@ (80098d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800969c:	61bb      	str	r3, [r7, #24]
      break;
 800969e:	e10b      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80096a0:	4b8c      	ldr	r3, [pc, #560]	@ (80098d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80096a2:	61bb      	str	r3, [r7, #24]
      break;
 80096a4:	e108      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096a6:	4b88      	ldr	r3, [pc, #544]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80096b0:	4b85      	ldr	r3, [pc, #532]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	091b      	lsrs	r3, r3, #4
 80096b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80096bc:	4b82      	ldr	r3, [pc, #520]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80096c6:	4b80      	ldr	r3, [pc, #512]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ca:	08db      	lsrs	r3, r3, #3
 80096cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	fb02 f303 	mul.w	r3, r2, r3
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80e1 	beq.w	80098ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	f000 8083 	beq.w	80097f8 <HAL_RCC_GetSysClockFreq+0x204>
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	f200 80a1 	bhi.w	800983c <HAL_RCC_GetSysClockFreq+0x248>
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <HAL_RCC_GetSysClockFreq+0x114>
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d056      	beq.n	80097b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009706:	e099      	b.n	800983c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009708:	4b6f      	ldr	r3, [pc, #444]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d02d      	beq.n	8009770 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009714:	4b6c      	ldr	r3, [pc, #432]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	08db      	lsrs	r3, r3, #3
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	4a6b      	ldr	r2, [pc, #428]	@ (80098cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
 8009724:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973e:	4b62      	ldr	r3, [pc, #392]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009752:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80098d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800976e:	e087      	b.n	8009880 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80098dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800977e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009782:	4b51      	ldr	r3, [pc, #324]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009792:	ed97 6a02 	vldr	s12, [r7, #8]
 8009796:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80098d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800979a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097b2:	e065      	b.n	8009880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	ee07 3a90 	vmov	s15, r3
 80097ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80098e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80097c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c6:	4b40      	ldr	r3, [pc, #256]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80097da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80098d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097f6:	e043      	b.n	8009880 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009802:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80098e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980a:	4b2f      	ldr	r3, [pc, #188]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800980c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981a:	ed97 6a02 	vldr	s12, [r7, #8]
 800981e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80098d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800982e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800983a:	e021      	b.n	8009880 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009846:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80098e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800984a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984e:	4b1e      	ldr	r3, [pc, #120]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009862:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80098d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800987e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009880:	4b11      	ldr	r3, [pc, #68]	@ (80098c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009884:	0a5b      	lsrs	r3, r3, #9
 8009886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800988a:	3301      	adds	r3, #1
 800988c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009898:	edd7 6a07 	vldr	s13, [r7, #28]
 800989c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a4:	ee17 3a90 	vmov	r3, s15
 80098a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80098aa:	e005      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61bb      	str	r3, [r7, #24]
      break;
 80098b0:	e002      	b.n	80098b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80098b2:	4b07      	ldr	r3, [pc, #28]	@ (80098d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80098b4:	61bb      	str	r3, [r7, #24]
      break;
 80098b6:	bf00      	nop
  }

  return sysclockfreq;
 80098b8:	69bb      	ldr	r3, [r7, #24]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3724      	adds	r7, #36	@ 0x24
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	003d0900 	.word	0x003d0900
 80098d4:	017d7840 	.word	0x017d7840
 80098d8:	46000000 	.word	0x46000000
 80098dc:	4c742400 	.word	0x4c742400
 80098e0:	4a742400 	.word	0x4a742400
 80098e4:	4bbebc20 	.word	0x4bbebc20

080098e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80098ee:	f7ff fe81 	bl	80095f4 <HAL_RCC_GetSysClockFreq>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4b10      	ldr	r3, [pc, #64]	@ (8009938 <HAL_RCC_GetHCLKFreq+0x50>)
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	0a1b      	lsrs	r3, r3, #8
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	490f      	ldr	r1, [pc, #60]	@ (800993c <HAL_RCC_GetHCLKFreq+0x54>)
 8009900:	5ccb      	ldrb	r3, [r1, r3]
 8009902:	f003 031f 	and.w	r3, r3, #31
 8009906:	fa22 f303 	lsr.w	r3, r2, r3
 800990a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800990c:	4b0a      	ldr	r3, [pc, #40]	@ (8009938 <HAL_RCC_GetHCLKFreq+0x50>)
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	4a09      	ldr	r2, [pc, #36]	@ (800993c <HAL_RCC_GetHCLKFreq+0x54>)
 8009916:	5cd3      	ldrb	r3, [r2, r3]
 8009918:	f003 031f 	and.w	r3, r3, #31
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	4a07      	ldr	r2, [pc, #28]	@ (8009940 <HAL_RCC_GetHCLKFreq+0x58>)
 8009924:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009926:	4a07      	ldr	r2, [pc, #28]	@ (8009944 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800992c:	4b04      	ldr	r3, [pc, #16]	@ (8009940 <HAL_RCC_GetHCLKFreq+0x58>)
 800992e:	681b      	ldr	r3, [r3, #0]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	58024400 	.word	0x58024400
 800993c:	08012bb8 	.word	0x08012bb8
 8009940:	24000064 	.word	0x24000064
 8009944:	24000060 	.word	0x24000060

08009948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800994c:	f7ff ffcc 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 8009950:	4602      	mov	r2, r0
 8009952:	4b06      	ldr	r3, [pc, #24]	@ (800996c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	091b      	lsrs	r3, r3, #4
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	4904      	ldr	r1, [pc, #16]	@ (8009970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800995e:	5ccb      	ldrb	r3, [r1, r3]
 8009960:	f003 031f 	and.w	r3, r3, #31
 8009964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009968:	4618      	mov	r0, r3
 800996a:	bd80      	pop	{r7, pc}
 800996c:	58024400 	.word	0x58024400
 8009970:	08012bb8 	.word	0x08012bb8

08009974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009978:	f7ff ffb6 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 800997c:	4602      	mov	r2, r0
 800997e:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	0a1b      	lsrs	r3, r3, #8
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	4904      	ldr	r1, [pc, #16]	@ (800999c <HAL_RCC_GetPCLK2Freq+0x28>)
 800998a:	5ccb      	ldrb	r3, [r1, r3]
 800998c:	f003 031f 	and.w	r3, r3, #31
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009994:	4618      	mov	r0, r3
 8009996:	bd80      	pop	{r7, pc}
 8009998:	58024400 	.word	0x58024400
 800999c:	08012bb8 	.word	0x08012bb8

080099a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	223f      	movs	r2, #63	@ 0x3f
 80099ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80099b0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f003 0207 	and.w	r2, r3, #7
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80099bc:	4b17      	ldr	r3, [pc, #92]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80099c8:	4b14      	ldr	r3, [pc, #80]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80099d4:	4b11      	ldr	r3, [pc, #68]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80099e0:	4b0e      	ldr	r3, [pc, #56]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80099ec:	4b0b      	ldr	r3, [pc, #44]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80099f8:	4b08      	ldr	r3, [pc, #32]	@ (8009a1c <HAL_RCC_GetClockConfig+0x7c>)
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009a04:	4b06      	ldr	r3, [pc, #24]	@ (8009a20 <HAL_RCC_GetClockConfig+0x80>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 020f 	and.w	r2, r3, #15
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	601a      	str	r2, [r3, #0]
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	58024400 	.word	0x58024400
 8009a20:	52002000 	.word	0x52002000

08009a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a28:	b0ca      	sub	sp, #296	@ 0x128
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a30:	2300      	movs	r3, #0
 8009a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009a48:	2500      	movs	r5, #0
 8009a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8009a4e:	d049      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a5a:	d02f      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a60:	d828      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a66:	d01a      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a6c:	d822      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a76:	d007      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a78:	e01c      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a7a:	4bb8      	ldr	r3, [pc, #736]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a86:	e01a      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	2102      	movs	r1, #2
 8009a90:	4618      	mov	r0, r3
 8009a92:	f002 fb61 	bl	800c158 <RCCEx_PLL2_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a9c:	e00f      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa2:	3328      	adds	r3, #40	@ 0x28
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 fc08 	bl	800c2bc <RCCEx_PLL3_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ab2:	e004      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aba:	e000      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10a      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ada:	e003      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009af0:	f04f 0900 	mov.w	r9, #0
 8009af4:	ea58 0309 	orrs.w	r3, r8, r9
 8009af8:	d047      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d82a      	bhi.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b04:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b21 	.word	0x08009b21
 8009b10:	08009b2f 	.word	0x08009b2f
 8009b14:	08009b45 	.word	0x08009b45
 8009b18:	08009b63 	.word	0x08009b63
 8009b1c:	08009b63 	.word	0x08009b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b20:	4b8e      	ldr	r3, [pc, #568]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	4a8d      	ldr	r2, [pc, #564]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b2c:	e01a      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b32:	3308      	adds	r3, #8
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f002 fb0e 	bl	800c158 <RCCEx_PLL2_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b42:	e00f      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b48:	3328      	adds	r3, #40	@ 0x28
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f002 fbb5 	bl	800c2bc <RCCEx_PLL3_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b58:	e004      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b60:	e000      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b70:	f023 0107 	bic.w	r1, r3, #7
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b7a:	4a78      	ldr	r2, [pc, #480]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b80:	e003      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009b96:	f04f 0b00 	mov.w	fp, #0
 8009b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009b9e:	d04c      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009baa:	d030      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb0:	d829      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bb4:	d02d      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bb8:	d825      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009bba:	2b80      	cmp	r3, #128	@ 0x80
 8009bbc:	d018      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009bbe:	2b80      	cmp	r3, #128	@ 0x80
 8009bc0:	d821      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009bc6:	2b40      	cmp	r3, #64	@ 0x40
 8009bc8:	d007      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009bca:	e01c      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bcc:	4b63      	ldr	r3, [pc, #396]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd0:	4a62      	ldr	r2, [pc, #392]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009bd8:	e01c      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	3308      	adds	r3, #8
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f002 fab8 	bl	800c158 <RCCEx_PLL2_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009bee:	e011      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf4:	3328      	adds	r3, #40	@ 0x28
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 fb5f 	bl	800c2bc <RCCEx_PLL3_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c04:	e006      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c0c:	e002      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c0e:	bf00      	nop
 8009c10:	e000      	b.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c30:	e003      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009c46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009c50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009c54:	460b      	mov	r3, r1
 8009c56:	4313      	orrs	r3, r2
 8009c58:	d053      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c66:	d035      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c6c:	d82e      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c72:	d031      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009c74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c78:	d828      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c7e:	d01a      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c84:	d822      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c8e:	d007      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009c90:	e01c      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c92:	4b32      	ldr	r3, [pc, #200]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c96:	4a31      	ldr	r2, [pc, #196]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c9e:	e01c      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f002 fa55 	bl	800c158 <RCCEx_PLL2_Config>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009cb4:	e011      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cba:	3328      	adds	r3, #40	@ 0x28
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f002 fafc 	bl	800c2bc <RCCEx_PLL3_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cca:	e006      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cd2:	e002      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009cd4:	bf00      	nop
 8009cd6:	e000      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10b      	bne.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cf8:	e003      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009d0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009d12:	2300      	movs	r3, #0
 8009d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009d18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	d056      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d2e:	d038      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d34:	d831      	bhi.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d3a:	d034      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d40:	d82b      	bhi.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d46:	d01d      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d4c:	d825      	bhi.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d006      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d56:	d00a      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009d58:	e01f      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d5a:	bf00      	nop
 8009d5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d60:	4ba2      	ldr	r3, [pc, #648]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d64:	4aa1      	ldr	r2, [pc, #644]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d6c:	e01c      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d72:	3308      	adds	r3, #8
 8009d74:	2100      	movs	r1, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 f9ee 	bl	800c158 <RCCEx_PLL2_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d82:	e011      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d88:	3328      	adds	r3, #40	@ 0x28
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f002 fa95 	bl	800c2bc <RCCEx_PLL3_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d98:	e006      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009da0:	e002      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009da2:	bf00      	nop
 8009da4:	e000      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10b      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009db0:	4b8e      	ldr	r3, [pc, #568]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dc6:	e003      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009de0:	2300      	movs	r3, #0
 8009de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009de6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009dea:	460b      	mov	r3, r1
 8009dec:	4313      	orrs	r3, r2
 8009dee:	d03a      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009df6:	2b30      	cmp	r3, #48	@ 0x30
 8009df8:	d01f      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009dfa:	2b30      	cmp	r3, #48	@ 0x30
 8009dfc:	d819      	bhi.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d00c      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	d815      	bhi.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d019      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009e0a:	2b10      	cmp	r3, #16
 8009e0c:	d111      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e0e:	4b77      	ldr	r3, [pc, #476]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	4a76      	ldr	r2, [pc, #472]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009e1a:	e011      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e20:	3308      	adds	r3, #8
 8009e22:	2102      	movs	r1, #2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f002 f997 	bl	800c158 <RCCEx_PLL2_Config>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009e30:	e006      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e38:	e002      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e3a:	bf00      	nop
 8009e3c:	e000      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e48:	4b68      	ldr	r3, [pc, #416]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e56:	4a65      	ldr	r2, [pc, #404]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009e72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e76:	2300      	movs	r3, #0
 8009e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4313      	orrs	r3, r2
 8009e84:	d051      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e90:	d035      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e96:	d82e      	bhi.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e9c:	d031      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ea2:	d828      	bhi.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ea8:	d01a      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eae:	d822      	bhi.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eb8:	d007      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009eba:	e01c      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ec8:	e01c      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ece:	3308      	adds	r3, #8
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f002 f940 	bl	800c158 <RCCEx_PLL2_Config>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ede:	e011      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee4:	3328      	adds	r3, #40	@ 0x28
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 f9e7 	bl	800c2bc <RCCEx_PLL3_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ef4:	e006      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009efc:	e002      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009efe:	bf00      	nop
 8009f00:	e000      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f0c:	4b37      	ldr	r3, [pc, #220]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f1a:	4a34      	ldr	r2, [pc, #208]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f20:	e003      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009f44:	460b      	mov	r3, r1
 8009f46:	4313      	orrs	r3, r2
 8009f48:	d056      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f54:	d033      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f5a:	d82c      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f60:	d02f      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f66:	d826      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f6c:	d02b      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f72:	d820      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f78:	d012      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f7e:	d81a      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d022      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f88:	d115      	bne.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8e:	3308      	adds	r3, #8
 8009f90:	2101      	movs	r1, #1
 8009f92:	4618      	mov	r0, r3
 8009f94:	f002 f8e0 	bl	800c158 <RCCEx_PLL2_Config>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009f9e:	e015      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa4:	3328      	adds	r3, #40	@ 0x28
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f002 f987 	bl	800c2bc <RCCEx_PLL3_Config>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009fb4:	e00a      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fbc:	e006      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fbe:	bf00      	nop
 8009fc0:	e004      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fc2:	bf00      	nop
 8009fc4:	e002      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10d      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fe2:	4a02      	ldr	r2, [pc, #8]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fe8:	e006      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009fea:	bf00      	nop
 8009fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a008:	2300      	movs	r3, #0
 800a00a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a00e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a012:	460b      	mov	r3, r1
 800a014:	4313      	orrs	r3, r2
 800a016:	d055      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a024:	d033      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a02a:	d82c      	bhi.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a030:	d02f      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a036:	d826      	bhi.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a03c:	d02b      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a03e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a042:	d820      	bhi.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a048:	d012      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a04a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a04e:	d81a      	bhi.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a050:	2b00      	cmp	r3, #0
 800a052:	d022      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a058:	d115      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	3308      	adds	r3, #8
 800a060:	2101      	movs	r1, #1
 800a062:	4618      	mov	r0, r3
 800a064:	f002 f878 	bl	800c158 <RCCEx_PLL2_Config>
 800a068:	4603      	mov	r3, r0
 800a06a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a06e:	e015      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a074:	3328      	adds	r3, #40	@ 0x28
 800a076:	2101      	movs	r1, #1
 800a078:	4618      	mov	r0, r3
 800a07a:	f002 f91f 	bl	800c2bc <RCCEx_PLL3_Config>
 800a07e:	4603      	mov	r3, r0
 800a080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a084:	e00a      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a08c:	e006      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a08e:	bf00      	nop
 800a090:	e004      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a092:	bf00      	nop
 800a094:	e002      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a096:	bf00      	nop
 800a098:	e000      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a09a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a09c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10b      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a0a4:	4ba3      	ldr	r3, [pc, #652]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a0b4:	4a9f      	ldr	r2, [pc, #636]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0ba:	e003      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a0da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	d037      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0ee:	d00e      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a0f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0f4:	d816      	bhi.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d018      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a0fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0fe:	d111      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a100:	4b8c      	ldr	r3, [pc, #560]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a104:	4a8b      	ldr	r2, [pc, #556]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a10a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a10c:	e00f      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a112:	3308      	adds	r3, #8
 800a114:	2101      	movs	r1, #1
 800a116:	4618      	mov	r0, r3
 800a118:	f002 f81e 	bl	800c158 <RCCEx_PLL2_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a122:	e004      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a12a:	e000      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a136:	4b7f      	ldr	r3, [pc, #508]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a13a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a144:	4a7b      	ldr	r2, [pc, #492]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a146:	430b      	orrs	r3, r1
 800a148:	6513      	str	r3, [r2, #80]	@ 0x50
 800a14a:	e003      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a164:	2300      	movs	r3, #0
 800a166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a16a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a16e:	460b      	mov	r3, r1
 800a170:	4313      	orrs	r3, r2
 800a172:	d039      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d81c      	bhi.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a17e:	a201      	add	r2, pc, #4	@ (adr r2, 800a184 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a1c1 	.word	0x0800a1c1
 800a188:	0800a195 	.word	0x0800a195
 800a18c:	0800a1a3 	.word	0x0800a1a3
 800a190:	0800a1c1 	.word	0x0800a1c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a194:	4b67      	ldr	r3, [pc, #412]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a198:	4a66      	ldr	r2, [pc, #408]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a19a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a19e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a1a0:	e00f      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	2102      	movs	r1, #2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f001 ffd4 	bl	800c158 <RCCEx_PLL2_Config>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a1b6:	e004      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1be:	e000      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a1c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10a      	bne.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1ca:	4b5a      	ldr	r3, [pc, #360]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ce:	f023 0103 	bic.w	r1, r3, #3
 800a1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1d8:	4a56      	ldr	r2, [pc, #344]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1de:	e003      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a1f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a1fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a202:	460b      	mov	r3, r1
 800a204:	4313      	orrs	r3, r2
 800a206:	f000 809f 	beq.w	800a348 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a20a:	4b4b      	ldr	r3, [pc, #300]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a4a      	ldr	r2, [pc, #296]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a216:	f7fa ff2d 	bl	8005074 <HAL_GetTick>
 800a21a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a21e:	e00b      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a220:	f7fa ff28 	bl	8005074 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b64      	cmp	r3, #100	@ 0x64
 800a22e:	d903      	bls.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a236:	e005      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a238:	4b3f      	ldr	r3, [pc, #252]	@ (800a338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0ed      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d179      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a24c:	4b39      	ldr	r3, [pc, #228]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a24e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a258:	4053      	eors	r3, r2
 800a25a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d015      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a262:	4b34      	ldr	r3, [pc, #208]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a26a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a26e:	4b31      	ldr	r3, [pc, #196]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a272:	4a30      	ldr	r2, [pc, #192]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a27a:	4b2e      	ldr	r3, [pc, #184]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a27e:	4a2d      	ldr	r2, [pc, #180]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a286:	4a2b      	ldr	r2, [pc, #172]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a28c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a29a:	d118      	bne.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a29c:	f7fa feea 	bl	8005074 <HAL_GetTick>
 800a2a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2a4:	e00d      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2a6:	f7fa fee5 	bl	8005074 <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a2b0:	1ad2      	subs	r2, r2, r3
 800a2b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d903      	bls.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a2c0:	e005      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0eb      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d129      	bne.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2e6:	d10e      	bne.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a2e8:	4b12      	ldr	r3, [pc, #72]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2f8:	091a      	lsrs	r2, r3, #4
 800a2fa:	4b10      	ldr	r3, [pc, #64]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	4a0d      	ldr	r2, [pc, #52]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a300:	430b      	orrs	r3, r1
 800a302:	6113      	str	r3, [r2, #16]
 800a304:	e005      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a306:	4b0b      	ldr	r3, [pc, #44]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	4a0a      	ldr	r2, [pc, #40]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a30c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a310:	6113      	str	r3, [r2, #16]
 800a312:	4b08      	ldr	r3, [pc, #32]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a31e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a322:	4a04      	ldr	r2, [pc, #16]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a324:	430b      	orrs	r3, r1
 800a326:	6713      	str	r3, [r2, #112]	@ 0x70
 800a328:	e00e      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a32a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a32e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a332:	e009      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a334:	58024400 	.word	0x58024400
 800a338:	58024800 	.word	0x58024800
 800a33c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f002 0301 	and.w	r3, r2, #1
 800a354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a35e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a362:	460b      	mov	r3, r1
 800a364:	4313      	orrs	r3, r2
 800a366:	f000 8089 	beq.w	800a47c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a370:	2b28      	cmp	r3, #40	@ 0x28
 800a372:	d86b      	bhi.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a374:	a201      	add	r2, pc, #4	@ (adr r2, 800a37c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a455 	.word	0x0800a455
 800a380:	0800a44d 	.word	0x0800a44d
 800a384:	0800a44d 	.word	0x0800a44d
 800a388:	0800a44d 	.word	0x0800a44d
 800a38c:	0800a44d 	.word	0x0800a44d
 800a390:	0800a44d 	.word	0x0800a44d
 800a394:	0800a44d 	.word	0x0800a44d
 800a398:	0800a44d 	.word	0x0800a44d
 800a39c:	0800a421 	.word	0x0800a421
 800a3a0:	0800a44d 	.word	0x0800a44d
 800a3a4:	0800a44d 	.word	0x0800a44d
 800a3a8:	0800a44d 	.word	0x0800a44d
 800a3ac:	0800a44d 	.word	0x0800a44d
 800a3b0:	0800a44d 	.word	0x0800a44d
 800a3b4:	0800a44d 	.word	0x0800a44d
 800a3b8:	0800a44d 	.word	0x0800a44d
 800a3bc:	0800a437 	.word	0x0800a437
 800a3c0:	0800a44d 	.word	0x0800a44d
 800a3c4:	0800a44d 	.word	0x0800a44d
 800a3c8:	0800a44d 	.word	0x0800a44d
 800a3cc:	0800a44d 	.word	0x0800a44d
 800a3d0:	0800a44d 	.word	0x0800a44d
 800a3d4:	0800a44d 	.word	0x0800a44d
 800a3d8:	0800a44d 	.word	0x0800a44d
 800a3dc:	0800a455 	.word	0x0800a455
 800a3e0:	0800a44d 	.word	0x0800a44d
 800a3e4:	0800a44d 	.word	0x0800a44d
 800a3e8:	0800a44d 	.word	0x0800a44d
 800a3ec:	0800a44d 	.word	0x0800a44d
 800a3f0:	0800a44d 	.word	0x0800a44d
 800a3f4:	0800a44d 	.word	0x0800a44d
 800a3f8:	0800a44d 	.word	0x0800a44d
 800a3fc:	0800a455 	.word	0x0800a455
 800a400:	0800a44d 	.word	0x0800a44d
 800a404:	0800a44d 	.word	0x0800a44d
 800a408:	0800a44d 	.word	0x0800a44d
 800a40c:	0800a44d 	.word	0x0800a44d
 800a410:	0800a44d 	.word	0x0800a44d
 800a414:	0800a44d 	.word	0x0800a44d
 800a418:	0800a44d 	.word	0x0800a44d
 800a41c:	0800a455 	.word	0x0800a455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a424:	3308      	adds	r3, #8
 800a426:	2101      	movs	r1, #1
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 fe95 	bl	800c158 <RCCEx_PLL2_Config>
 800a42e:	4603      	mov	r3, r0
 800a430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a434:	e00f      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43a:	3328      	adds	r3, #40	@ 0x28
 800a43c:	2101      	movs	r1, #1
 800a43e:	4618      	mov	r0, r3
 800a440:	f001 ff3c 	bl	800c2bc <RCCEx_PLL3_Config>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a44a:	e004      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a452:	e000      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a454:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10a      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a45e:	4bbf      	ldr	r3, [pc, #764]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a46a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a46c:	4abb      	ldr	r2, [pc, #748]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a46e:	430b      	orrs	r3, r1
 800a470:	6553      	str	r3, [r2, #84]	@ 0x54
 800a472:	e003      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f002 0302 	and.w	r3, r2, #2
 800a488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a48c:	2300      	movs	r3, #0
 800a48e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a496:	460b      	mov	r3, r1
 800a498:	4313      	orrs	r3, r2
 800a49a:	d041      	beq.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	d824      	bhi.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4f9 	.word	0x0800a4f9
 800a4b0:	0800a4c5 	.word	0x0800a4c5
 800a4b4:	0800a4db 	.word	0x0800a4db
 800a4b8:	0800a4f9 	.word	0x0800a4f9
 800a4bc:	0800a4f9 	.word	0x0800a4f9
 800a4c0:	0800a4f9 	.word	0x0800a4f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f001 fe43 	bl	800c158 <RCCEx_PLL2_Config>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4d8:	e00f      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4de:	3328      	adds	r3, #40	@ 0x28
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f001 feea 	bl	800c2bc <RCCEx_PLL3_Config>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4ee:	e004      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4f6:	e000      	b.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10a      	bne.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a502:	4b96      	ldr	r3, [pc, #600]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a506:	f023 0107 	bic.w	r1, r3, #7
 800a50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a50e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a510:	4a92      	ldr	r2, [pc, #584]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a512:	430b      	orrs	r3, r1
 800a514:	6553      	str	r3, [r2, #84]	@ 0x54
 800a516:	e003      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a51c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f002 0304 	and.w	r3, r2, #4
 800a52c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a530:	2300      	movs	r3, #0
 800a532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d044      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a548:	2b05      	cmp	r3, #5
 800a54a:	d825      	bhi.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a54c:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a5a1 	.word	0x0800a5a1
 800a558:	0800a56d 	.word	0x0800a56d
 800a55c:	0800a583 	.word	0x0800a583
 800a560:	0800a5a1 	.word	0x0800a5a1
 800a564:	0800a5a1 	.word	0x0800a5a1
 800a568:	0800a5a1 	.word	0x0800a5a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a570:	3308      	adds	r3, #8
 800a572:	2101      	movs	r1, #1
 800a574:	4618      	mov	r0, r3
 800a576:	f001 fdef 	bl	800c158 <RCCEx_PLL2_Config>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a580:	e00f      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a586:	3328      	adds	r3, #40	@ 0x28
 800a588:	2101      	movs	r1, #1
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 fe96 	bl	800c2bc <RCCEx_PLL3_Config>
 800a590:	4603      	mov	r3, r0
 800a592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a596:	e004      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a59e:	e000      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a5a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10b      	bne.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a5aa:	4b6c      	ldr	r3, [pc, #432]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ae:	f023 0107 	bic.w	r1, r3, #7
 800a5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5ba:	4a68      	ldr	r2, [pc, #416]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5c0:	e003      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f002 0320 	and.w	r3, r2, #32
 800a5d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	d055      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5f6:	d033      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a5f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5fc:	d82c      	bhi.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a602:	d02f      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a608:	d826      	bhi.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a60a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a60e:	d02b      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a614:	d820      	bhi.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a61a:	d012      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a61c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a620:	d81a      	bhi.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d022      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a62a:	d115      	bne.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a630:	3308      	adds	r3, #8
 800a632:	2100      	movs	r1, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f001 fd8f 	bl	800c158 <RCCEx_PLL2_Config>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a640:	e015      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a646:	3328      	adds	r3, #40	@ 0x28
 800a648:	2102      	movs	r1, #2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f001 fe36 	bl	800c2bc <RCCEx_PLL3_Config>
 800a650:	4603      	mov	r3, r0
 800a652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a656:	e00a      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a65e:	e006      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a660:	bf00      	nop
 800a662:	e004      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a664:	bf00      	nop
 800a666:	e002      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a668:	bf00      	nop
 800a66a:	e000      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a676:	4b39      	ldr	r3, [pc, #228]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a67a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a686:	4a35      	ldr	r2, [pc, #212]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a688:	430b      	orrs	r3, r1
 800a68a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a68c:	e003      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a6a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	d058      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a6c2:	d033      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a6c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a6c8:	d82c      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ce:	d02f      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a6d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6d4:	d826      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6da:	d02b      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a6dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6e0:	d820      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6e6:	d012      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a6e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6ec:	d81a      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d022      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6f6:	d115      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f001 fd29 	bl	800c158 <RCCEx_PLL2_Config>
 800a706:	4603      	mov	r3, r0
 800a708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a70c:	e015      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a712:	3328      	adds	r3, #40	@ 0x28
 800a714:	2102      	movs	r1, #2
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fdd0 	bl	800c2bc <RCCEx_PLL3_Config>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a722:	e00a      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a72a:	e006      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a72c:	bf00      	nop
 800a72e:	e004      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a730:	bf00      	nop
 800a732:	e002      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a734:	bf00      	nop
 800a736:	e000      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10e      	bne.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a742:	4b06      	ldr	r3, [pc, #24]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a74e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a752:	4a02      	ldr	r2, [pc, #8]	@ (800a75c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a754:	430b      	orrs	r3, r1
 800a756:	6593      	str	r3, [r2, #88]	@ 0x58
 800a758:	e006      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a75a:	bf00      	nop
 800a75c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a778:	2300      	movs	r3, #0
 800a77a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a77e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a782:	460b      	mov	r3, r1
 800a784:	4313      	orrs	r3, r2
 800a786:	d055      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a78c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a794:	d033      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a79a:	d82c      	bhi.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a79c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a0:	d02f      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a7a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a6:	d826      	bhi.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a7ac:	d02b      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a7ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a7b2:	d820      	bhi.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7b8:	d012      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a7ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7be:	d81a      	bhi.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d022      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a7c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7c8:	d115      	bne.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 fcc0 	bl	800c158 <RCCEx_PLL2_Config>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7de:	e015      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e4:	3328      	adds	r3, #40	@ 0x28
 800a7e6:	2102      	movs	r1, #2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f001 fd67 	bl	800c2bc <RCCEx_PLL3_Config>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7f4:	e00a      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7fc:	e006      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a7fe:	bf00      	nop
 800a800:	e004      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a802:	bf00      	nop
 800a804:	e002      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a806:	bf00      	nop
 800a808:	e000      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a80c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10b      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a814:	4ba1      	ldr	r3, [pc, #644]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a824:	4a9d      	ldr	r2, [pc, #628]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a826:	430b      	orrs	r3, r1
 800a828:	6593      	str	r3, [r2, #88]	@ 0x58
 800a82a:	e003      	b.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f002 0308 	and.w	r3, r2, #8
 800a840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a844:	2300      	movs	r3, #0
 800a846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a84a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a84e:	460b      	mov	r3, r1
 800a850:	4313      	orrs	r3, r2
 800a852:	d01e      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a85c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a860:	d10c      	bne.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a866:	3328      	adds	r3, #40	@ 0x28
 800a868:	2102      	movs	r1, #2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 fd26 	bl	800c2bc <RCCEx_PLL3_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a87c:	4b87      	ldr	r3, [pc, #540]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a88c:	4a83      	ldr	r2, [pc, #524]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a88e:	430b      	orrs	r3, r1
 800a890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f002 0310 	and.w	r3, r2, #16
 800a89e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a8a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	d01e      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8be:	d10c      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c4:	3328      	adds	r3, #40	@ 0x28
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 fcf7 	bl	800c2bc <RCCEx_PLL3_Config>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8da:	4b70      	ldr	r3, [pc, #448]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ea:	4a6c      	ldr	r2, [pc, #432]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8ec:	430b      	orrs	r3, r1
 800a8ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a8fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a900:	2300      	movs	r3, #0
 800a902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a90a:	460b      	mov	r3, r1
 800a90c:	4313      	orrs	r3, r2
 800a90e:	d03e      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a91c:	d022      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a91e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a922:	d81b      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a92c:	d00b      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a92e:	e015      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a934:	3308      	adds	r3, #8
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 fc0d 	bl	800c158 <RCCEx_PLL2_Config>
 800a93e:	4603      	mov	r3, r0
 800a940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a944:	e00f      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a94a:	3328      	adds	r3, #40	@ 0x28
 800a94c:	2102      	movs	r1, #2
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 fcb4 	bl	800c2bc <RCCEx_PLL3_Config>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a95a:	e004      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a962:	e000      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a964:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10b      	bne.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a96e:	4b4b      	ldr	r3, [pc, #300]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a97a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a97e:	4a47      	ldr	r2, [pc, #284]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a980:	430b      	orrs	r3, r1
 800a982:	6593      	str	r3, [r2, #88]	@ 0x58
 800a984:	e003      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a98a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a99a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a99c:	2300      	movs	r3, #0
 800a99e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	d03b      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9b6:	d01f      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a9b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9bc:	d818      	bhi.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a9be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9c2:	d003      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a9c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9c8:	d007      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a9ca:	e011      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9cc:	4b33      	ldr	r3, [pc, #204]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d0:	4a32      	ldr	r2, [pc, #200]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9d8:	e00f      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9de:	3328      	adds	r3, #40	@ 0x28
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fc6a 	bl	800c2bc <RCCEx_PLL3_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9ee:	e004      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a9f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10b      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa02:	4b26      	ldr	r3, [pc, #152]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa12:	4a22      	ldr	r2, [pc, #136]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa18:	e003      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aa2e:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa30:	2300      	movs	r3, #0
 800aa32:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d034      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aa48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa4c:	d007      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aa4e:	e011      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa50:	4b12      	ldr	r3, [pc, #72]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa54:	4a11      	ldr	r2, [pc, #68]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa5c:	e00e      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa62:	3308      	adds	r3, #8
 800aa64:	2102      	movs	r1, #2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 fb76 	bl	800c158 <RCCEx_PLL2_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa72:	e003      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10d      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa84:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa92:	4a02      	ldr	r2, [pc, #8]	@ (800aa9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa94:	430b      	orrs	r3, r1
 800aa96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa98:	e006      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aa9a:	bf00      	nop
 800aa9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aaa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800aab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aab6:	2300      	movs	r3, #0
 800aab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aaba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800aabe:	460b      	mov	r3, r1
 800aac0:	4313      	orrs	r3, r2
 800aac2:	d00c      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aac8:	3328      	adds	r3, #40	@ 0x28
 800aaca:	2102      	movs	r1, #2
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 fbf5 	bl	800c2bc <RCCEx_PLL3_Config>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aaea:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaec:	2300      	movs	r3, #0
 800aaee:	667b      	str	r3, [r7, #100]	@ 0x64
 800aaf0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	d038      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab06:	d018      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ab08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab0c:	d811      	bhi.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab12:	d014      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ab14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab18:	d80b      	bhi.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d011      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ab1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab22:	d106      	bne.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab24:	4bc3      	ldr	r3, [pc, #780]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	4ac2      	ldr	r2, [pc, #776]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ab30:	e008      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab38:	e004      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab3a:	bf00      	nop
 800ab3c:	e002      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab3e:	bf00      	nop
 800ab40:	e000      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10b      	bne.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab4c:	4bb9      	ldr	r3, [pc, #740]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab5c:	4ab5      	ldr	r2, [pc, #724]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab5e:	430b      	orrs	r3, r1
 800ab60:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab62:	e003      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ab78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ab82:	460b      	mov	r3, r1
 800ab84:	4313      	orrs	r3, r2
 800ab86:	d009      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab88:	4baa      	ldr	r3, [pc, #680]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab96:	4aa7      	ldr	r2, [pc, #668]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab98:	430b      	orrs	r3, r1
 800ab9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800aba8:	653b      	str	r3, [r7, #80]	@ 0x50
 800abaa:	2300      	movs	r3, #0
 800abac:	657b      	str	r3, [r7, #84]	@ 0x54
 800abae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800abb2:	460b      	mov	r3, r1
 800abb4:	4313      	orrs	r3, r2
 800abb6:	d00a      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800abb8:	4b9e      	ldr	r3, [pc, #632]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800abc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800abc8:	4a9a      	ldr	r2, [pc, #616]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abca:	430b      	orrs	r3, r1
 800abcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800abce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800abda:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abdc:	2300      	movs	r3, #0
 800abde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abe0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800abe4:	460b      	mov	r3, r1
 800abe6:	4313      	orrs	r3, r2
 800abe8:	d009      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800abea:	4b92      	ldr	r3, [pc, #584]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800abf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf8:	4a8e      	ldr	r2, [pc, #568]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abfa:	430b      	orrs	r3, r1
 800abfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800abfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ac0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ac14:	460b      	mov	r3, r1
 800ac16:	4313      	orrs	r3, r2
 800ac18:	d00e      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac1a:	4b86      	ldr	r3, [pc, #536]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	4a85      	ldr	r2, [pc, #532]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac24:	6113      	str	r3, [r2, #16]
 800ac26:	4b83      	ldr	r3, [pc, #524]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac28:	6919      	ldr	r1, [r3, #16]
 800ac2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ac32:	4a80      	ldr	r2, [pc, #512]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac34:	430b      	orrs	r3, r1
 800ac36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ac44:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac46:	2300      	movs	r3, #0
 800ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4313      	orrs	r3, r2
 800ac52:	d009      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac54:	4b77      	ldr	r3, [pc, #476]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac62:	4a74      	ldr	r2, [pc, #464]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac64:	430b      	orrs	r3, r1
 800ac66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ac74:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac76:	2300      	movs	r3, #0
 800ac78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4313      	orrs	r3, r2
 800ac82:	d00a      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac84:	4b6b      	ldr	r3, [pc, #428]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ac8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac94:	4a67      	ldr	r2, [pc, #412]	@ (800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac96:	430b      	orrs	r3, r1
 800ac98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ac9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	2100      	movs	r1, #0
 800aca4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800acb0:	460b      	mov	r3, r1
 800acb2:	4313      	orrs	r3, r2
 800acb4:	d011      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acba:	3308      	adds	r3, #8
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fa4a 	bl	800c158 <RCCEx_PLL2_Config>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800acca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800acda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	2100      	movs	r1, #0
 800ace4:	6239      	str	r1, [r7, #32]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	627b      	str	r3, [r7, #36]	@ 0x24
 800acec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800acf0:	460b      	mov	r3, r1
 800acf2:	4313      	orrs	r3, r2
 800acf4:	d011      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acfa:	3308      	adds	r3, #8
 800acfc:	2101      	movs	r1, #1
 800acfe:	4618      	mov	r0, r3
 800ad00:	f001 fa2a 	bl	800c158 <RCCEx_PLL2_Config>
 800ad04:	4603      	mov	r3, r0
 800ad06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ad1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	2100      	movs	r1, #0
 800ad24:	61b9      	str	r1, [r7, #24]
 800ad26:	f003 0304 	and.w	r3, r3, #4
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ad30:	460b      	mov	r3, r1
 800ad32:	4313      	orrs	r3, r2
 800ad34:	d011      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	2102      	movs	r1, #2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f001 fa0a 	bl	800c158 <RCCEx_PLL2_Config>
 800ad44:	4603      	mov	r3, r0
 800ad46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ad5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	2100      	movs	r1, #0
 800ad64:	6139      	str	r1, [r7, #16]
 800ad66:	f003 0308 	and.w	r3, r3, #8
 800ad6a:	617b      	str	r3, [r7, #20]
 800ad6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ad70:	460b      	mov	r3, r1
 800ad72:	4313      	orrs	r3, r2
 800ad74:	d011      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad7a:	3328      	adds	r3, #40	@ 0x28
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 fa9c 	bl	800c2bc <RCCEx_PLL3_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ad8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ad9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	2100      	movs	r1, #0
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	f003 0310 	and.w	r3, r3, #16
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800adb0:	460b      	mov	r3, r1
 800adb2:	4313      	orrs	r3, r2
 800adb4:	d011      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adba:	3328      	adds	r3, #40	@ 0x28
 800adbc:	2101      	movs	r1, #1
 800adbe:	4618      	mov	r0, r3
 800adc0:	f001 fa7c 	bl	800c2bc <RCCEx_PLL3_Config>
 800adc4:	4603      	mov	r3, r0
 800adc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800adca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800add6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800adda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	2100      	movs	r1, #0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800adf0:	460b      	mov	r3, r1
 800adf2:	4313      	orrs	r3, r2
 800adf4:	d011      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adfa:	3328      	adds	r3, #40	@ 0x28
 800adfc:	2102      	movs	r1, #2
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 fa5c 	bl	800c2bc <RCCEx_PLL3_Config>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ae1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e000      	b.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae34:	58024400 	.word	0x58024400

0800ae38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b090      	sub	sp, #64	@ 0x40
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ae42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae46:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ae4a:	430b      	orrs	r3, r1
 800ae4c:	f040 8094 	bne.w	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ae50:	4b9e      	ldr	r3, [pc, #632]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	f200 8087 	bhi.w	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ae62:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800ae7d 	.word	0x0800ae7d
 800ae6c:	0800aea5 	.word	0x0800aea5
 800ae70:	0800aecd 	.word	0x0800aecd
 800ae74:	0800af69 	.word	0x0800af69
 800ae78:	0800aef5 	.word	0x0800aef5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae7c:	4b93      	ldr	r3, [pc, #588]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae88:	d108      	bne.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 f810 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae98:	f000 bd45 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea0:	f000 bd41 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aea4:	4b89      	ldr	r3, [pc, #548]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeb0:	d108      	bne.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeb2:	f107 0318 	add.w	r3, r7, #24
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fd54 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec0:	f000 bd31 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec8:	f000 bd2d 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aecc:	4b7f      	ldr	r3, [pc, #508]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aed8:	d108      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeda:	f107 030c 	add.w	r3, r7, #12
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fe94 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee8:	f000 bd1d 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef0:	f000 bd19 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aef4:	4b75      	ldr	r3, [pc, #468]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aef8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aefc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aefe:	4b73      	ldr	r3, [pc, #460]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0304 	and.w	r3, r3, #4
 800af06:	2b04      	cmp	r3, #4
 800af08:	d10c      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d109      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af10:	4b6e      	ldr	r3, [pc, #440]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	08db      	lsrs	r3, r3, #3
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	4a6d      	ldr	r2, [pc, #436]	@ (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af1c:	fa22 f303 	lsr.w	r3, r2, r3
 800af20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af22:	e01f      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af24:	4b69      	ldr	r3, [pc, #420]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af30:	d106      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800af32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af38:	d102      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af3a:	4b66      	ldr	r3, [pc, #408]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af3e:	e011      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af40:	4b62      	ldr	r3, [pc, #392]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af4c:	d106      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800af4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af54:	d102      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af56:	4b60      	ldr	r3, [pc, #384]	@ (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800af58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af5a:	e003      	b.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af60:	f000 bce1 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af64:	f000 bcdf 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af68:	4b5c      	ldr	r3, [pc, #368]	@ (800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af6c:	f000 bcdb 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af74:	f000 bcd7 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800af78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af7c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800af80:	430b      	orrs	r3, r1
 800af82:	f040 80ad 	bne.w	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800af86:	4b51      	ldr	r3, [pc, #324]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af8a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800af8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af96:	d056      	beq.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af9e:	f200 8090 	bhi.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2bc0      	cmp	r3, #192	@ 0xc0
 800afa6:	f000 8088 	beq.w	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	2bc0      	cmp	r3, #192	@ 0xc0
 800afae:	f200 8088 	bhi.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	2b80      	cmp	r3, #128	@ 0x80
 800afb6:	d032      	beq.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800afb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afba:	2b80      	cmp	r3, #128	@ 0x80
 800afbc:	f200 8081 	bhi.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800afc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc8:	2b40      	cmp	r3, #64	@ 0x40
 800afca:	d014      	beq.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800afcc:	e079      	b.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afce:	4b3f      	ldr	r3, [pc, #252]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afda:	d108      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 ff67 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afea:	f000 bc9c 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afee:	2300      	movs	r3, #0
 800aff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff2:	f000 bc98 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aff6:	4b35      	ldr	r3, [pc, #212]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800affe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b002:	d108      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b004:	f107 0318 	add.w	r3, r7, #24
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fcab 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b012:	f000 bc88 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b01a:	f000 bc84 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b01e:	4b2b      	ldr	r3, [pc, #172]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b02a:	d108      	bne.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02c:	f107 030c 	add.w	r3, r7, #12
 800b030:	4618      	mov	r0, r3
 800b032:	f000 fdeb 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b03a:	f000 bc74 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b042:	f000 bc70 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b046:	4b21      	ldr	r3, [pc, #132]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b04a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b050:	4b1e      	ldr	r3, [pc, #120]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d10c      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d109      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b062:	4b1a      	ldr	r3, [pc, #104]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	08db      	lsrs	r3, r3, #3
 800b068:	f003 0303 	and.w	r3, r3, #3
 800b06c:	4a18      	ldr	r2, [pc, #96]	@ (800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b06e:	fa22 f303 	lsr.w	r3, r2, r3
 800b072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b074:	e01f      	b.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b076:	4b15      	ldr	r3, [pc, #84]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b082:	d106      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b08a:	d102      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b08c:	4b11      	ldr	r3, [pc, #68]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b090:	e011      	b.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b092:	4b0e      	ldr	r3, [pc, #56]	@ (800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b09a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b09e:	d106      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0a6:	d102      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0ac:	e003      	b.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b0b2:	f000 bc38 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0b6:	f000 bc36 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0ba:	4b08      	ldr	r3, [pc, #32]	@ (800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0be:	f000 bc32 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c6:	f000 bc2e 	b.w	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0ca:	bf00      	nop
 800b0cc:	58024400 	.word	0x58024400
 800b0d0:	03d09000 	.word	0x03d09000
 800b0d4:	003d0900 	.word	0x003d0900
 800b0d8:	017d7840 	.word	0x017d7840
 800b0dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	f040 809c 	bne.w	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b0ee:	4b9e      	ldr	r3, [pc, #632]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b0f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b0fe:	d054      	beq.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b106:	f200 808b 	bhi.w	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b110:	f000 8083 	beq.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b11a:	f200 8081 	bhi.w	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b124:	d02f      	beq.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b12c:	d878      	bhi.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b13a:	d012      	beq.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b13c:	e070      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b13e:	4b8a      	ldr	r3, [pc, #552]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b146:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b14a:	d107      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b14c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b150:	4618      	mov	r0, r3
 800b152:	f000 feaf 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b15a:	e3e4      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b160:	e3e1      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b162:	4b81      	ldr	r3, [pc, #516]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b16a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b16e:	d107      	bne.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b170:	f107 0318 	add.w	r3, r7, #24
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fbf5 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b17e:	e3d2      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b184:	e3cf      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b186:	4b78      	ldr	r3, [pc, #480]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b18e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b192:	d107      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b194:	f107 030c 	add.w	r3, r7, #12
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fd37 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a2:	e3c0      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a8:	e3bd      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1aa:	4b6f      	ldr	r3, [pc, #444]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1b4:	4b6c      	ldr	r3, [pc, #432]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d10c      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d109      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1c6:	4b68      	ldr	r3, [pc, #416]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	08db      	lsrs	r3, r3, #3
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	4a66      	ldr	r2, [pc, #408]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1d8:	e01e      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1da:	4b63      	ldr	r3, [pc, #396]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1e6:	d106      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1ee:	d102      	bne.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1f0:	4b5f      	ldr	r3, [pc, #380]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1f4:	e010      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1f6:	4b5c      	ldr	r3, [pc, #368]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b202:	d106      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b20a:	d102      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b20c:	4b59      	ldr	r3, [pc, #356]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b210:	e002      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b216:	e386      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b218:	e385      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b21a:	4b57      	ldr	r3, [pc, #348]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b21e:	e382      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b224:	e37f      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b22a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b22e:	430b      	orrs	r3, r1
 800b230:	f040 80a7 	bne.w	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b234:	4b4c      	ldr	r3, [pc, #304]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b238:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b23c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b244:	d055      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b24c:	f200 8096 	bhi.w	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b252:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b256:	f000 8084 	beq.w	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b260:	f200 808c 	bhi.w	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b26a:	d030      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b272:	f200 8083 	bhi.w	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d004      	beq.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b282:	d012      	beq.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b284:	e07a      	b.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b286:	4b38      	ldr	r3, [pc, #224]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b28e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b292:	d107      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fe0b 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a2:	e340      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a8:	e33d      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2b6:	d107      	bne.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b8:	f107 0318 	add.w	r3, r7, #24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fb51 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c6:	e32e      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2cc:	e32b      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ce:	4b26      	ldr	r3, [pc, #152]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2da:	d107      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2dc:	f107 030c 	add.w	r3, r7, #12
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fc93 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ea:	e31c      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f0:	e319      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2f2:	4b1d      	ldr	r3, [pc, #116]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b04      	cmp	r3, #4
 800b306:	d10c      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b30e:	4b16      	ldr	r3, [pc, #88]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	08db      	lsrs	r3, r3, #3
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	4a14      	ldr	r2, [pc, #80]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b31a:	fa22 f303 	lsr.w	r3, r2, r3
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b320:	e01e      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b322:	4b11      	ldr	r3, [pc, #68]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b32e:	d106      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b336:	d102      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b338:	4b0d      	ldr	r3, [pc, #52]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b33c:	e010      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b33e:	4b0a      	ldr	r3, [pc, #40]	@ (800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b34a:	d106      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b352:	d102      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b354:	4b07      	ldr	r3, [pc, #28]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b358:	e002      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b35e:	e2e2      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b360:	e2e1      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b362:	4b05      	ldr	r3, [pc, #20]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b366:	e2de      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b368:	58024400 	.word	0x58024400
 800b36c:	03d09000 	.word	0x03d09000
 800b370:	003d0900 	.word	0x003d0900
 800b374:	017d7840 	.word	0x017d7840
 800b378:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b380:	e2d1      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b382:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b386:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b38a:	430b      	orrs	r3, r1
 800b38c:	f040 809c 	bne.w	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b390:	4b93      	ldr	r3, [pc, #588]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b394:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b398:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3a0:	d054      	beq.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3a8:	f200 808b 	bhi.w	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3b2:	f000 8083 	beq.w	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3bc:	f200 8081 	bhi.w	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3c6:	d02f      	beq.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3ce:	d878      	bhi.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d004      	beq.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3dc:	d012      	beq.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b3de:	e070      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3e0:	4b7f      	ldr	r3, [pc, #508]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3ec:	d107      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fd5e 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3fc:	e293      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b402:	e290      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b404:	4b76      	ldr	r3, [pc, #472]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b40c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b410:	d107      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b412:	f107 0318 	add.w	r3, r7, #24
 800b416:	4618      	mov	r0, r3
 800b418:	f000 faa4 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b420:	e281      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b426:	e27e      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b428:	4b6d      	ldr	r3, [pc, #436]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b434:	d107      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b436:	f107 030c 	add.w	r3, r7, #12
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fbe6 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b444:	e26f      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b44a:	e26c      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b44c:	4b64      	ldr	r3, [pc, #400]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b44e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b454:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b456:	4b62      	ldr	r3, [pc, #392]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d10c      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b464:	2b00      	cmp	r3, #0
 800b466:	d109      	bne.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b468:	4b5d      	ldr	r3, [pc, #372]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	08db      	lsrs	r3, r3, #3
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	4a5c      	ldr	r2, [pc, #368]	@ (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b474:	fa22 f303 	lsr.w	r3, r2, r3
 800b478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b47a:	e01e      	b.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b47c:	4b58      	ldr	r3, [pc, #352]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b488:	d106      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b48c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b490:	d102      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b492:	4b55      	ldr	r3, [pc, #340]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b496:	e010      	b.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b498:	4b51      	ldr	r3, [pc, #324]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4a4:	d106      	bne.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4ac:	d102      	bne.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4ae:	4b4f      	ldr	r3, [pc, #316]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4b2:	e002      	b.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4b8:	e235      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4ba:	e234      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c0:	e231      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c6:	e22e      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b4d0:	430b      	orrs	r3, r1
 800b4d2:	f040 808f 	bne.w	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b4d6:	4b42      	ldr	r3, [pc, #264]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b4de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4e6:	d06b      	beq.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4ee:	d874      	bhi.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4f6:	d056      	beq.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4fe:	d86c      	bhi.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b506:	d03b      	beq.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b50e:	d864      	bhi.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b516:	d021      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b51e:	d85c      	bhi.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b52c:	d004      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b52e:	e054      	b.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b530:	f7fe fa0a 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800b534:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b536:	e1f6      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b538:	4b29      	ldr	r3, [pc, #164]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b544:	d107      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b546:	f107 0318 	add.w	r3, r7, #24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fa0a 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b554:	e1e7      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b55a:	e1e4      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b55c:	4b20      	ldr	r3, [pc, #128]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b568:	d107      	bne.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b56a:	f107 030c 	add.w	r3, r7, #12
 800b56e:	4618      	mov	r0, r3
 800b570:	f000 fb4c 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b578:	e1d5      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57e:	e1d2      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b580:	4b17      	ldr	r3, [pc, #92]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d109      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b58c:	4b14      	ldr	r3, [pc, #80]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	08db      	lsrs	r3, r3, #3
 800b592:	f003 0303 	and.w	r3, r3, #3
 800b596:	4a13      	ldr	r2, [pc, #76]	@ (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b598:	fa22 f303 	lsr.w	r3, r2, r3
 800b59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b59e:	e1c2      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a4:	e1bf      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5b2:	d102      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b8:	e1b5      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5be:	e1b2      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5c0:	4b07      	ldr	r3, [pc, #28]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5cc:	d102      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b5ce:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d2:	e1a8      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5d8:	e1a5      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5de:	e1a2      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	03d09000 	.word	0x03d09000
 800b5e8:	003d0900 	.word	0x003d0900
 800b5ec:	017d7840 	.word	0x017d7840
 800b5f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b5f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	d173      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b600:	4b9c      	ldr	r3, [pc, #624]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b608:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b610:	d02f      	beq.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b618:	d863      	bhi.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b626:	d012      	beq.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b628:	e05b      	b.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b62a:	4b92      	ldr	r3, [pc, #584]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b636:	d107      	bne.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b638:	f107 0318 	add.w	r3, r7, #24
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 f991 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b646:	e16e      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b64c:	e16b      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b64e:	4b89      	ldr	r3, [pc, #548]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b65a:	d107      	bne.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b65c:	f107 030c 	add.w	r3, r7, #12
 800b660:	4618      	mov	r0, r3
 800b662:	f000 fad3 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b66a:	e15c      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b670:	e159      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b672:	4b80      	ldr	r3, [pc, #512]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b676:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b67a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b67c:	4b7d      	ldr	r3, [pc, #500]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b04      	cmp	r3, #4
 800b686:	d10c      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d109      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b68e:	4b79      	ldr	r3, [pc, #484]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	08db      	lsrs	r3, r3, #3
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	4a77      	ldr	r2, [pc, #476]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b69a:	fa22 f303 	lsr.w	r3, r2, r3
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a0:	e01e      	b.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6a2:	4b74      	ldr	r3, [pc, #464]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6ae:	d106      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6b6:	d102      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6b8:	4b70      	ldr	r3, [pc, #448]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6bc:	e010      	b.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6be:	4b6d      	ldr	r3, [pc, #436]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6ca:	d106      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6d2:	d102      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6d4:	4b6a      	ldr	r3, [pc, #424]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6d8:	e002      	b.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6de:	e122      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6e0:	e121      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6e6:	e11e      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b6f0:	430b      	orrs	r3, r1
 800b6f2:	d133      	bne.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b6f4:	4b5f      	ldr	r3, [pc, #380]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b6fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	2b00      	cmp	r3, #0
 800b702:	d004      	beq.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b70a:	d012      	beq.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b70c:	e023      	b.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b70e:	4b59      	ldr	r3, [pc, #356]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b71a:	d107      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b71c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fbc7 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72a:	e0fc      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b730:	e0f9      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b732:	4b50      	ldr	r3, [pc, #320]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b73a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b73e:	d107      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b740:	f107 0318 	add.w	r3, r7, #24
 800b744:	4618      	mov	r0, r3
 800b746:	f000 f90d 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b74e:	e0ea      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b754:	e0e7      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b75a:	e0e4      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b75c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b760:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b764:	430b      	orrs	r3, r1
 800b766:	f040 808d 	bne.w	800b884 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b76a:	4b42      	ldr	r3, [pc, #264]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b76e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b772:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b77a:	d06b      	beq.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b782:	d874      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b78a:	d056      	beq.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b792:	d86c      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b79a:	d03b      	beq.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7a2:	d864      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7aa:	d021      	beq.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7b2:	d85c      	bhi.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d004      	beq.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7c0:	d004      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b7c2:	e054      	b.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b7c4:	f000 f8b8 	bl	800b938 <HAL_RCCEx_GetD3PCLK1Freq>
 800b7c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7ca:	e0ac      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7cc:	4b29      	ldr	r3, [pc, #164]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7d8:	d107      	bne.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7da:	f107 0318 	add.w	r3, r7, #24
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f000 f8c0 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e8:	e09d      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ee:	e09a      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7f0:	4b20      	ldr	r3, [pc, #128]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7fc:	d107      	bne.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7fe:	f107 030c 	add.w	r3, r7, #12
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fa02 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80c:	e08b      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b812:	e088      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b814:	4b17      	ldr	r3, [pc, #92]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d109      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b820:	4b14      	ldr	r3, [pc, #80]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	4a13      	ldr	r2, [pc, #76]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
 800b830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b832:	e078      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b838:	e075      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b83a:	4b0e      	ldr	r3, [pc, #56]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b846:	d102      	bne.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b848:	4b0c      	ldr	r3, [pc, #48]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84c:	e06b      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b852:	e068      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b854:	4b07      	ldr	r3, [pc, #28]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b85c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b860:	d102      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b862:	4b07      	ldr	r3, [pc, #28]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b866:	e05e      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86c:	e05b      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b872:	e058      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b874:	58024400 	.word	0x58024400
 800b878:	03d09000 	.word	0x03d09000
 800b87c:	003d0900 	.word	0x003d0900
 800b880:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b888:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b88c:	430b      	orrs	r3, r1
 800b88e:	d148      	bne.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b890:	4b27      	ldr	r3, [pc, #156]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b898:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a0:	d02a      	beq.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a8:	d838      	bhi.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d004      	beq.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8b6:	d00d      	beq.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b8b8:	e030      	b.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8c6:	d102      	bne.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b8c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8cc:	e02b      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8d2:	e028      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8d4:	4b16      	ldr	r3, [pc, #88]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8e0:	d107      	bne.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 fae4 	bl	800beb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8f0:	e019      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f6:	e016      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b904:	d107      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b906:	f107 0318 	add.w	r3, r7, #24
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f82a 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b914:	e007      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91a:	e004      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b920:	e001      	b.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3740      	adds	r7, #64	@ 0x40
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	58024400 	.word	0x58024400
 800b934:	017d7840 	.word	0x017d7840

0800b938 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b93c:	f7fd ffd4 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 800b940:	4602      	mov	r2, r0
 800b942:	4b06      	ldr	r3, [pc, #24]	@ (800b95c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	091b      	lsrs	r3, r3, #4
 800b948:	f003 0307 	and.w	r3, r3, #7
 800b94c:	4904      	ldr	r1, [pc, #16]	@ (800b960 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b94e:	5ccb      	ldrb	r3, [r1, r3]
 800b950:	f003 031f 	and.w	r3, r3, #31
 800b954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b958:	4618      	mov	r0, r3
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	58024400 	.word	0x58024400
 800b960:	08012bb8 	.word	0x08012bb8

0800b964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b964:	b480      	push	{r7}
 800b966:	b089      	sub	sp, #36	@ 0x24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b96c:	4ba1      	ldr	r3, [pc, #644]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b970:	f003 0303 	and.w	r3, r3, #3
 800b974:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b976:	4b9f      	ldr	r3, [pc, #636]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b97a:	0b1b      	lsrs	r3, r3, #12
 800b97c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b980:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b982:	4b9c      	ldr	r3, [pc, #624]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b986:	091b      	lsrs	r3, r3, #4
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b98e:	4b99      	ldr	r3, [pc, #612]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b992:	08db      	lsrs	r3, r3, #3
 800b994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	fb02 f303 	mul.w	r3, r2, r3
 800b99e:	ee07 3a90 	vmov	s15, r3
 800b9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 8111 	beq.w	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	f000 8083 	beq.w	800bac0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	f200 80a1 	bhi.w	800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d056      	beq.n	800ba7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b9ce:	e099      	b.n	800bb04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9d0:	4b88      	ldr	r3, [pc, #544]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0320 	and.w	r3, r3, #32
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d02d      	beq.n	800ba38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9dc:	4b85      	ldr	r3, [pc, #532]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	08db      	lsrs	r3, r3, #3
 800b9e2:	f003 0303 	and.w	r3, r3, #3
 800b9e6:	4a84      	ldr	r2, [pc, #528]	@ (800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	ee07 3a90 	vmov	s15, r3
 800b9f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba06:	4b7b      	ldr	r3, [pc, #492]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0e:	ee07 3a90 	vmov	s15, r3
 800ba12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba36:	e087      	b.n	800bb48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba4a:	4b6a      	ldr	r3, [pc, #424]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba52:	ee07 3a90 	vmov	s15, r3
 800ba56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba7a:	e065      	b.n	800bb48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	ee07 3a90 	vmov	s15, r3
 800ba82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba8e:	4b59      	ldr	r3, [pc, #356]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba96:	ee07 3a90 	vmov	s15, r3
 800ba9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800babe:	e043      	b.n	800bb48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bc08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad2:	4b48      	ldr	r3, [pc, #288]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bada:	ee07 3a90 	vmov	s15, r3
 800bade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bafe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb02:	e021      	b.n	800bb48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb16:	4b37      	ldr	r3, [pc, #220]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb1e:	ee07 3a90 	vmov	s15, r3
 800bb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb26:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bb48:	4b2a      	ldr	r3, [pc, #168]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb4c:	0a5b      	lsrs	r3, r3, #9
 800bb4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb52:	ee07 3a90 	vmov	s15, r3
 800bb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb62:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb6e:	ee17 2a90 	vmov	r2, s15
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bb76:	4b1f      	ldr	r3, [pc, #124]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb7a:	0c1b      	lsrs	r3, r3, #16
 800bb7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb80:	ee07 3a90 	vmov	s15, r3
 800bb84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb90:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb9c:	ee17 2a90 	vmov	r2, s15
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bba4:	4b13      	ldr	r3, [pc, #76]	@ (800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba8:	0e1b      	lsrs	r3, r3, #24
 800bbaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbca:	ee17 2a90 	vmov	r2, s15
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bbd2:	e008      	b.n	800bbe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	609a      	str	r2, [r3, #8]
}
 800bbe6:	bf00      	nop
 800bbe8:	3724      	adds	r7, #36	@ 0x24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	58024400 	.word	0x58024400
 800bbf8:	03d09000 	.word	0x03d09000
 800bbfc:	46000000 	.word	0x46000000
 800bc00:	4c742400 	.word	0x4c742400
 800bc04:	4a742400 	.word	0x4a742400
 800bc08:	4bbebc20 	.word	0x4bbebc20

0800bc0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b089      	sub	sp, #36	@ 0x24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc14:	4ba1      	ldr	r3, [pc, #644]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc18:	f003 0303 	and.w	r3, r3, #3
 800bc1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc1e:	4b9f      	ldr	r3, [pc, #636]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc22:	0d1b      	lsrs	r3, r3, #20
 800bc24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc2a:	4b9c      	ldr	r3, [pc, #624]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	0a1b      	lsrs	r3, r3, #8
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc36:	4b99      	ldr	r3, [pc, #612]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc3a:	08db      	lsrs	r3, r3, #3
 800bc3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	fb02 f303 	mul.w	r3, r2, r3
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 8111 	beq.w	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	f000 8083 	beq.w	800bd68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	f200 80a1 	bhi.w	800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d056      	beq.n	800bd24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc76:	e099      	b.n	800bdac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc78:	4b88      	ldr	r3, [pc, #544]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f003 0320 	and.w	r3, r3, #32
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d02d      	beq.n	800bce0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc84:	4b85      	ldr	r3, [pc, #532]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	08db      	lsrs	r3, r3, #3
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	4a84      	ldr	r2, [pc, #528]	@ (800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc90:	fa22 f303 	lsr.w	r3, r2, r3
 800bc94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	ee07 3a90 	vmov	s15, r3
 800bc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcae:	4b7b      	ldr	r3, [pc, #492]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcde:	e087      	b.n	800bdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	ee07 3a90 	vmov	s15, r3
 800bce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bea8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bcee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf2:	4b6a      	ldr	r3, [pc, #424]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd02:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd22:	e065      	b.n	800bdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	ee07 3a90 	vmov	s15, r3
 800bd2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd36:	4b59      	ldr	r3, [pc, #356]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd3e:	ee07 3a90 	vmov	s15, r3
 800bd42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd46:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd66:	e043      	b.n	800bdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	ee07 3a90 	vmov	s15, r3
 800bd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800beb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7a:	4b48      	ldr	r3, [pc, #288]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdaa:	e021      	b.n	800bdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	ee07 3a90 	vmov	s15, r3
 800bdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdbe:	4b37      	ldr	r3, [pc, #220]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdce:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bde2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bde6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bdf0:	4b2a      	ldr	r3, [pc, #168]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdf4:	0a5b      	lsrs	r3, r3, #9
 800bdf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdfa:	ee07 3a90 	vmov	s15, r3
 800bdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be16:	ee17 2a90 	vmov	r2, s15
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be1e:	4b1f      	ldr	r3, [pc, #124]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be38:	edd7 6a07 	vldr	s13, [r7, #28]
 800be3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be44:	ee17 2a90 	vmov	r2, s15
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800be4c:	4b13      	ldr	r3, [pc, #76]	@ (800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be50:	0e1b      	lsrs	r3, r3, #24
 800be52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be56:	ee07 3a90 	vmov	s15, r3
 800be5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be66:	edd7 6a07 	vldr	s13, [r7, #28]
 800be6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be72:	ee17 2a90 	vmov	r2, s15
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be7a:	e008      	b.n	800be8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	609a      	str	r2, [r3, #8]
}
 800be8e:	bf00      	nop
 800be90:	3724      	adds	r7, #36	@ 0x24
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	58024400 	.word	0x58024400
 800bea0:	03d09000 	.word	0x03d09000
 800bea4:	46000000 	.word	0x46000000
 800bea8:	4c742400 	.word	0x4c742400
 800beac:	4a742400 	.word	0x4a742400
 800beb0:	4bbebc20 	.word	0x4bbebc20

0800beb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b089      	sub	sp, #36	@ 0x24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bebc:	4ba0      	ldr	r3, [pc, #640]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec0:	f003 0303 	and.w	r3, r3, #3
 800bec4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bec6:	4b9e      	ldr	r3, [pc, #632]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beca:	091b      	lsrs	r3, r3, #4
 800becc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bed0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bed2:	4b9b      	ldr	r3, [pc, #620]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bedc:	4b98      	ldr	r3, [pc, #608]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee0:	08db      	lsrs	r3, r3, #3
 800bee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	fb02 f303 	mul.w	r3, r2, r3
 800beec:	ee07 3a90 	vmov	s15, r3
 800bef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 8111 	beq.w	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	f000 8083 	beq.w	800c00e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	f200 80a1 	bhi.w	800c052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d056      	beq.n	800bfca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf1c:	e099      	b.n	800c052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf1e:	4b88      	ldr	r3, [pc, #544]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 0320 	and.w	r3, r3, #32
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d02d      	beq.n	800bf86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf2a:	4b85      	ldr	r3, [pc, #532]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	08db      	lsrs	r3, r3, #3
 800bf30:	f003 0303 	and.w	r3, r3, #3
 800bf34:	4a83      	ldr	r2, [pc, #524]	@ (800c144 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bf36:	fa22 f303 	lsr.w	r3, r2, r3
 800bf3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	ee07 3a90 	vmov	s15, r3
 800bf42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	ee07 3a90 	vmov	s15, r3
 800bf4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf54:	4b7a      	ldr	r3, [pc, #488]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5c:	ee07 3a90 	vmov	s15, r3
 800bf60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf64:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf68:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf84:	e087      	b.n	800c096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	ee07 3a90 	vmov	s15, r3
 800bf8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf90:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c14c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf98:	4b69      	ldr	r3, [pc, #420]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa0:	ee07 3a90 	vmov	s15, r3
 800bfa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfc8:	e065      	b.n	800c096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	ee07 3a90 	vmov	s15, r3
 800bfd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfd4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bfd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfdc:	4b58      	ldr	r3, [pc, #352]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe4:	ee07 3a90 	vmov	s15, r3
 800bfe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfec:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c00c:	e043      	b.n	800c096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	ee07 3a90 	vmov	s15, r3
 800c014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c018:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c154 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c01c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c020:	4b47      	ldr	r3, [pc, #284]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c028:	ee07 3a90 	vmov	s15, r3
 800c02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c030:	ed97 6a03 	vldr	s12, [r7, #12]
 800c034:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c03c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c04c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c050:	e021      	b.n	800c096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	ee07 3a90 	vmov	s15, r3
 800c058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c14c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c064:	4b36      	ldr	r3, [pc, #216]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06c:	ee07 3a90 	vmov	s15, r3
 800c070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c074:	ed97 6a03 	vldr	s12, [r7, #12]
 800c078:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c07c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c094:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c096:	4b2a      	ldr	r3, [pc, #168]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	0a5b      	lsrs	r3, r3, #9
 800c09c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0bc:	ee17 2a90 	vmov	r2, s15
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c0c4:	4b1e      	ldr	r3, [pc, #120]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c8:	0c1b      	lsrs	r3, r3, #16
 800c0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ea:	ee17 2a90 	vmov	r2, s15
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c0f2:	4b13      	ldr	r3, [pc, #76]	@ (800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f6:	0e1b      	lsrs	r3, r3, #24
 800c0f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0fc:	ee07 3a90 	vmov	s15, r3
 800c100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c104:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c10c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c118:	ee17 2a90 	vmov	r2, s15
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c120:	e008      	b.n	800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	609a      	str	r2, [r3, #8]
}
 800c134:	bf00      	nop
 800c136:	3724      	adds	r7, #36	@ 0x24
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	58024400 	.word	0x58024400
 800c144:	03d09000 	.word	0x03d09000
 800c148:	46000000 	.word	0x46000000
 800c14c:	4c742400 	.word	0x4c742400
 800c150:	4a742400 	.word	0x4a742400
 800c154:	4bbebc20 	.word	0x4bbebc20

0800c158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c166:	4b53      	ldr	r3, [pc, #332]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16a:	f003 0303 	and.w	r3, r3, #3
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d101      	bne.n	800c176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c172:	2301      	movs	r3, #1
 800c174:	e099      	b.n	800c2aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c176:	4b4f      	ldr	r3, [pc, #316]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a4e      	ldr	r2, [pc, #312]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c17c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c182:	f7f8 ff77 	bl	8005074 <HAL_GetTick>
 800c186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c188:	e008      	b.n	800c19c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c18a:	f7f8 ff73 	bl	8005074 <HAL_GetTick>
 800c18e:	4602      	mov	r2, r0
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	2b02      	cmp	r3, #2
 800c196:	d901      	bls.n	800c19c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e086      	b.n	800c2aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c19c:	4b45      	ldr	r3, [pc, #276]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d1f0      	bne.n	800c18a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1a8:	4b42      	ldr	r3, [pc, #264]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	031b      	lsls	r3, r3, #12
 800c1b6:	493f      	ldr	r1, [pc, #252]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	025b      	lsls	r3, r3, #9
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	041b      	lsls	r3, r3, #16
 800c1da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c1de:	431a      	orrs	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	061b      	lsls	r3, r3, #24
 800c1e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c1ec:	4931      	ldr	r1, [pc, #196]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1f2:	4b30      	ldr	r3, [pc, #192]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	492d      	ldr	r1, [pc, #180]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c200:	4313      	orrs	r3, r2
 800c202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c204:	4b2b      	ldr	r3, [pc, #172]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c208:	f023 0220 	bic.w	r2, r3, #32
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	4928      	ldr	r1, [pc, #160]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c212:	4313      	orrs	r3, r2
 800c214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c216:	4b27      	ldr	r3, [pc, #156]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21a:	4a26      	ldr	r2, [pc, #152]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c21c:	f023 0310 	bic.w	r3, r3, #16
 800c220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c222:	4b24      	ldr	r3, [pc, #144]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c226:	4b24      	ldr	r3, [pc, #144]	@ (800c2b8 <RCCEx_PLL2_Config+0x160>)
 800c228:	4013      	ands	r3, r2
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	69d2      	ldr	r2, [r2, #28]
 800c22e:	00d2      	lsls	r2, r2, #3
 800c230:	4920      	ldr	r1, [pc, #128]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c232:	4313      	orrs	r3, r2
 800c234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c236:	4b1f      	ldr	r3, [pc, #124]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c23a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c23c:	f043 0310 	orr.w	r3, r3, #16
 800c240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c248:	4b1a      	ldr	r3, [pc, #104]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24c:	4a19      	ldr	r2, [pc, #100]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c24e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c254:	e00f      	b.n	800c276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d106      	bne.n	800c26a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c25c:	4b15      	ldr	r3, [pc, #84]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c260:	4a14      	ldr	r2, [pc, #80]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c268:	e005      	b.n	800c276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c26a:	4b12      	ldr	r3, [pc, #72]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c26e:	4a11      	ldr	r2, [pc, #68]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c276:	4b0f      	ldr	r3, [pc, #60]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a0e      	ldr	r2, [pc, #56]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c27c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c282:	f7f8 fef7 	bl	8005074 <HAL_GetTick>
 800c286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c288:	e008      	b.n	800c29c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c28a:	f7f8 fef3 	bl	8005074 <HAL_GetTick>
 800c28e:	4602      	mov	r2, r0
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	2b02      	cmp	r3, #2
 800c296:	d901      	bls.n	800c29c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	e006      	b.n	800c2aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c29c:	4b05      	ldr	r3, [pc, #20]	@ (800c2b4 <RCCEx_PLL2_Config+0x15c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d0f0      	beq.n	800c28a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	58024400 	.word	0x58024400
 800c2b8:	ffff0007 	.word	0xffff0007

0800c2bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2ca:	4b53      	ldr	r3, [pc, #332]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d101      	bne.n	800c2da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e099      	b.n	800c40e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2da:	4b4f      	ldr	r3, [pc, #316]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a4e      	ldr	r2, [pc, #312]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c2e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2e6:	f7f8 fec5 	bl	8005074 <HAL_GetTick>
 800c2ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2ec:	e008      	b.n	800c300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2ee:	f7f8 fec1 	bl	8005074 <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d901      	bls.n	800c300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	e086      	b.n	800c40e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c300:	4b45      	ldr	r3, [pc, #276]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1f0      	bne.n	800c2ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c30c:	4b42      	ldr	r3, [pc, #264]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	051b      	lsls	r3, r3, #20
 800c31a:	493f      	ldr	r1, [pc, #252]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c31c:	4313      	orrs	r3, r2
 800c31e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	3b01      	subs	r3, #1
 800c330:	025b      	lsls	r3, r3, #9
 800c332:	b29b      	uxth	r3, r3
 800c334:	431a      	orrs	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	041b      	lsls	r3, r3, #16
 800c33e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c342:	431a      	orrs	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	3b01      	subs	r3, #1
 800c34a:	061b      	lsls	r3, r3, #24
 800c34c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c350:	4931      	ldr	r1, [pc, #196]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c352:	4313      	orrs	r3, r2
 800c354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c356:	4b30      	ldr	r3, [pc, #192]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	492d      	ldr	r1, [pc, #180]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c364:	4313      	orrs	r3, r2
 800c366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c368:	4b2b      	ldr	r3, [pc, #172]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	4928      	ldr	r1, [pc, #160]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c376:	4313      	orrs	r3, r2
 800c378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c37a:	4b27      	ldr	r3, [pc, #156]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37e:	4a26      	ldr	r2, [pc, #152]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c386:	4b24      	ldr	r3, [pc, #144]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c38a:	4b24      	ldr	r3, [pc, #144]	@ (800c41c <RCCEx_PLL3_Config+0x160>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	69d2      	ldr	r2, [r2, #28]
 800c392:	00d2      	lsls	r2, r2, #3
 800c394:	4920      	ldr	r1, [pc, #128]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c396:	4313      	orrs	r3, r2
 800c398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c39a:	4b1f      	ldr	r3, [pc, #124]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39e:	4a1e      	ldr	r2, [pc, #120]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b0:	4a19      	ldr	r2, [pc, #100]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c3b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3b8:	e00f      	b.n	800c3da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d106      	bne.n	800c3ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3c0:	4b15      	ldr	r3, [pc, #84]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c4:	4a14      	ldr	r2, [pc, #80]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3cc:	e005      	b.n	800c3da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3ce:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d2:	4a11      	ldr	r2, [pc, #68]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3da:	4b0f      	ldr	r3, [pc, #60]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a0e      	ldr	r2, [pc, #56]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c3e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3e6:	f7f8 fe45 	bl	8005074 <HAL_GetTick>
 800c3ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3ec:	e008      	b.n	800c400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3ee:	f7f8 fe41 	bl	8005074 <HAL_GetTick>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d901      	bls.n	800c400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	e006      	b.n	800c40e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c400:	4b05      	ldr	r3, [pc, #20]	@ (800c418 <RCCEx_PLL3_Config+0x15c>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d0f0      	beq.n	800c3ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	58024400 	.word	0x58024400
 800c41c:	ffff0007 	.word	0xffff0007

0800c420 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e02b      	b.n	800c48c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 f825 	bl	800c498 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2202      	movs	r2, #2
 800c452:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3304      	adds	r3, #4
 800c45e:	4619      	mov	r1, r3
 800c460:	4610      	mov	r0, r2
 800c462:	f002 fc3d 	bl	800ece0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	461a      	mov	r2, r3
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	f002 fc91 	bl	800ed98 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c476:	4b07      	ldr	r3, [pc, #28]	@ (800c494 <HAL_SDRAM_Init+0x74>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a06      	ldr	r2, [pc, #24]	@ (800c494 <HAL_SDRAM_Init+0x74>)
 800c47c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c480:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	52004000 	.word	0x52004000

0800c498 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800c4a0:	bf00      	nop
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c4be:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c4c0:	7dfb      	ldrb	r3, [r7, #23]
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d101      	bne.n	800c4ca <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800c4c6:	2302      	movs	r3, #2
 800c4c8:	e021      	b.n	800c50e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d002      	beq.n	800c4d6 <HAL_SDRAM_SendCommand+0x2a>
 800c4d0:	7dfb      	ldrb	r3, [r7, #23]
 800c4d2:	2b05      	cmp	r3, #5
 800c4d4:	d118      	bne.n	800c508 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2202      	movs	r2, #2
 800c4da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	68b9      	ldr	r1, [r7, #8]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f002 fcc0 	bl	800ee6c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d104      	bne.n	800c4fe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2205      	movs	r2, #5
 800c4f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c4fc:	e006      	b.n	800c50c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c506:	e001      	b.n	800c50c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e000      	b.n	800c50e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d101      	bne.n	800c530 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c52c:	2302      	movs	r3, #2
 800c52e:	e016      	b.n	800c55e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d10f      	bne.n	800c55c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6839      	ldr	r1, [r7, #0]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f002 fcb2 	bl	800eeb4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	e000      	b.n	800c55e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b082      	sub	sp, #8
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e049      	b.n	800c60c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d106      	bne.n	800c592 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f841 	bl	800c614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2202      	movs	r2, #2
 800c596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	f000 fd6b 	bl	800d080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d001      	beq.n	800c640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e054      	b.n	800c6ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68da      	ldr	r2, [r3, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f042 0201 	orr.w	r2, r2, #1
 800c656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a26      	ldr	r2, [pc, #152]	@ (800c6f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d022      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c66a:	d01d      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a22      	ldr	r2, [pc, #136]	@ (800c6fc <HAL_TIM_Base_Start_IT+0xd4>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d018      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a21      	ldr	r2, [pc, #132]	@ (800c700 <HAL_TIM_Base_Start_IT+0xd8>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d013      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a1f      	ldr	r2, [pc, #124]	@ (800c704 <HAL_TIM_Base_Start_IT+0xdc>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00e      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a1e      	ldr	r2, [pc, #120]	@ (800c708 <HAL_TIM_Base_Start_IT+0xe0>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d009      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a1c      	ldr	r2, [pc, #112]	@ (800c70c <HAL_TIM_Base_Start_IT+0xe4>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d004      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x80>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c710 <HAL_TIM_Base_Start_IT+0xe8>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d115      	bne.n	800c6d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689a      	ldr	r2, [r3, #8]
 800c6ae:	4b19      	ldr	r3, [pc, #100]	@ (800c714 <HAL_TIM_Base_Start_IT+0xec>)
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b06      	cmp	r3, #6
 800c6b8:	d015      	beq.n	800c6e6 <HAL_TIM_Base_Start_IT+0xbe>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6c0:	d011      	beq.n	800c6e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f042 0201 	orr.w	r2, r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d2:	e008      	b.n	800c6e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f042 0201 	orr.w	r2, r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
 800c6e4:	e000      	b.n	800c6e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3714      	adds	r7, #20
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop
 800c6f8:	40010000 	.word	0x40010000
 800c6fc:	40000400 	.word	0x40000400
 800c700:	40000800 	.word	0x40000800
 800c704:	40000c00 	.word	0x40000c00
 800c708:	40010400 	.word	0x40010400
 800c70c:	40001800 	.word	0x40001800
 800c710:	40014000 	.word	0x40014000
 800c714:	00010007 	.word	0x00010007

0800c718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e049      	b.n	800c7be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7f8 f940 	bl	80049c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	3304      	adds	r3, #4
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f000 fc92 	bl	800d080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6a1a      	ldr	r2, [r3, #32]
 800c7dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10f      	bne.n	800c806 <HAL_TIM_PWM_DeInit+0x40>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6a1a      	ldr	r2, [r3, #32]
 800c7ec:	f240 4344 	movw	r3, #1092	@ 0x444
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d107      	bne.n	800c806 <HAL_TIM_PWM_DeInit+0x40>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f022 0201 	bic.w	r2, r2, #1
 800c804:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7f8 f95c 	bl	8004ac4 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d109      	bne.n	800c8a4 <HAL_TIM_PWM_Start+0x24>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	bf14      	ite	ne
 800c89c:	2301      	movne	r3, #1
 800c89e:	2300      	moveq	r3, #0
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	e03c      	b.n	800c91e <HAL_TIM_PWM_Start+0x9e>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b04      	cmp	r3, #4
 800c8a8:	d109      	bne.n	800c8be <HAL_TIM_PWM_Start+0x3e>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	bf14      	ite	ne
 800c8b6:	2301      	movne	r3, #1
 800c8b8:	2300      	moveq	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	e02f      	b.n	800c91e <HAL_TIM_PWM_Start+0x9e>
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b08      	cmp	r3, #8
 800c8c2:	d109      	bne.n	800c8d8 <HAL_TIM_PWM_Start+0x58>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	bf14      	ite	ne
 800c8d0:	2301      	movne	r3, #1
 800c8d2:	2300      	moveq	r3, #0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	e022      	b.n	800c91e <HAL_TIM_PWM_Start+0x9e>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b0c      	cmp	r3, #12
 800c8dc:	d109      	bne.n	800c8f2 <HAL_TIM_PWM_Start+0x72>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	bf14      	ite	ne
 800c8ea:	2301      	movne	r3, #1
 800c8ec:	2300      	moveq	r3, #0
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	e015      	b.n	800c91e <HAL_TIM_PWM_Start+0x9e>
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b10      	cmp	r3, #16
 800c8f6:	d109      	bne.n	800c90c <HAL_TIM_PWM_Start+0x8c>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b01      	cmp	r3, #1
 800c902:	bf14      	ite	ne
 800c904:	2301      	movne	r3, #1
 800c906:	2300      	moveq	r3, #0
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	e008      	b.n	800c91e <HAL_TIM_PWM_Start+0x9e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b01      	cmp	r3, #1
 800c916:	bf14      	ite	ne
 800c918:	2301      	movne	r3, #1
 800c91a:	2300      	moveq	r3, #0
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e0a1      	b.n	800ca6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d104      	bne.n	800c936 <HAL_TIM_PWM_Start+0xb6>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2202      	movs	r2, #2
 800c930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c934:	e023      	b.n	800c97e <HAL_TIM_PWM_Start+0xfe>
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d104      	bne.n	800c946 <HAL_TIM_PWM_Start+0xc6>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c944:	e01b      	b.n	800c97e <HAL_TIM_PWM_Start+0xfe>
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	2b08      	cmp	r3, #8
 800c94a:	d104      	bne.n	800c956 <HAL_TIM_PWM_Start+0xd6>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2202      	movs	r2, #2
 800c950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c954:	e013      	b.n	800c97e <HAL_TIM_PWM_Start+0xfe>
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b0c      	cmp	r3, #12
 800c95a:	d104      	bne.n	800c966 <HAL_TIM_PWM_Start+0xe6>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c964:	e00b      	b.n	800c97e <HAL_TIM_PWM_Start+0xfe>
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	2b10      	cmp	r3, #16
 800c96a:	d104      	bne.n	800c976 <HAL_TIM_PWM_Start+0xf6>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2202      	movs	r2, #2
 800c970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c974:	e003      	b.n	800c97e <HAL_TIM_PWM_Start+0xfe>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2201      	movs	r2, #1
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 feea 	bl	800d760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a38      	ldr	r2, [pc, #224]	@ (800ca74 <HAL_TIM_PWM_Start+0x1f4>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d013      	beq.n	800c9be <HAL_TIM_PWM_Start+0x13e>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a37      	ldr	r2, [pc, #220]	@ (800ca78 <HAL_TIM_PWM_Start+0x1f8>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00e      	beq.n	800c9be <HAL_TIM_PWM_Start+0x13e>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a35      	ldr	r2, [pc, #212]	@ (800ca7c <HAL_TIM_PWM_Start+0x1fc>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d009      	beq.n	800c9be <HAL_TIM_PWM_Start+0x13e>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a34      	ldr	r2, [pc, #208]	@ (800ca80 <HAL_TIM_PWM_Start+0x200>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d004      	beq.n	800c9be <HAL_TIM_PWM_Start+0x13e>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a32      	ldr	r2, [pc, #200]	@ (800ca84 <HAL_TIM_PWM_Start+0x204>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d101      	bne.n	800c9c2 <HAL_TIM_PWM_Start+0x142>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e000      	b.n	800c9c4 <HAL_TIM_PWM_Start+0x144>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d007      	beq.n	800c9d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a25      	ldr	r2, [pc, #148]	@ (800ca74 <HAL_TIM_PWM_Start+0x1f4>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d022      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9ea:	d01d      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a25      	ldr	r2, [pc, #148]	@ (800ca88 <HAL_TIM_PWM_Start+0x208>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d018      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a24      	ldr	r2, [pc, #144]	@ (800ca8c <HAL_TIM_PWM_Start+0x20c>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d013      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a22      	ldr	r2, [pc, #136]	@ (800ca90 <HAL_TIM_PWM_Start+0x210>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d00e      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a1a      	ldr	r2, [pc, #104]	@ (800ca78 <HAL_TIM_PWM_Start+0x1f8>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d009      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a1e      	ldr	r2, [pc, #120]	@ (800ca94 <HAL_TIM_PWM_Start+0x214>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d004      	beq.n	800ca28 <HAL_TIM_PWM_Start+0x1a8>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a16      	ldr	r2, [pc, #88]	@ (800ca7c <HAL_TIM_PWM_Start+0x1fc>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d115      	bne.n	800ca54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	689a      	ldr	r2, [r3, #8]
 800ca2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ca98 <HAL_TIM_PWM_Start+0x218>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b06      	cmp	r3, #6
 800ca38:	d015      	beq.n	800ca66 <HAL_TIM_PWM_Start+0x1e6>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca40:	d011      	beq.n	800ca66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f042 0201 	orr.w	r2, r2, #1
 800ca50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca52:	e008      	b.n	800ca66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f042 0201 	orr.w	r2, r2, #1
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	e000      	b.n	800ca68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	40010000 	.word	0x40010000
 800ca78:	40010400 	.word	0x40010400
 800ca7c:	40014000 	.word	0x40014000
 800ca80:	40014400 	.word	0x40014400
 800ca84:	40014800 	.word	0x40014800
 800ca88:	40000400 	.word	0x40000400
 800ca8c:	40000800 	.word	0x40000800
 800ca90:	40000c00 	.word	0x40000c00
 800ca94:	40001800 	.word	0x40001800
 800ca98:	00010007 	.word	0x00010007

0800ca9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2200      	movs	r2, #0
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fe56 	bl	800d760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a3e      	ldr	r2, [pc, #248]	@ (800cbb4 <HAL_TIM_PWM_Stop+0x118>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d013      	beq.n	800cae6 <HAL_TIM_PWM_Stop+0x4a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a3d      	ldr	r2, [pc, #244]	@ (800cbb8 <HAL_TIM_PWM_Stop+0x11c>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d00e      	beq.n	800cae6 <HAL_TIM_PWM_Stop+0x4a>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a3b      	ldr	r2, [pc, #236]	@ (800cbbc <HAL_TIM_PWM_Stop+0x120>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d009      	beq.n	800cae6 <HAL_TIM_PWM_Stop+0x4a>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a3a      	ldr	r2, [pc, #232]	@ (800cbc0 <HAL_TIM_PWM_Stop+0x124>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d004      	beq.n	800cae6 <HAL_TIM_PWM_Stop+0x4a>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a38      	ldr	r2, [pc, #224]	@ (800cbc4 <HAL_TIM_PWM_Stop+0x128>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d101      	bne.n	800caea <HAL_TIM_PWM_Stop+0x4e>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e000      	b.n	800caec <HAL_TIM_PWM_Stop+0x50>
 800caea:	2300      	movs	r3, #0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d017      	beq.n	800cb20 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6a1a      	ldr	r2, [r3, #32]
 800caf6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cafa:	4013      	ands	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10f      	bne.n	800cb20 <HAL_TIM_PWM_Stop+0x84>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6a1a      	ldr	r2, [r3, #32]
 800cb06:	f240 4344 	movw	r3, #1092	@ 0x444
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d107      	bne.n	800cb20 <HAL_TIM_PWM_Stop+0x84>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cb1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6a1a      	ldr	r2, [r3, #32]
 800cb26:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10f      	bne.n	800cb50 <HAL_TIM_PWM_Stop+0xb4>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6a1a      	ldr	r2, [r3, #32]
 800cb36:	f240 4344 	movw	r3, #1092	@ 0x444
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d107      	bne.n	800cb50 <HAL_TIM_PWM_Stop+0xb4>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f022 0201 	bic.w	r2, r2, #1
 800cb4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d104      	bne.n	800cb60 <HAL_TIM_PWM_Stop+0xc4>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb5e:	e023      	b.n	800cba8 <HAL_TIM_PWM_Stop+0x10c>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	d104      	bne.n	800cb70 <HAL_TIM_PWM_Stop+0xd4>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb6e:	e01b      	b.n	800cba8 <HAL_TIM_PWM_Stop+0x10c>
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b08      	cmp	r3, #8
 800cb74:	d104      	bne.n	800cb80 <HAL_TIM_PWM_Stop+0xe4>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb7e:	e013      	b.n	800cba8 <HAL_TIM_PWM_Stop+0x10c>
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	2b0c      	cmp	r3, #12
 800cb84:	d104      	bne.n	800cb90 <HAL_TIM_PWM_Stop+0xf4>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cb8e:	e00b      	b.n	800cba8 <HAL_TIM_PWM_Stop+0x10c>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b10      	cmp	r3, #16
 800cb94:	d104      	bne.n	800cba0 <HAL_TIM_PWM_Stop+0x104>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb9e:	e003      	b.n	800cba8 <HAL_TIM_PWM_Stop+0x10c>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	40010000 	.word	0x40010000
 800cbb8:	40010400 	.word	0x40010400
 800cbbc:	40014000 	.word	0x40014000
 800cbc0:	40014400 	.word	0x40014400
 800cbc4:	40014800 	.word	0x40014800

0800cbc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	f003 0302 	and.w	r3, r3, #2
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d122      	bne.n	800cc24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	f003 0302 	and.w	r3, r3, #2
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d11b      	bne.n	800cc24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f06f 0202 	mvn.w	r2, #2
 800cbf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	f003 0303 	and.w	r3, r3, #3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fa1a 	bl	800d044 <HAL_TIM_IC_CaptureCallback>
 800cc10:	e005      	b.n	800cc1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fa0c 	bl	800d030 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fa1d 	bl	800d058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	f003 0304 	and.w	r3, r3, #4
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	d122      	bne.n	800cc78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f003 0304 	and.w	r3, r3, #4
 800cc3c:	2b04      	cmp	r3, #4
 800cc3e:	d11b      	bne.n	800cc78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f06f 0204 	mvn.w	r2, #4
 800cc48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f9f0 	bl	800d044 <HAL_TIM_IC_CaptureCallback>
 800cc64:	e005      	b.n	800cc72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f9e2 	bl	800d030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f9f3 	bl	800d058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	691b      	ldr	r3, [r3, #16]
 800cc7e:	f003 0308 	and.w	r3, r3, #8
 800cc82:	2b08      	cmp	r3, #8
 800cc84:	d122      	bne.n	800cccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b08      	cmp	r3, #8
 800cc92:	d11b      	bne.n	800cccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f06f 0208 	mvn.w	r2, #8
 800cc9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2204      	movs	r2, #4
 800cca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f9c6 	bl	800d044 <HAL_TIM_IC_CaptureCallback>
 800ccb8:	e005      	b.n	800ccc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f9b8 	bl	800d030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f9c9 	bl	800d058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	f003 0310 	and.w	r3, r3, #16
 800ccd6:	2b10      	cmp	r3, #16
 800ccd8:	d122      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b10      	cmp	r3, #16
 800cce6:	d11b      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f06f 0210 	mvn.w	r2, #16
 800ccf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2208      	movs	r2, #8
 800ccf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	69db      	ldr	r3, [r3, #28]
 800ccfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d003      	beq.n	800cd0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f99c 	bl	800d044 <HAL_TIM_IC_CaptureCallback>
 800cd0c:	e005      	b.n	800cd1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f98e 	bl	800d030 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f99f 	bl	800d058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d10e      	bne.n	800cd4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f003 0301 	and.w	r3, r3, #1
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d107      	bne.n	800cd4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f06f 0201 	mvn.w	r2, #1
 800cd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 fe52 	bl	800d9f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd56:	2b80      	cmp	r3, #128	@ 0x80
 800cd58:	d10e      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd64:	2b80      	cmp	r3, #128	@ 0x80
 800cd66:	d107      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800cd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fdb2 	bl	800d8dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd86:	d10e      	bne.n	800cda6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd92:	2b80      	cmp	r3, #128	@ 0x80
 800cd94:	d107      	bne.n	800cda6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cd9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fda5 	bl	800d8f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdb0:	2b40      	cmp	r3, #64	@ 0x40
 800cdb2:	d10e      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdbe:	2b40      	cmp	r3, #64	@ 0x40
 800cdc0:	d107      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cdca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f94d 	bl	800d06c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	f003 0320 	and.w	r3, r3, #32
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	d10e      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	f003 0320 	and.w	r3, r3, #32
 800cdea:	2b20      	cmp	r3, #32
 800cdec:	d107      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f06f 0220 	mvn.w	r2, #32
 800cdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fd65 	bl	800d8c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdfe:	bf00      	nop
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
	...

0800ce08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d101      	bne.n	800ce26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce22:	2302      	movs	r3, #2
 800ce24:	e0ff      	b.n	800d026 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b14      	cmp	r3, #20
 800ce32:	f200 80f0 	bhi.w	800d016 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce36:	a201      	add	r2, pc, #4	@ (adr r2, 800ce3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce91 	.word	0x0800ce91
 800ce40:	0800d017 	.word	0x0800d017
 800ce44:	0800d017 	.word	0x0800d017
 800ce48:	0800d017 	.word	0x0800d017
 800ce4c:	0800ced1 	.word	0x0800ced1
 800ce50:	0800d017 	.word	0x0800d017
 800ce54:	0800d017 	.word	0x0800d017
 800ce58:	0800d017 	.word	0x0800d017
 800ce5c:	0800cf13 	.word	0x0800cf13
 800ce60:	0800d017 	.word	0x0800d017
 800ce64:	0800d017 	.word	0x0800d017
 800ce68:	0800d017 	.word	0x0800d017
 800ce6c:	0800cf53 	.word	0x0800cf53
 800ce70:	0800d017 	.word	0x0800d017
 800ce74:	0800d017 	.word	0x0800d017
 800ce78:	0800d017 	.word	0x0800d017
 800ce7c:	0800cf95 	.word	0x0800cf95
 800ce80:	0800d017 	.word	0x0800d017
 800ce84:	0800d017 	.word	0x0800d017
 800ce88:	0800d017 	.word	0x0800d017
 800ce8c:	0800cfd5 	.word	0x0800cfd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 f98c 	bl	800d1b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	699a      	ldr	r2, [r3, #24]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f042 0208 	orr.w	r2, r2, #8
 800ceaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0204 	bic.w	r2, r2, #4
 800ceba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6999      	ldr	r1, [r3, #24]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	691a      	ldr	r2, [r3, #16]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	619a      	str	r2, [r3, #24]
      break;
 800cece:	e0a5      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68b9      	ldr	r1, [r7, #8]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 f9fc 	bl	800d2d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	699a      	ldr	r2, [r3, #24]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ceea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cefa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6999      	ldr	r1, [r3, #24]
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	021a      	lsls	r2, r3, #8
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	430a      	orrs	r2, r1
 800cf0e:	619a      	str	r2, [r3, #24]
      break;
 800cf10:	e084      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fa65 	bl	800d3e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	69da      	ldr	r2, [r3, #28]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f042 0208 	orr.w	r2, r2, #8
 800cf2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69da      	ldr	r2, [r3, #28]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f022 0204 	bic.w	r2, r2, #4
 800cf3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69d9      	ldr	r1, [r3, #28]
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	691a      	ldr	r2, [r3, #16]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	430a      	orrs	r2, r1
 800cf4e:	61da      	str	r2, [r3, #28]
      break;
 800cf50:	e064      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 facd 	bl	800d4f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69da      	ldr	r2, [r3, #28]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cf6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69da      	ldr	r2, [r3, #28]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	69d9      	ldr	r1, [r3, #28]
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	021a      	lsls	r2, r3, #8
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	61da      	str	r2, [r3, #28]
      break;
 800cf92:	e043      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68b9      	ldr	r1, [r7, #8]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 fb16 	bl	800d5cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0208 	orr.w	r2, r2, #8
 800cfae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f022 0204 	bic.w	r2, r2, #4
 800cfbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	691a      	ldr	r2, [r3, #16]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cfd2:	e023      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68b9      	ldr	r1, [r7, #8]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fb5a 	bl	800d694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cfee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cffe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	021a      	lsls	r2, r3, #8
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	430a      	orrs	r2, r1
 800d012:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d014:	e002      	b.n	800d01c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	75fb      	strb	r3, [r7, #23]
      break;
 800d01a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d024:	7dfb      	ldrb	r3, [r7, #23]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop

0800d030 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d074:	bf00      	nop
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a40      	ldr	r2, [pc, #256]	@ (800d194 <TIM_Base_SetConfig+0x114>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d013      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d09e:	d00f      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a3d      	ldr	r2, [pc, #244]	@ (800d198 <TIM_Base_SetConfig+0x118>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00b      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a3c      	ldr	r2, [pc, #240]	@ (800d19c <TIM_Base_SetConfig+0x11c>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d007      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a3b      	ldr	r2, [pc, #236]	@ (800d1a0 <TIM_Base_SetConfig+0x120>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d003      	beq.n	800d0c0 <TIM_Base_SetConfig+0x40>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a3a      	ldr	r2, [pc, #232]	@ (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d108      	bne.n	800d0d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a2f      	ldr	r2, [pc, #188]	@ (800d194 <TIM_Base_SetConfig+0x114>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d01f      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0e0:	d01b      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a2c      	ldr	r2, [pc, #176]	@ (800d198 <TIM_Base_SetConfig+0x118>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d017      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a2b      	ldr	r2, [pc, #172]	@ (800d19c <TIM_Base_SetConfig+0x11c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d013      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a2a      	ldr	r2, [pc, #168]	@ (800d1a0 <TIM_Base_SetConfig+0x120>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d00f      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a29      	ldr	r2, [pc, #164]	@ (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00b      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a28      	ldr	r2, [pc, #160]	@ (800d1a8 <TIM_Base_SetConfig+0x128>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d007      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a27      	ldr	r2, [pc, #156]	@ (800d1ac <TIM_Base_SetConfig+0x12c>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d003      	beq.n	800d11a <TIM_Base_SetConfig+0x9a>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a26      	ldr	r2, [pc, #152]	@ (800d1b0 <TIM_Base_SetConfig+0x130>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d108      	bne.n	800d12c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	4313      	orrs	r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	4313      	orrs	r3, r2
 800d138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	689a      	ldr	r2, [r3, #8]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a10      	ldr	r2, [pc, #64]	@ (800d194 <TIM_Base_SetConfig+0x114>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d00f      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a12      	ldr	r2, [pc, #72]	@ (800d1a4 <TIM_Base_SetConfig+0x124>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d00b      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a11      	ldr	r2, [pc, #68]	@ (800d1a8 <TIM_Base_SetConfig+0x128>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d007      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a10      	ldr	r2, [pc, #64]	@ (800d1ac <TIM_Base_SetConfig+0x12c>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d003      	beq.n	800d178 <TIM_Base_SetConfig+0xf8>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a0f      	ldr	r2, [pc, #60]	@ (800d1b0 <TIM_Base_SetConfig+0x130>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d103      	bne.n	800d180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	615a      	str	r2, [r3, #20]
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	40010000 	.word	0x40010000
 800d198:	40000400 	.word	0x40000400
 800d19c:	40000800 	.word	0x40000800
 800d1a0:	40000c00 	.word	0x40000c00
 800d1a4:	40010400 	.word	0x40010400
 800d1a8:	40014000 	.word	0x40014000
 800d1ac:	40014400 	.word	0x40014400
 800d1b0:	40014800 	.word	0x40014800

0800d1b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	f023 0201 	bic.w	r2, r3, #1
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	4b37      	ldr	r3, [pc, #220]	@ (800d2bc <TIM_OC1_SetConfig+0x108>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f023 0303 	bic.w	r3, r3, #3
 800d1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	f023 0302 	bic.w	r3, r3, #2
 800d1fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	4313      	orrs	r3, r2
 800d206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a2d      	ldr	r2, [pc, #180]	@ (800d2c0 <TIM_OC1_SetConfig+0x10c>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d00f      	beq.n	800d230 <TIM_OC1_SetConfig+0x7c>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a2c      	ldr	r2, [pc, #176]	@ (800d2c4 <TIM_OC1_SetConfig+0x110>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d00b      	beq.n	800d230 <TIM_OC1_SetConfig+0x7c>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a2b      	ldr	r2, [pc, #172]	@ (800d2c8 <TIM_OC1_SetConfig+0x114>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d007      	beq.n	800d230 <TIM_OC1_SetConfig+0x7c>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a2a      	ldr	r2, [pc, #168]	@ (800d2cc <TIM_OC1_SetConfig+0x118>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d003      	beq.n	800d230 <TIM_OC1_SetConfig+0x7c>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a29      	ldr	r2, [pc, #164]	@ (800d2d0 <TIM_OC1_SetConfig+0x11c>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d10c      	bne.n	800d24a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	f023 0308 	bic.w	r3, r3, #8
 800d236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4313      	orrs	r3, r2
 800d240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f023 0304 	bic.w	r3, r3, #4
 800d248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a1c      	ldr	r2, [pc, #112]	@ (800d2c0 <TIM_OC1_SetConfig+0x10c>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d00f      	beq.n	800d272 <TIM_OC1_SetConfig+0xbe>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a1b      	ldr	r2, [pc, #108]	@ (800d2c4 <TIM_OC1_SetConfig+0x110>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d00b      	beq.n	800d272 <TIM_OC1_SetConfig+0xbe>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a1a      	ldr	r2, [pc, #104]	@ (800d2c8 <TIM_OC1_SetConfig+0x114>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d007      	beq.n	800d272 <TIM_OC1_SetConfig+0xbe>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a19      	ldr	r2, [pc, #100]	@ (800d2cc <TIM_OC1_SetConfig+0x118>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d003      	beq.n	800d272 <TIM_OC1_SetConfig+0xbe>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a18      	ldr	r2, [pc, #96]	@ (800d2d0 <TIM_OC1_SetConfig+0x11c>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d111      	bne.n	800d296 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	4313      	orrs	r3, r2
 800d28a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	4313      	orrs	r3, r2
 800d294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	693a      	ldr	r2, [r7, #16]
 800d29a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	621a      	str	r2, [r3, #32]
}
 800d2b0:	bf00      	nop
 800d2b2:	371c      	adds	r7, #28
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	fffeff8f 	.word	0xfffeff8f
 800d2c0:	40010000 	.word	0x40010000
 800d2c4:	40010400 	.word	0x40010400
 800d2c8:	40014000 	.word	0x40014000
 800d2cc:	40014400 	.word	0x40014400
 800d2d0:	40014800 	.word	0x40014800

0800d2d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	f023 0210 	bic.w	r2, r3, #16
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4b34      	ldr	r3, [pc, #208]	@ (800d3d0 <TIM_OC2_SetConfig+0xfc>)
 800d300:	4013      	ands	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d30a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	021b      	lsls	r3, r3, #8
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	4313      	orrs	r3, r2
 800d316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	f023 0320 	bic.w	r3, r3, #32
 800d31e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	4313      	orrs	r3, r2
 800d32a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a29      	ldr	r2, [pc, #164]	@ (800d3d4 <TIM_OC2_SetConfig+0x100>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d003      	beq.n	800d33c <TIM_OC2_SetConfig+0x68>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a28      	ldr	r2, [pc, #160]	@ (800d3d8 <TIM_OC2_SetConfig+0x104>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d10d      	bne.n	800d358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	011b      	lsls	r3, r3, #4
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a1e      	ldr	r2, [pc, #120]	@ (800d3d4 <TIM_OC2_SetConfig+0x100>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00f      	beq.n	800d380 <TIM_OC2_SetConfig+0xac>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a1d      	ldr	r2, [pc, #116]	@ (800d3d8 <TIM_OC2_SetConfig+0x104>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d00b      	beq.n	800d380 <TIM_OC2_SetConfig+0xac>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a1c      	ldr	r2, [pc, #112]	@ (800d3dc <TIM_OC2_SetConfig+0x108>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d007      	beq.n	800d380 <TIM_OC2_SetConfig+0xac>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a1b      	ldr	r2, [pc, #108]	@ (800d3e0 <TIM_OC2_SetConfig+0x10c>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d003      	beq.n	800d380 <TIM_OC2_SetConfig+0xac>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a1a      	ldr	r2, [pc, #104]	@ (800d3e4 <TIM_OC2_SetConfig+0x110>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d113      	bne.n	800d3a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d38e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	4313      	orrs	r3, r2
 800d39a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	685a      	ldr	r2, [r3, #4]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	621a      	str	r2, [r3, #32]
}
 800d3c2:	bf00      	nop
 800d3c4:	371c      	adds	r7, #28
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	feff8fff 	.word	0xfeff8fff
 800d3d4:	40010000 	.word	0x40010000
 800d3d8:	40010400 	.word	0x40010400
 800d3dc:	40014000 	.word	0x40014000
 800d3e0:	40014400 	.word	0x40014400
 800d3e4:	40014800 	.word	0x40014800

0800d3e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b087      	sub	sp, #28
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a1b      	ldr	r3, [r3, #32]
 800d402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	69db      	ldr	r3, [r3, #28]
 800d40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	4b33      	ldr	r3, [pc, #204]	@ (800d4e0 <TIM_OC3_SetConfig+0xf8>)
 800d414:	4013      	ands	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f023 0303 	bic.w	r3, r3, #3
 800d41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	689b      	ldr	r3, [r3, #8]
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a28      	ldr	r2, [pc, #160]	@ (800d4e4 <TIM_OC3_SetConfig+0xfc>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d003      	beq.n	800d44e <TIM_OC3_SetConfig+0x66>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a27      	ldr	r2, [pc, #156]	@ (800d4e8 <TIM_OC3_SetConfig+0x100>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d10d      	bne.n	800d46a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	021b      	lsls	r3, r3, #8
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	4313      	orrs	r3, r2
 800d460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4e4 <TIM_OC3_SetConfig+0xfc>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d00f      	beq.n	800d492 <TIM_OC3_SetConfig+0xaa>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a1c      	ldr	r2, [pc, #112]	@ (800d4e8 <TIM_OC3_SetConfig+0x100>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d00b      	beq.n	800d492 <TIM_OC3_SetConfig+0xaa>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a1b      	ldr	r2, [pc, #108]	@ (800d4ec <TIM_OC3_SetConfig+0x104>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d007      	beq.n	800d492 <TIM_OC3_SetConfig+0xaa>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a1a      	ldr	r2, [pc, #104]	@ (800d4f0 <TIM_OC3_SetConfig+0x108>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d003      	beq.n	800d492 <TIM_OC3_SetConfig+0xaa>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a19      	ldr	r2, [pc, #100]	@ (800d4f4 <TIM_OC3_SetConfig+0x10c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d113      	bne.n	800d4ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d4a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	011b      	lsls	r3, r3, #4
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	68fa      	ldr	r2, [r7, #12]
 800d4c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	685a      	ldr	r2, [r3, #4]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	621a      	str	r2, [r3, #32]
}
 800d4d4:	bf00      	nop
 800d4d6:	371c      	adds	r7, #28
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	fffeff8f 	.word	0xfffeff8f
 800d4e4:	40010000 	.word	0x40010000
 800d4e8:	40010400 	.word	0x40010400
 800d4ec:	40014000 	.word	0x40014000
 800d4f0:	40014400 	.word	0x40014400
 800d4f4:	40014800 	.word	0x40014800

0800d4f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	69db      	ldr	r3, [r3, #28]
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	4b24      	ldr	r3, [pc, #144]	@ (800d5b4 <TIM_OC4_SetConfig+0xbc>)
 800d524:	4013      	ands	r3, r2
 800d526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d52e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	021b      	lsls	r3, r3, #8
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	4313      	orrs	r3, r2
 800d53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	031b      	lsls	r3, r3, #12
 800d54a:	693a      	ldr	r2, [r7, #16]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a19      	ldr	r2, [pc, #100]	@ (800d5b8 <TIM_OC4_SetConfig+0xc0>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d00f      	beq.n	800d578 <TIM_OC4_SetConfig+0x80>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a18      	ldr	r2, [pc, #96]	@ (800d5bc <TIM_OC4_SetConfig+0xc4>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d00b      	beq.n	800d578 <TIM_OC4_SetConfig+0x80>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a17      	ldr	r2, [pc, #92]	@ (800d5c0 <TIM_OC4_SetConfig+0xc8>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d007      	beq.n	800d578 <TIM_OC4_SetConfig+0x80>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a16      	ldr	r2, [pc, #88]	@ (800d5c4 <TIM_OC4_SetConfig+0xcc>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d003      	beq.n	800d578 <TIM_OC4_SetConfig+0x80>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a15      	ldr	r2, [pc, #84]	@ (800d5c8 <TIM_OC4_SetConfig+0xd0>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d109      	bne.n	800d58c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d57e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	019b      	lsls	r3, r3, #6
 800d586:	697a      	ldr	r2, [r7, #20]
 800d588:	4313      	orrs	r3, r2
 800d58a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68fa      	ldr	r2, [r7, #12]
 800d596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	693a      	ldr	r2, [r7, #16]
 800d5a4:	621a      	str	r2, [r3, #32]
}
 800d5a6:	bf00      	nop
 800d5a8:	371c      	adds	r7, #28
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	feff8fff 	.word	0xfeff8fff
 800d5b8:	40010000 	.word	0x40010000
 800d5bc:	40010400 	.word	0x40010400
 800d5c0:	40014000 	.word	0x40014000
 800d5c4:	40014400 	.word	0x40014400
 800d5c8:	40014800 	.word	0x40014800

0800d5cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b087      	sub	sp, #28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	4b21      	ldr	r3, [pc, #132]	@ (800d67c <TIM_OC5_SetConfig+0xb0>)
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d60c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	041b      	lsls	r3, r3, #16
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	4313      	orrs	r3, r2
 800d618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a18      	ldr	r2, [pc, #96]	@ (800d680 <TIM_OC5_SetConfig+0xb4>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d00f      	beq.n	800d642 <TIM_OC5_SetConfig+0x76>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a17      	ldr	r2, [pc, #92]	@ (800d684 <TIM_OC5_SetConfig+0xb8>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d00b      	beq.n	800d642 <TIM_OC5_SetConfig+0x76>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4a16      	ldr	r2, [pc, #88]	@ (800d688 <TIM_OC5_SetConfig+0xbc>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d007      	beq.n	800d642 <TIM_OC5_SetConfig+0x76>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a15      	ldr	r2, [pc, #84]	@ (800d68c <TIM_OC5_SetConfig+0xc0>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d003      	beq.n	800d642 <TIM_OC5_SetConfig+0x76>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a14      	ldr	r2, [pc, #80]	@ (800d690 <TIM_OC5_SetConfig+0xc4>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d109      	bne.n	800d656 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d648:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	021b      	lsls	r3, r3, #8
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	4313      	orrs	r3, r2
 800d654:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	697a      	ldr	r2, [r7, #20]
 800d65a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	621a      	str	r2, [r3, #32]
}
 800d670:	bf00      	nop
 800d672:	371c      	adds	r7, #28
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	fffeff8f 	.word	0xfffeff8f
 800d680:	40010000 	.word	0x40010000
 800d684:	40010400 	.word	0x40010400
 800d688:	40014000 	.word	0x40014000
 800d68c:	40014400 	.word	0x40014400
 800d690:	40014800 	.word	0x40014800

0800d694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d694:	b480      	push	{r7}
 800d696:	b087      	sub	sp, #28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	4b22      	ldr	r3, [pc, #136]	@ (800d748 <TIM_OC6_SetConfig+0xb4>)
 800d6c0:	4013      	ands	r3, r2
 800d6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	021b      	lsls	r3, r3, #8
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d6d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	051b      	lsls	r3, r3, #20
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a19      	ldr	r2, [pc, #100]	@ (800d74c <TIM_OC6_SetConfig+0xb8>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d00f      	beq.n	800d70c <TIM_OC6_SetConfig+0x78>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a18      	ldr	r2, [pc, #96]	@ (800d750 <TIM_OC6_SetConfig+0xbc>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d00b      	beq.n	800d70c <TIM_OC6_SetConfig+0x78>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a17      	ldr	r2, [pc, #92]	@ (800d754 <TIM_OC6_SetConfig+0xc0>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d007      	beq.n	800d70c <TIM_OC6_SetConfig+0x78>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a16      	ldr	r2, [pc, #88]	@ (800d758 <TIM_OC6_SetConfig+0xc4>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d003      	beq.n	800d70c <TIM_OC6_SetConfig+0x78>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a15      	ldr	r2, [pc, #84]	@ (800d75c <TIM_OC6_SetConfig+0xc8>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d109      	bne.n	800d720 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d712:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	029b      	lsls	r3, r3, #10
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	621a      	str	r2, [r3, #32]
}
 800d73a:	bf00      	nop
 800d73c:	371c      	adds	r7, #28
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	feff8fff 	.word	0xfeff8fff
 800d74c:	40010000 	.word	0x40010000
 800d750:	40010400 	.word	0x40010400
 800d754:	40014000 	.word	0x40014000
 800d758:	40014400 	.word	0x40014400
 800d75c:	40014800 	.word	0x40014800

0800d760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d760:	b480      	push	{r7}
 800d762:	b087      	sub	sp, #28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f003 031f 	and.w	r3, r3, #31
 800d772:	2201      	movs	r2, #1
 800d774:	fa02 f303 	lsl.w	r3, r2, r3
 800d778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6a1a      	ldr	r2, [r3, #32]
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	43db      	mvns	r3, r3
 800d782:	401a      	ands	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6a1a      	ldr	r2, [r3, #32]
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f003 031f 	and.w	r3, r3, #31
 800d792:	6879      	ldr	r1, [r7, #4]
 800d794:	fa01 f303 	lsl.w	r3, r1, r3
 800d798:	431a      	orrs	r2, r3
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	621a      	str	r2, [r3, #32]
}
 800d79e:	bf00      	nop
 800d7a0:	371c      	adds	r7, #28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
	...

0800d7ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d101      	bne.n	800d7c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	e06d      	b.n	800d8a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2202      	movs	r2, #2
 800d7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a30      	ldr	r2, [pc, #192]	@ (800d8ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d004      	beq.n	800d7f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a2f      	ldr	r2, [pc, #188]	@ (800d8b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d108      	bne.n	800d80a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d7fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d810:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	4313      	orrs	r3, r2
 800d81a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a20      	ldr	r2, [pc, #128]	@ (800d8ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d022      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d836:	d01d      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a1d      	ldr	r2, [pc, #116]	@ (800d8b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d018      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a1c      	ldr	r2, [pc, #112]	@ (800d8b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d013      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a1a      	ldr	r2, [pc, #104]	@ (800d8bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d00e      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a15      	ldr	r2, [pc, #84]	@ (800d8b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d009      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a16      	ldr	r2, [pc, #88]	@ (800d8c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d004      	beq.n	800d874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a15      	ldr	r2, [pc, #84]	@ (800d8c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d10c      	bne.n	800d88e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d87a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	4313      	orrs	r3, r2
 800d884:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	40010000 	.word	0x40010000
 800d8b0:	40010400 	.word	0x40010400
 800d8b4:	40000400 	.word	0x40000400
 800d8b8:	40000800 	.word	0x40000800
 800d8bc:	40000c00 	.word	0x40000c00
 800d8c0:	40001800 	.word	0x40001800
 800d8c4:	40014000 	.word	0x40014000

0800d8c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b090      	sub	sp, #64	@ 0x40
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d90c:	4b33      	ldr	r3, [pc, #204]	@ (800d9dc <HAL_InitTick+0xd8>)
 800d90e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d912:	4a32      	ldr	r2, [pc, #200]	@ (800d9dc <HAL_InitTick+0xd8>)
 800d914:	f043 0310 	orr.w	r3, r3, #16
 800d918:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d91c:	4b2f      	ldr	r3, [pc, #188]	@ (800d9dc <HAL_InitTick+0xd8>)
 800d91e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d922:	f003 0310 	and.w	r3, r3, #16
 800d926:	60bb      	str	r3, [r7, #8]
 800d928:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d92a:	f107 020c 	add.w	r2, r7, #12
 800d92e:	f107 0310 	add.w	r3, r7, #16
 800d932:	4611      	mov	r1, r2
 800d934:	4618      	mov	r0, r3
 800d936:	f7fc f833 	bl	80099a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d940:	2b00      	cmp	r3, #0
 800d942:	d103      	bne.n	800d94c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d944:	f7fc f800 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800d948:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d94a:	e004      	b.n	800d956 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d94c:	f7fb fffc 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800d950:	4603      	mov	r3, r0
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d958:	4a21      	ldr	r2, [pc, #132]	@ (800d9e0 <HAL_InitTick+0xdc>)
 800d95a:	fba2 2303 	umull	r2, r3, r2, r3
 800d95e:	0c9b      	lsrs	r3, r3, #18
 800d960:	3b01      	subs	r3, #1
 800d962:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 800d964:	4b1f      	ldr	r3, [pc, #124]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d966:	4a20      	ldr	r2, [pc, #128]	@ (800d9e8 <HAL_InitTick+0xe4>)
 800d968:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800d96a:	4b1e      	ldr	r3, [pc, #120]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d96c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800d970:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800d972:	4a1c      	ldr	r2, [pc, #112]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d976:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 800d978:	4b1a      	ldr	r3, [pc, #104]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d97a:	2200      	movs	r2, #0
 800d97c:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d97e:	4b19      	ldr	r3, [pc, #100]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d980:	2200      	movs	r2, #0
 800d982:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 800d984:	4817      	ldr	r0, [pc, #92]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d986:	f7fe fdee 	bl	800c566 <HAL_TIM_Base_Init>
 800d98a:	4603      	mov	r3, r0
 800d98c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 800d990:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d994:	2b00      	cmp	r3, #0
 800d996:	d11b      	bne.n	800d9d0 <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 800d998:	4812      	ldr	r0, [pc, #72]	@ (800d9e4 <HAL_InitTick+0xe0>)
 800d99a:	f7fe fe45 	bl	800c628 <HAL_TIM_Base_Start_IT>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 800d9a4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d111      	bne.n	800d9d0 <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d9ac:	2036      	movs	r0, #54	@ 0x36
 800d9ae:	f7f8 ff95 	bl	80068dc <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b0f      	cmp	r3, #15
 800d9b6:	d808      	bhi.n	800d9ca <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	6879      	ldr	r1, [r7, #4]
 800d9bc:	2036      	movs	r0, #54	@ 0x36
 800d9be:	f7f8 ff73 	bl	80068a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d9c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d9ec <HAL_InitTick+0xe8>)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	e002      	b.n	800d9d0 <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 800d9d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3740      	adds	r7, #64	@ 0x40
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	58024400 	.word	0x58024400
 800d9e0:	431bde83 	.word	0x431bde83
 800d9e4:	24001158 	.word	0x24001158
 800d9e8:	40001000 	.word	0x40001000
 800d9ec:	24000080 	.word	0x24000080

0800d9f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800d9f8:	f7f3 fe8a 	bl	8001710 <HAL_IncTick>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800da08:	4802      	ldr	r0, [pc, #8]	@ (800da14 <TIM6_DAC_IRQHandler+0x10>)
 800da0a:	f7ff f8dd 	bl	800cbc8 <HAL_TIM_IRQHandler>
}
 800da0e:	bf00      	nop
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	24001158 	.word	0x24001158

0800da18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e042      	b.n	800dab0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da30:	2b00      	cmp	r3, #0
 800da32:	d106      	bne.n	800da42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7f7 fa49 	bl	8004ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2224      	movs	r2, #36	@ 0x24
 800da46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f022 0201 	bic.w	r2, r2, #1
 800da58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f8ba 	bl	800dbd4 <UART_SetConfig>
 800da60:	4603      	mov	r3, r0
 800da62:	2b01      	cmp	r3, #1
 800da64:	d101      	bne.n	800da6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e022      	b.n	800dab0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 fe16 	bl	800e6a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800da86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	689a      	ldr	r2, [r3, #8]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800da96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f042 0201 	orr.w	r2, r2, #1
 800daa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fe9d 	bl	800e7e8 <UART_CheckIdleState>
 800daae:	4603      	mov	r3, r0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08a      	sub	sp, #40	@ 0x28
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	603b      	str	r3, [r7, #0]
 800dac4:	4613      	mov	r3, r2
 800dac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dace:	2b20      	cmp	r3, #32
 800dad0:	d17b      	bne.n	800dbca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <HAL_UART_Transmit+0x26>
 800dad8:	88fb      	ldrh	r3, [r7, #6]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dade:	2301      	movs	r3, #1
 800dae0:	e074      	b.n	800dbcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2221      	movs	r2, #33	@ 0x21
 800daee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800daf2:	f7f7 fabf 	bl	8005074 <HAL_GetTick>
 800daf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	88fa      	ldrh	r2, [r7, #6]
 800dafc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	88fa      	ldrh	r2, [r7, #6]
 800db04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db10:	d108      	bne.n	800db24 <HAL_UART_Transmit+0x6c>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d104      	bne.n	800db24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	61bb      	str	r3, [r7, #24]
 800db22:	e003      	b.n	800db2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db2c:	e030      	b.n	800db90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2200      	movs	r2, #0
 800db36:	2180      	movs	r1, #128	@ 0x80
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 feff 	bl	800e93c <UART_WaitOnFlagUntilTimeout>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d005      	beq.n	800db50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2220      	movs	r2, #32
 800db48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800db4c:	2303      	movs	r3, #3
 800db4e:	e03d      	b.n	800dbcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10b      	bne.n	800db6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	3302      	adds	r3, #2
 800db6a:	61bb      	str	r3, [r7, #24]
 800db6c:	e007      	b.n	800db7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	781a      	ldrb	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	3301      	adds	r3, #1
 800db7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800db84:	b29b      	uxth	r3, r3
 800db86:	3b01      	subs	r3, #1
 800db88:	b29a      	uxth	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800db96:	b29b      	uxth	r3, r3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1c8      	bne.n	800db2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2200      	movs	r2, #0
 800dba4:	2140      	movs	r1, #64	@ 0x40
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f000 fec8 	bl	800e93c <UART_WaitOnFlagUntilTimeout>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d005      	beq.n	800dbbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2220      	movs	r2, #32
 800dbb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800dbba:	2303      	movs	r3, #3
 800dbbc:	e006      	b.n	800dbcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2220      	movs	r2, #32
 800dbc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	e000      	b.n	800dbcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800dbca:	2302      	movs	r3, #2
  }
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3720      	adds	r7, #32
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbd8:	b092      	sub	sp, #72	@ 0x48
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	689a      	ldr	r2, [r3, #8]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	431a      	orrs	r2, r3
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	69db      	ldr	r3, [r3, #28]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	4bbe      	ldr	r3, [pc, #760]	@ (800defc <UART_SetConfig+0x328>)
 800dc04:	4013      	ands	r3, r2
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	6812      	ldr	r2, [r2, #0]
 800dc0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc0c:	430b      	orrs	r3, r1
 800dc0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	68da      	ldr	r2, [r3, #12]
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	699b      	ldr	r3, [r3, #24]
 800dc2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4ab3      	ldr	r2, [pc, #716]	@ (800df00 <UART_SetConfig+0x32c>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d004      	beq.n	800dc40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	689a      	ldr	r2, [r3, #8]
 800dc46:	4baf      	ldr	r3, [pc, #700]	@ (800df04 <UART_SetConfig+0x330>)
 800dc48:	4013      	ands	r3, r2
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	6812      	ldr	r2, [r2, #0]
 800dc4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc50:	430b      	orrs	r3, r1
 800dc52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5a:	f023 010f 	bic.w	r1, r3, #15
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	430a      	orrs	r2, r1
 800dc68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4aa6      	ldr	r2, [pc, #664]	@ (800df08 <UART_SetConfig+0x334>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d177      	bne.n	800dd64 <UART_SetConfig+0x190>
 800dc74:	4ba5      	ldr	r3, [pc, #660]	@ (800df0c <UART_SetConfig+0x338>)
 800dc76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc7c:	2b28      	cmp	r3, #40	@ 0x28
 800dc7e:	d86d      	bhi.n	800dd5c <UART_SetConfig+0x188>
 800dc80:	a201      	add	r2, pc, #4	@ (adr r2, 800dc88 <UART_SetConfig+0xb4>)
 800dc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc86:	bf00      	nop
 800dc88:	0800dd2d 	.word	0x0800dd2d
 800dc8c:	0800dd5d 	.word	0x0800dd5d
 800dc90:	0800dd5d 	.word	0x0800dd5d
 800dc94:	0800dd5d 	.word	0x0800dd5d
 800dc98:	0800dd5d 	.word	0x0800dd5d
 800dc9c:	0800dd5d 	.word	0x0800dd5d
 800dca0:	0800dd5d 	.word	0x0800dd5d
 800dca4:	0800dd5d 	.word	0x0800dd5d
 800dca8:	0800dd35 	.word	0x0800dd35
 800dcac:	0800dd5d 	.word	0x0800dd5d
 800dcb0:	0800dd5d 	.word	0x0800dd5d
 800dcb4:	0800dd5d 	.word	0x0800dd5d
 800dcb8:	0800dd5d 	.word	0x0800dd5d
 800dcbc:	0800dd5d 	.word	0x0800dd5d
 800dcc0:	0800dd5d 	.word	0x0800dd5d
 800dcc4:	0800dd5d 	.word	0x0800dd5d
 800dcc8:	0800dd3d 	.word	0x0800dd3d
 800dccc:	0800dd5d 	.word	0x0800dd5d
 800dcd0:	0800dd5d 	.word	0x0800dd5d
 800dcd4:	0800dd5d 	.word	0x0800dd5d
 800dcd8:	0800dd5d 	.word	0x0800dd5d
 800dcdc:	0800dd5d 	.word	0x0800dd5d
 800dce0:	0800dd5d 	.word	0x0800dd5d
 800dce4:	0800dd5d 	.word	0x0800dd5d
 800dce8:	0800dd45 	.word	0x0800dd45
 800dcec:	0800dd5d 	.word	0x0800dd5d
 800dcf0:	0800dd5d 	.word	0x0800dd5d
 800dcf4:	0800dd5d 	.word	0x0800dd5d
 800dcf8:	0800dd5d 	.word	0x0800dd5d
 800dcfc:	0800dd5d 	.word	0x0800dd5d
 800dd00:	0800dd5d 	.word	0x0800dd5d
 800dd04:	0800dd5d 	.word	0x0800dd5d
 800dd08:	0800dd4d 	.word	0x0800dd4d
 800dd0c:	0800dd5d 	.word	0x0800dd5d
 800dd10:	0800dd5d 	.word	0x0800dd5d
 800dd14:	0800dd5d 	.word	0x0800dd5d
 800dd18:	0800dd5d 	.word	0x0800dd5d
 800dd1c:	0800dd5d 	.word	0x0800dd5d
 800dd20:	0800dd5d 	.word	0x0800dd5d
 800dd24:	0800dd5d 	.word	0x0800dd5d
 800dd28:	0800dd55 	.word	0x0800dd55
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e222      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd34:	2304      	movs	r3, #4
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e21e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e21a      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd44:	2310      	movs	r3, #16
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e216      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd4c:	2320      	movs	r3, #32
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd52:	e212      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd54:	2340      	movs	r3, #64	@ 0x40
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd5a:	e20e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd5c:	2380      	movs	r3, #128	@ 0x80
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd62:	e20a      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a69      	ldr	r2, [pc, #420]	@ (800df10 <UART_SetConfig+0x33c>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d130      	bne.n	800ddd0 <UART_SetConfig+0x1fc>
 800dd6e:	4b67      	ldr	r3, [pc, #412]	@ (800df0c <UART_SetConfig+0x338>)
 800dd70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd72:	f003 0307 	and.w	r3, r3, #7
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	d826      	bhi.n	800ddc8 <UART_SetConfig+0x1f4>
 800dd7a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd80 <UART_SetConfig+0x1ac>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800dd99 	.word	0x0800dd99
 800dd84:	0800dda1 	.word	0x0800dda1
 800dd88:	0800dda9 	.word	0x0800dda9
 800dd8c:	0800ddb1 	.word	0x0800ddb1
 800dd90:	0800ddb9 	.word	0x0800ddb9
 800dd94:	0800ddc1 	.word	0x0800ddc1
 800dd98:	2300      	movs	r3, #0
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9e:	e1ec      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dda0:	2304      	movs	r3, #4
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda6:	e1e8      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dda8:	2308      	movs	r3, #8
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddae:	e1e4      	b.n	800e17a <UART_SetConfig+0x5a6>
 800ddb0:	2310      	movs	r3, #16
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb6:	e1e0      	b.n	800e17a <UART_SetConfig+0x5a6>
 800ddb8:	2320      	movs	r3, #32
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddbe:	e1dc      	b.n	800e17a <UART_SetConfig+0x5a6>
 800ddc0:	2340      	movs	r3, #64	@ 0x40
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc6:	e1d8      	b.n	800e17a <UART_SetConfig+0x5a6>
 800ddc8:	2380      	movs	r3, #128	@ 0x80
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddce:	e1d4      	b.n	800e17a <UART_SetConfig+0x5a6>
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a4f      	ldr	r2, [pc, #316]	@ (800df14 <UART_SetConfig+0x340>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d130      	bne.n	800de3c <UART_SetConfig+0x268>
 800ddda:	4b4c      	ldr	r3, [pc, #304]	@ (800df0c <UART_SetConfig+0x338>)
 800dddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddde:	f003 0307 	and.w	r3, r3, #7
 800dde2:	2b05      	cmp	r3, #5
 800dde4:	d826      	bhi.n	800de34 <UART_SetConfig+0x260>
 800dde6:	a201      	add	r2, pc, #4	@ (adr r2, 800ddec <UART_SetConfig+0x218>)
 800dde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddec:	0800de05 	.word	0x0800de05
 800ddf0:	0800de0d 	.word	0x0800de0d
 800ddf4:	0800de15 	.word	0x0800de15
 800ddf8:	0800de1d 	.word	0x0800de1d
 800ddfc:	0800de25 	.word	0x0800de25
 800de00:	0800de2d 	.word	0x0800de2d
 800de04:	2300      	movs	r3, #0
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0a:	e1b6      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de0c:	2304      	movs	r3, #4
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de12:	e1b2      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de14:	2308      	movs	r3, #8
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1a:	e1ae      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de1c:	2310      	movs	r3, #16
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de22:	e1aa      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de24:	2320      	movs	r3, #32
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2a:	e1a6      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de2c:	2340      	movs	r3, #64	@ 0x40
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de32:	e1a2      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de34:	2380      	movs	r3, #128	@ 0x80
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de3a:	e19e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a35      	ldr	r2, [pc, #212]	@ (800df18 <UART_SetConfig+0x344>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d130      	bne.n	800dea8 <UART_SetConfig+0x2d4>
 800de46:	4b31      	ldr	r3, [pc, #196]	@ (800df0c <UART_SetConfig+0x338>)
 800de48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de4a:	f003 0307 	and.w	r3, r3, #7
 800de4e:	2b05      	cmp	r3, #5
 800de50:	d826      	bhi.n	800dea0 <UART_SetConfig+0x2cc>
 800de52:	a201      	add	r2, pc, #4	@ (adr r2, 800de58 <UART_SetConfig+0x284>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800de71 	.word	0x0800de71
 800de5c:	0800de79 	.word	0x0800de79
 800de60:	0800de81 	.word	0x0800de81
 800de64:	0800de89 	.word	0x0800de89
 800de68:	0800de91 	.word	0x0800de91
 800de6c:	0800de99 	.word	0x0800de99
 800de70:	2300      	movs	r3, #0
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de76:	e180      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de78:	2304      	movs	r3, #4
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de7e:	e17c      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de80:	2308      	movs	r3, #8
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de86:	e178      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de88:	2310      	movs	r3, #16
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de8e:	e174      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de90:	2320      	movs	r3, #32
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de96:	e170      	b.n	800e17a <UART_SetConfig+0x5a6>
 800de98:	2340      	movs	r3, #64	@ 0x40
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9e:	e16c      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dea0:	2380      	movs	r3, #128	@ 0x80
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea6:	e168      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a1b      	ldr	r2, [pc, #108]	@ (800df1c <UART_SetConfig+0x348>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d142      	bne.n	800df38 <UART_SetConfig+0x364>
 800deb2:	4b16      	ldr	r3, [pc, #88]	@ (800df0c <UART_SetConfig+0x338>)
 800deb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	2b05      	cmp	r3, #5
 800debc:	d838      	bhi.n	800df30 <UART_SetConfig+0x35c>
 800debe:	a201      	add	r2, pc, #4	@ (adr r2, 800dec4 <UART_SetConfig+0x2f0>)
 800dec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec4:	0800dedd 	.word	0x0800dedd
 800dec8:	0800dee5 	.word	0x0800dee5
 800decc:	0800deed 	.word	0x0800deed
 800ded0:	0800def5 	.word	0x0800def5
 800ded4:	0800df21 	.word	0x0800df21
 800ded8:	0800df29 	.word	0x0800df29
 800dedc:	2300      	movs	r3, #0
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dee2:	e14a      	b.n	800e17a <UART_SetConfig+0x5a6>
 800dee4:	2304      	movs	r3, #4
 800dee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deea:	e146      	b.n	800e17a <UART_SetConfig+0x5a6>
 800deec:	2308      	movs	r3, #8
 800deee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def2:	e142      	b.n	800e17a <UART_SetConfig+0x5a6>
 800def4:	2310      	movs	r3, #16
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defa:	e13e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800defc:	cfff69f3 	.word	0xcfff69f3
 800df00:	58000c00 	.word	0x58000c00
 800df04:	11fff4ff 	.word	0x11fff4ff
 800df08:	40011000 	.word	0x40011000
 800df0c:	58024400 	.word	0x58024400
 800df10:	40004400 	.word	0x40004400
 800df14:	40004800 	.word	0x40004800
 800df18:	40004c00 	.word	0x40004c00
 800df1c:	40005000 	.word	0x40005000
 800df20:	2320      	movs	r3, #32
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df26:	e128      	b.n	800e17a <UART_SetConfig+0x5a6>
 800df28:	2340      	movs	r3, #64	@ 0x40
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2e:	e124      	b.n	800e17a <UART_SetConfig+0x5a6>
 800df30:	2380      	movs	r3, #128	@ 0x80
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df36:	e120      	b.n	800e17a <UART_SetConfig+0x5a6>
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4acb      	ldr	r2, [pc, #812]	@ (800e26c <UART_SetConfig+0x698>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d176      	bne.n	800e030 <UART_SetConfig+0x45c>
 800df42:	4bcb      	ldr	r3, [pc, #812]	@ (800e270 <UART_SetConfig+0x69c>)
 800df44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df4a:	2b28      	cmp	r3, #40	@ 0x28
 800df4c:	d86c      	bhi.n	800e028 <UART_SetConfig+0x454>
 800df4e:	a201      	add	r2, pc, #4	@ (adr r2, 800df54 <UART_SetConfig+0x380>)
 800df50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df54:	0800dff9 	.word	0x0800dff9
 800df58:	0800e029 	.word	0x0800e029
 800df5c:	0800e029 	.word	0x0800e029
 800df60:	0800e029 	.word	0x0800e029
 800df64:	0800e029 	.word	0x0800e029
 800df68:	0800e029 	.word	0x0800e029
 800df6c:	0800e029 	.word	0x0800e029
 800df70:	0800e029 	.word	0x0800e029
 800df74:	0800e001 	.word	0x0800e001
 800df78:	0800e029 	.word	0x0800e029
 800df7c:	0800e029 	.word	0x0800e029
 800df80:	0800e029 	.word	0x0800e029
 800df84:	0800e029 	.word	0x0800e029
 800df88:	0800e029 	.word	0x0800e029
 800df8c:	0800e029 	.word	0x0800e029
 800df90:	0800e029 	.word	0x0800e029
 800df94:	0800e009 	.word	0x0800e009
 800df98:	0800e029 	.word	0x0800e029
 800df9c:	0800e029 	.word	0x0800e029
 800dfa0:	0800e029 	.word	0x0800e029
 800dfa4:	0800e029 	.word	0x0800e029
 800dfa8:	0800e029 	.word	0x0800e029
 800dfac:	0800e029 	.word	0x0800e029
 800dfb0:	0800e029 	.word	0x0800e029
 800dfb4:	0800e011 	.word	0x0800e011
 800dfb8:	0800e029 	.word	0x0800e029
 800dfbc:	0800e029 	.word	0x0800e029
 800dfc0:	0800e029 	.word	0x0800e029
 800dfc4:	0800e029 	.word	0x0800e029
 800dfc8:	0800e029 	.word	0x0800e029
 800dfcc:	0800e029 	.word	0x0800e029
 800dfd0:	0800e029 	.word	0x0800e029
 800dfd4:	0800e019 	.word	0x0800e019
 800dfd8:	0800e029 	.word	0x0800e029
 800dfdc:	0800e029 	.word	0x0800e029
 800dfe0:	0800e029 	.word	0x0800e029
 800dfe4:	0800e029 	.word	0x0800e029
 800dfe8:	0800e029 	.word	0x0800e029
 800dfec:	0800e029 	.word	0x0800e029
 800dff0:	0800e029 	.word	0x0800e029
 800dff4:	0800e021 	.word	0x0800e021
 800dff8:	2301      	movs	r3, #1
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffe:	e0bc      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e000:	2304      	movs	r3, #4
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e006:	e0b8      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e008:	2308      	movs	r3, #8
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00e:	e0b4      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e010:	2310      	movs	r3, #16
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e016:	e0b0      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e018:	2320      	movs	r3, #32
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e01e:	e0ac      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e020:	2340      	movs	r3, #64	@ 0x40
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e026:	e0a8      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e028:	2380      	movs	r3, #128	@ 0x80
 800e02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e02e:	e0a4      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a8f      	ldr	r2, [pc, #572]	@ (800e274 <UART_SetConfig+0x6a0>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d130      	bne.n	800e09c <UART_SetConfig+0x4c8>
 800e03a:	4b8d      	ldr	r3, [pc, #564]	@ (800e270 <UART_SetConfig+0x69c>)
 800e03c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e03e:	f003 0307 	and.w	r3, r3, #7
 800e042:	2b05      	cmp	r3, #5
 800e044:	d826      	bhi.n	800e094 <UART_SetConfig+0x4c0>
 800e046:	a201      	add	r2, pc, #4	@ (adr r2, 800e04c <UART_SetConfig+0x478>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e065 	.word	0x0800e065
 800e050:	0800e06d 	.word	0x0800e06d
 800e054:	0800e075 	.word	0x0800e075
 800e058:	0800e07d 	.word	0x0800e07d
 800e05c:	0800e085 	.word	0x0800e085
 800e060:	0800e08d 	.word	0x0800e08d
 800e064:	2300      	movs	r3, #0
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e06a:	e086      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e06c:	2304      	movs	r3, #4
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e072:	e082      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e074:	2308      	movs	r3, #8
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e07a:	e07e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e07c:	2310      	movs	r3, #16
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e082:	e07a      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e084:	2320      	movs	r3, #32
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e08a:	e076      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e08c:	2340      	movs	r3, #64	@ 0x40
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e092:	e072      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e094:	2380      	movs	r3, #128	@ 0x80
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e09a:	e06e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a75      	ldr	r2, [pc, #468]	@ (800e278 <UART_SetConfig+0x6a4>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d130      	bne.n	800e108 <UART_SetConfig+0x534>
 800e0a6:	4b72      	ldr	r3, [pc, #456]	@ (800e270 <UART_SetConfig+0x69c>)
 800e0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0aa:	f003 0307 	and.w	r3, r3, #7
 800e0ae:	2b05      	cmp	r3, #5
 800e0b0:	d826      	bhi.n	800e100 <UART_SetConfig+0x52c>
 800e0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b8 <UART_SetConfig+0x4e4>)
 800e0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b8:	0800e0d1 	.word	0x0800e0d1
 800e0bc:	0800e0d9 	.word	0x0800e0d9
 800e0c0:	0800e0e1 	.word	0x0800e0e1
 800e0c4:	0800e0e9 	.word	0x0800e0e9
 800e0c8:	0800e0f1 	.word	0x0800e0f1
 800e0cc:	0800e0f9 	.word	0x0800e0f9
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0d6:	e050      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e0d8:	2304      	movs	r3, #4
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0de:	e04c      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e0e0:	2308      	movs	r3, #8
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0e6:	e048      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e0e8:	2310      	movs	r3, #16
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ee:	e044      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e0f0:	2320      	movs	r3, #32
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0f6:	e040      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e0f8:	2340      	movs	r3, #64	@ 0x40
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0fe:	e03c      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e100:	2380      	movs	r3, #128	@ 0x80
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e106:	e038      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	4a5b      	ldr	r2, [pc, #364]	@ (800e27c <UART_SetConfig+0x6a8>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	d130      	bne.n	800e174 <UART_SetConfig+0x5a0>
 800e112:	4b57      	ldr	r3, [pc, #348]	@ (800e270 <UART_SetConfig+0x69c>)
 800e114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e116:	f003 0307 	and.w	r3, r3, #7
 800e11a:	2b05      	cmp	r3, #5
 800e11c:	d826      	bhi.n	800e16c <UART_SetConfig+0x598>
 800e11e:	a201      	add	r2, pc, #4	@ (adr r2, 800e124 <UART_SetConfig+0x550>)
 800e120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e124:	0800e13d 	.word	0x0800e13d
 800e128:	0800e145 	.word	0x0800e145
 800e12c:	0800e14d 	.word	0x0800e14d
 800e130:	0800e155 	.word	0x0800e155
 800e134:	0800e15d 	.word	0x0800e15d
 800e138:	0800e165 	.word	0x0800e165
 800e13c:	2302      	movs	r3, #2
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e142:	e01a      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e144:	2304      	movs	r3, #4
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e14a:	e016      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e14c:	2308      	movs	r3, #8
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e152:	e012      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e154:	2310      	movs	r3, #16
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e15a:	e00e      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e15c:	2320      	movs	r3, #32
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e162:	e00a      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e164:	2340      	movs	r3, #64	@ 0x40
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e16a:	e006      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e16c:	2380      	movs	r3, #128	@ 0x80
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e172:	e002      	b.n	800e17a <UART_SetConfig+0x5a6>
 800e174:	2380      	movs	r3, #128	@ 0x80
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a3f      	ldr	r2, [pc, #252]	@ (800e27c <UART_SetConfig+0x6a8>)
 800e180:	4293      	cmp	r3, r2
 800e182:	f040 80f8 	bne.w	800e376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e18a:	2b20      	cmp	r3, #32
 800e18c:	dc46      	bgt.n	800e21c <UART_SetConfig+0x648>
 800e18e:	2b02      	cmp	r3, #2
 800e190:	f2c0 8082 	blt.w	800e298 <UART_SetConfig+0x6c4>
 800e194:	3b02      	subs	r3, #2
 800e196:	2b1e      	cmp	r3, #30
 800e198:	d87e      	bhi.n	800e298 <UART_SetConfig+0x6c4>
 800e19a:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a0 <UART_SetConfig+0x5cc>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e223 	.word	0x0800e223
 800e1a4:	0800e299 	.word	0x0800e299
 800e1a8:	0800e22b 	.word	0x0800e22b
 800e1ac:	0800e299 	.word	0x0800e299
 800e1b0:	0800e299 	.word	0x0800e299
 800e1b4:	0800e299 	.word	0x0800e299
 800e1b8:	0800e23b 	.word	0x0800e23b
 800e1bc:	0800e299 	.word	0x0800e299
 800e1c0:	0800e299 	.word	0x0800e299
 800e1c4:	0800e299 	.word	0x0800e299
 800e1c8:	0800e299 	.word	0x0800e299
 800e1cc:	0800e299 	.word	0x0800e299
 800e1d0:	0800e299 	.word	0x0800e299
 800e1d4:	0800e299 	.word	0x0800e299
 800e1d8:	0800e24b 	.word	0x0800e24b
 800e1dc:	0800e299 	.word	0x0800e299
 800e1e0:	0800e299 	.word	0x0800e299
 800e1e4:	0800e299 	.word	0x0800e299
 800e1e8:	0800e299 	.word	0x0800e299
 800e1ec:	0800e299 	.word	0x0800e299
 800e1f0:	0800e299 	.word	0x0800e299
 800e1f4:	0800e299 	.word	0x0800e299
 800e1f8:	0800e299 	.word	0x0800e299
 800e1fc:	0800e299 	.word	0x0800e299
 800e200:	0800e299 	.word	0x0800e299
 800e204:	0800e299 	.word	0x0800e299
 800e208:	0800e299 	.word	0x0800e299
 800e20c:	0800e299 	.word	0x0800e299
 800e210:	0800e299 	.word	0x0800e299
 800e214:	0800e299 	.word	0x0800e299
 800e218:	0800e28b 	.word	0x0800e28b
 800e21c:	2b40      	cmp	r3, #64	@ 0x40
 800e21e:	d037      	beq.n	800e290 <UART_SetConfig+0x6bc>
 800e220:	e03a      	b.n	800e298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e222:	f7fd fb89 	bl	800b938 <HAL_RCCEx_GetD3PCLK1Freq>
 800e226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e228:	e03c      	b.n	800e2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e22a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd fb98 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e238:	e034      	b.n	800e2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e23a:	f107 0318 	add.w	r3, r7, #24
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fd fce4 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e248:	e02c      	b.n	800e2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e24a:	4b09      	ldr	r3, [pc, #36]	@ (800e270 <UART_SetConfig+0x69c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f003 0320 	and.w	r3, r3, #32
 800e252:	2b00      	cmp	r3, #0
 800e254:	d016      	beq.n	800e284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e256:	4b06      	ldr	r3, [pc, #24]	@ (800e270 <UART_SetConfig+0x69c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	08db      	lsrs	r3, r3, #3
 800e25c:	f003 0303 	and.w	r3, r3, #3
 800e260:	4a07      	ldr	r2, [pc, #28]	@ (800e280 <UART_SetConfig+0x6ac>)
 800e262:	fa22 f303 	lsr.w	r3, r2, r3
 800e266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e268:	e01c      	b.n	800e2a4 <UART_SetConfig+0x6d0>
 800e26a:	bf00      	nop
 800e26c:	40011400 	.word	0x40011400
 800e270:	58024400 	.word	0x58024400
 800e274:	40007800 	.word	0x40007800
 800e278:	40007c00 	.word	0x40007c00
 800e27c:	58000c00 	.word	0x58000c00
 800e280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e284:	4b9d      	ldr	r3, [pc, #628]	@ (800e4fc <UART_SetConfig+0x928>)
 800e286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e288:	e00c      	b.n	800e2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e28a:	4b9d      	ldr	r3, [pc, #628]	@ (800e500 <UART_SetConfig+0x92c>)
 800e28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e28e:	e009      	b.n	800e2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e296:	e005      	b.n	800e2a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e298:	2300      	movs	r3, #0
 800e29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e29c:	2301      	movs	r3, #1
 800e29e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 81de 	beq.w	800e668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2b0:	4a94      	ldr	r2, [pc, #592]	@ (800e504 <UART_SetConfig+0x930>)
 800e2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	685a      	ldr	r2, [r3, #4]
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	005b      	lsls	r3, r3, #1
 800e2c8:	4413      	add	r3, r2
 800e2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d305      	bcc.n	800e2dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d903      	bls.n	800e2e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e2e2:	e1c1      	b.n	800e668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	60bb      	str	r3, [r7, #8]
 800e2ea:	60fa      	str	r2, [r7, #12]
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f0:	4a84      	ldr	r2, [pc, #528]	@ (800e504 <UART_SetConfig+0x930>)
 800e2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	603b      	str	r3, [r7, #0]
 800e2fc:	607a      	str	r2, [r7, #4]
 800e2fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e306:	f7f2 f843 	bl	8000390 <__aeabi_uldivmod>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	4610      	mov	r0, r2
 800e310:	4619      	mov	r1, r3
 800e312:	f04f 0200 	mov.w	r2, #0
 800e316:	f04f 0300 	mov.w	r3, #0
 800e31a:	020b      	lsls	r3, r1, #8
 800e31c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e320:	0202      	lsls	r2, r0, #8
 800e322:	6979      	ldr	r1, [r7, #20]
 800e324:	6849      	ldr	r1, [r1, #4]
 800e326:	0849      	lsrs	r1, r1, #1
 800e328:	2000      	movs	r0, #0
 800e32a:	460c      	mov	r4, r1
 800e32c:	4605      	mov	r5, r0
 800e32e:	eb12 0804 	adds.w	r8, r2, r4
 800e332:	eb43 0905 	adc.w	r9, r3, r5
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	469a      	mov	sl, r3
 800e33e:	4693      	mov	fp, r2
 800e340:	4652      	mov	r2, sl
 800e342:	465b      	mov	r3, fp
 800e344:	4640      	mov	r0, r8
 800e346:	4649      	mov	r1, r9
 800e348:	f7f2 f822 	bl	8000390 <__aeabi_uldivmod>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4613      	mov	r3, r2
 800e352:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e35a:	d308      	bcc.n	800e36e <UART_SetConfig+0x79a>
 800e35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e35e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e362:	d204      	bcs.n	800e36e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e36a:	60da      	str	r2, [r3, #12]
 800e36c:	e17c      	b.n	800e668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e374:	e178      	b.n	800e668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	69db      	ldr	r3, [r3, #28]
 800e37a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e37e:	f040 80c5 	bne.w	800e50c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e386:	2b20      	cmp	r3, #32
 800e388:	dc48      	bgt.n	800e41c <UART_SetConfig+0x848>
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	db7b      	blt.n	800e486 <UART_SetConfig+0x8b2>
 800e38e:	2b20      	cmp	r3, #32
 800e390:	d879      	bhi.n	800e486 <UART_SetConfig+0x8b2>
 800e392:	a201      	add	r2, pc, #4	@ (adr r2, 800e398 <UART_SetConfig+0x7c4>)
 800e394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e398:	0800e423 	.word	0x0800e423
 800e39c:	0800e42b 	.word	0x0800e42b
 800e3a0:	0800e487 	.word	0x0800e487
 800e3a4:	0800e487 	.word	0x0800e487
 800e3a8:	0800e433 	.word	0x0800e433
 800e3ac:	0800e487 	.word	0x0800e487
 800e3b0:	0800e487 	.word	0x0800e487
 800e3b4:	0800e487 	.word	0x0800e487
 800e3b8:	0800e443 	.word	0x0800e443
 800e3bc:	0800e487 	.word	0x0800e487
 800e3c0:	0800e487 	.word	0x0800e487
 800e3c4:	0800e487 	.word	0x0800e487
 800e3c8:	0800e487 	.word	0x0800e487
 800e3cc:	0800e487 	.word	0x0800e487
 800e3d0:	0800e487 	.word	0x0800e487
 800e3d4:	0800e487 	.word	0x0800e487
 800e3d8:	0800e453 	.word	0x0800e453
 800e3dc:	0800e487 	.word	0x0800e487
 800e3e0:	0800e487 	.word	0x0800e487
 800e3e4:	0800e487 	.word	0x0800e487
 800e3e8:	0800e487 	.word	0x0800e487
 800e3ec:	0800e487 	.word	0x0800e487
 800e3f0:	0800e487 	.word	0x0800e487
 800e3f4:	0800e487 	.word	0x0800e487
 800e3f8:	0800e487 	.word	0x0800e487
 800e3fc:	0800e487 	.word	0x0800e487
 800e400:	0800e487 	.word	0x0800e487
 800e404:	0800e487 	.word	0x0800e487
 800e408:	0800e487 	.word	0x0800e487
 800e40c:	0800e487 	.word	0x0800e487
 800e410:	0800e487 	.word	0x0800e487
 800e414:	0800e487 	.word	0x0800e487
 800e418:	0800e479 	.word	0x0800e479
 800e41c:	2b40      	cmp	r3, #64	@ 0x40
 800e41e:	d02e      	beq.n	800e47e <UART_SetConfig+0x8aa>
 800e420:	e031      	b.n	800e486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e422:	f7fb fa91 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800e426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e428:	e033      	b.n	800e492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e42a:	f7fb faa3 	bl	8009974 <HAL_RCC_GetPCLK2Freq>
 800e42e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e430:	e02f      	b.n	800e492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e436:	4618      	mov	r0, r3
 800e438:	f7fd fa94 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e440:	e027      	b.n	800e492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e442:	f107 0318 	add.w	r3, r7, #24
 800e446:	4618      	mov	r0, r3
 800e448:	f7fd fbe0 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e450:	e01f      	b.n	800e492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e452:	4b2d      	ldr	r3, [pc, #180]	@ (800e508 <UART_SetConfig+0x934>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f003 0320 	and.w	r3, r3, #32
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d009      	beq.n	800e472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e45e:	4b2a      	ldr	r3, [pc, #168]	@ (800e508 <UART_SetConfig+0x934>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	08db      	lsrs	r3, r3, #3
 800e464:	f003 0303 	and.w	r3, r3, #3
 800e468:	4a24      	ldr	r2, [pc, #144]	@ (800e4fc <UART_SetConfig+0x928>)
 800e46a:	fa22 f303 	lsr.w	r3, r2, r3
 800e46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e470:	e00f      	b.n	800e492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e472:	4b22      	ldr	r3, [pc, #136]	@ (800e4fc <UART_SetConfig+0x928>)
 800e474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e476:	e00c      	b.n	800e492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e478:	4b21      	ldr	r3, [pc, #132]	@ (800e500 <UART_SetConfig+0x92c>)
 800e47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e47c:	e009      	b.n	800e492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e47e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e484:	e005      	b.n	800e492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e486:	2300      	movs	r3, #0
 800e488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e494:	2b00      	cmp	r3, #0
 800e496:	f000 80e7 	beq.w	800e668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49e:	4a19      	ldr	r2, [pc, #100]	@ (800e504 <UART_SetConfig+0x930>)
 800e4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4ac:	005a      	lsls	r2, r3, #1
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	085b      	lsrs	r3, r3, #1
 800e4b4:	441a      	add	r2, r3
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c2:	2b0f      	cmp	r3, #15
 800e4c4:	d916      	bls.n	800e4f4 <UART_SetConfig+0x920>
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4cc:	d212      	bcs.n	800e4f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	f023 030f 	bic.w	r3, r3, #15
 800e4d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4da:	085b      	lsrs	r3, r3, #1
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	f003 0307 	and.w	r3, r3, #7
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e4f0:	60da      	str	r2, [r3, #12]
 800e4f2:	e0b9      	b.n	800e668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e4fa:	e0b5      	b.n	800e668 <UART_SetConfig+0xa94>
 800e4fc:	03d09000 	.word	0x03d09000
 800e500:	003d0900 	.word	0x003d0900
 800e504:	08012bc8 	.word	0x08012bc8
 800e508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e50c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e510:	2b20      	cmp	r3, #32
 800e512:	dc49      	bgt.n	800e5a8 <UART_SetConfig+0x9d4>
 800e514:	2b00      	cmp	r3, #0
 800e516:	db7c      	blt.n	800e612 <UART_SetConfig+0xa3e>
 800e518:	2b20      	cmp	r3, #32
 800e51a:	d87a      	bhi.n	800e612 <UART_SetConfig+0xa3e>
 800e51c:	a201      	add	r2, pc, #4	@ (adr r2, 800e524 <UART_SetConfig+0x950>)
 800e51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e522:	bf00      	nop
 800e524:	0800e5af 	.word	0x0800e5af
 800e528:	0800e5b7 	.word	0x0800e5b7
 800e52c:	0800e613 	.word	0x0800e613
 800e530:	0800e613 	.word	0x0800e613
 800e534:	0800e5bf 	.word	0x0800e5bf
 800e538:	0800e613 	.word	0x0800e613
 800e53c:	0800e613 	.word	0x0800e613
 800e540:	0800e613 	.word	0x0800e613
 800e544:	0800e5cf 	.word	0x0800e5cf
 800e548:	0800e613 	.word	0x0800e613
 800e54c:	0800e613 	.word	0x0800e613
 800e550:	0800e613 	.word	0x0800e613
 800e554:	0800e613 	.word	0x0800e613
 800e558:	0800e613 	.word	0x0800e613
 800e55c:	0800e613 	.word	0x0800e613
 800e560:	0800e613 	.word	0x0800e613
 800e564:	0800e5df 	.word	0x0800e5df
 800e568:	0800e613 	.word	0x0800e613
 800e56c:	0800e613 	.word	0x0800e613
 800e570:	0800e613 	.word	0x0800e613
 800e574:	0800e613 	.word	0x0800e613
 800e578:	0800e613 	.word	0x0800e613
 800e57c:	0800e613 	.word	0x0800e613
 800e580:	0800e613 	.word	0x0800e613
 800e584:	0800e613 	.word	0x0800e613
 800e588:	0800e613 	.word	0x0800e613
 800e58c:	0800e613 	.word	0x0800e613
 800e590:	0800e613 	.word	0x0800e613
 800e594:	0800e613 	.word	0x0800e613
 800e598:	0800e613 	.word	0x0800e613
 800e59c:	0800e613 	.word	0x0800e613
 800e5a0:	0800e613 	.word	0x0800e613
 800e5a4:	0800e605 	.word	0x0800e605
 800e5a8:	2b40      	cmp	r3, #64	@ 0x40
 800e5aa:	d02e      	beq.n	800e60a <UART_SetConfig+0xa36>
 800e5ac:	e031      	b.n	800e612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5ae:	f7fb f9cb 	bl	8009948 <HAL_RCC_GetPCLK1Freq>
 800e5b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e5b4:	e033      	b.n	800e61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5b6:	f7fb f9dd 	bl	8009974 <HAL_RCC_GetPCLK2Freq>
 800e5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e5bc:	e02f      	b.n	800e61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fd f9ce 	bl	800b964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5cc:	e027      	b.n	800e61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5ce:	f107 0318 	add.w	r3, r7, #24
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fd fb1a 	bl	800bc0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5dc:	e01f      	b.n	800e61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5de:	4b2d      	ldr	r3, [pc, #180]	@ (800e694 <UART_SetConfig+0xac0>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f003 0320 	and.w	r3, r3, #32
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d009      	beq.n	800e5fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800e694 <UART_SetConfig+0xac0>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	08db      	lsrs	r3, r3, #3
 800e5f0:	f003 0303 	and.w	r3, r3, #3
 800e5f4:	4a28      	ldr	r2, [pc, #160]	@ (800e698 <UART_SetConfig+0xac4>)
 800e5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5fc:	e00f      	b.n	800e61e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e5fe:	4b26      	ldr	r3, [pc, #152]	@ (800e698 <UART_SetConfig+0xac4>)
 800e600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e602:	e00c      	b.n	800e61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e604:	4b25      	ldr	r3, [pc, #148]	@ (800e69c <UART_SetConfig+0xac8>)
 800e606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e608:	e009      	b.n	800e61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e610:	e005      	b.n	800e61e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e612:	2300      	movs	r3, #0
 800e614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e61c:	bf00      	nop
    }

    if (pclk != 0U)
 800e61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d021      	beq.n	800e668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e628:	4a1d      	ldr	r2, [pc, #116]	@ (800e6a0 <UART_SetConfig+0xacc>)
 800e62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e62e:	461a      	mov	r2, r3
 800e630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e632:	fbb3 f2f2 	udiv	r2, r3, r2
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	085b      	lsrs	r3, r3, #1
 800e63c:	441a      	add	r2, r3
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	fbb2 f3f3 	udiv	r3, r2, r3
 800e646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64a:	2b0f      	cmp	r3, #15
 800e64c:	d909      	bls.n	800e662 <UART_SetConfig+0xa8e>
 800e64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e654:	d205      	bcs.n	800e662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e658:	b29a      	uxth	r2, r3
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	60da      	str	r2, [r3, #12]
 800e660:	e002      	b.n	800e668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	2201      	movs	r2, #1
 800e674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2200      	movs	r2, #0
 800e67c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	2200      	movs	r2, #0
 800e682:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e684:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3748      	adds	r7, #72	@ 0x48
 800e68c:	46bd      	mov	sp, r7
 800e68e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e692:	bf00      	nop
 800e694:	58024400 	.word	0x58024400
 800e698:	03d09000 	.word	0x03d09000
 800e69c:	003d0900 	.word	0x003d0900
 800e6a0:	08012bc8 	.word	0x08012bc8

0800e6a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6b0:	f003 0301 	and.w	r3, r3, #1
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00a      	beq.n	800e6ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	685b      	ldr	r3, [r3, #4]
 800e6be:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6d2:	f003 0302 	and.w	r3, r3, #2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d00a      	beq.n	800e6f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	430a      	orrs	r2, r1
 800e6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6f4:	f003 0304 	and.w	r3, r3, #4
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00a      	beq.n	800e712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	430a      	orrs	r2, r1
 800e710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e716:	f003 0308 	and.w	r3, r3, #8
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00a      	beq.n	800e734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	430a      	orrs	r2, r1
 800e732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e738:	f003 0310 	and.w	r3, r3, #16
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00a      	beq.n	800e756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	689b      	ldr	r3, [r3, #8]
 800e746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	430a      	orrs	r2, r1
 800e754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e75a:	f003 0320 	and.w	r3, r3, #32
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00a      	beq.n	800e778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	430a      	orrs	r2, r1
 800e776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01a      	beq.n	800e7ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	430a      	orrs	r2, r1
 800e798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e79e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7a2:	d10a      	bne.n	800e7ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	430a      	orrs	r2, r1
 800e7b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	605a      	str	r2, [r3, #4]
  }
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b098      	sub	sp, #96	@ 0x60
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7f8:	f7f6 fc3c 	bl	8005074 <HAL_GetTick>
 800e7fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f003 0308 	and.w	r3, r3, #8
 800e808:	2b08      	cmp	r3, #8
 800e80a:	d12f      	bne.n	800e86c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e80c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e814:	2200      	movs	r2, #0
 800e816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f88e 	bl	800e93c <UART_WaitOnFlagUntilTimeout>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d022      	beq.n	800e86c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82e:	e853 3f00 	ldrex	r3, [r3]
 800e832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e844:	647b      	str	r3, [r7, #68]	@ 0x44
 800e846:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e84c:	e841 2300 	strex	r3, r2, [r1]
 800e850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e6      	bne.n	800e826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2220      	movs	r2, #32
 800e85c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e868:	2303      	movs	r3, #3
 800e86a:	e063      	b.n	800e934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f003 0304 	and.w	r3, r3, #4
 800e876:	2b04      	cmp	r3, #4
 800e878:	d149      	bne.n	800e90e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e87a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e882:	2200      	movs	r2, #0
 800e884:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f857 	bl	800e93c <UART_WaitOnFlagUntilTimeout>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d03c      	beq.n	800e90e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89c:	e853 3f00 	ldrex	r3, [r3]
 800e8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800e8a2:	6a3b      	ldr	r3, [r7, #32]
 800e8a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8ba:	e841 2300 	strex	r3, r2, [r1]
 800e8be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1e6      	bne.n	800e894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	e853 3f00 	ldrex	r3, [r3]
 800e8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f023 0301 	bic.w	r3, r3, #1
 800e8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8e6:	61fa      	str	r2, [r7, #28]
 800e8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ea:	69b9      	ldr	r1, [r7, #24]
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	e841 2300 	strex	r3, r2, [r1]
 800e8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1e5      	bne.n	800e8c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2220      	movs	r2, #32
 800e8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e90a:	2303      	movs	r3, #3
 800e90c:	e012      	b.n	800e934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2220      	movs	r2, #32
 800e912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2220      	movs	r2, #32
 800e91a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2200      	movs	r2, #0
 800e928:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3758      	adds	r7, #88	@ 0x58
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	603b      	str	r3, [r7, #0]
 800e948:	4613      	mov	r3, r2
 800e94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e94c:	e049      	b.n	800e9e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e954:	d045      	beq.n	800e9e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e956:	f7f6 fb8d 	bl	8005074 <HAL_GetTick>
 800e95a:	4602      	mov	r2, r0
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	69ba      	ldr	r2, [r7, #24]
 800e962:	429a      	cmp	r2, r3
 800e964:	d302      	bcc.n	800e96c <UART_WaitOnFlagUntilTimeout+0x30>
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e96c:	2303      	movs	r3, #3
 800e96e:	e048      	b.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d031      	beq.n	800e9e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	f003 0308 	and.w	r3, r3, #8
 800e988:	2b08      	cmp	r3, #8
 800e98a:	d110      	bne.n	800e9ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2208      	movs	r2, #8
 800e992:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f000 f839 	bl	800ea0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2208      	movs	r2, #8
 800e99e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e029      	b.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e9b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e9bc:	d111      	bne.n	800e9e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e9c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f000 f81f 	bl	800ea0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2220      	movs	r2, #32
 800e9d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	e00f      	b.n	800ea02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	69da      	ldr	r2, [r3, #28]
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	bf0c      	ite	eq
 800e9f2:	2301      	moveq	r3, #1
 800e9f4:	2300      	movne	r3, #0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	79fb      	ldrb	r3, [r7, #7]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d0a6      	beq.n	800e94e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b095      	sub	sp, #84	@ 0x54
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea1c:	e853 3f00 	ldrex	r3, [r3]
 800ea20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea32:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea3a:	e841 2300 	strex	r3, r2, [r1]
 800ea3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1e6      	bne.n	800ea14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	e853 3f00 	ldrex	r3, [r3]
 800ea54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea56:	69fa      	ldr	r2, [r7, #28]
 800ea58:	4b1e      	ldr	r3, [pc, #120]	@ (800ead4 <UART_EndRxTransfer+0xc8>)
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3308      	adds	r3, #8
 800ea64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ea68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e5      	bne.n	800ea46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d118      	bne.n	800eab4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	e853 3f00 	ldrex	r3, [r3]
 800ea8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	f023 0310 	bic.w	r3, r3, #16
 800ea96:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaa0:	61bb      	str	r3, [r7, #24]
 800eaa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	e841 2300 	strex	r3, r2, [r1]
 800eaac:	613b      	str	r3, [r7, #16]
   return(result);
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1e6      	bne.n	800ea82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2220      	movs	r2, #32
 800eab8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eac8:	bf00      	nop
 800eaca:	3754      	adds	r7, #84	@ 0x54
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	effffffe 	.word	0xeffffffe

0800ead8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ead8:	b480      	push	{r7}
 800eada:	b085      	sub	sp, #20
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d101      	bne.n	800eaee <HAL_UARTEx_DisableFifoMode+0x16>
 800eaea:	2302      	movs	r3, #2
 800eaec:	e027      	b.n	800eb3e <HAL_UARTEx_DisableFifoMode+0x66>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2224      	movs	r2, #36	@ 0x24
 800eafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f022 0201 	bic.w	r2, r2, #1
 800eb14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800eb1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
 800eb52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d101      	bne.n	800eb62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb5e:	2302      	movs	r3, #2
 800eb60:	e02d      	b.n	800ebbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2224      	movs	r2, #36	@ 0x24
 800eb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f022 0201 	bic.w	r2, r2, #1
 800eb88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	430a      	orrs	r2, r1
 800eb9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f850 	bl	800ec44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ebbc:	2300      	movs	r3, #0
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d101      	bne.n	800ebde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e02d      	b.n	800ec3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2224      	movs	r2, #36	@ 0x24
 800ebea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f022 0201 	bic.w	r2, r2, #1
 800ec04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	683a      	ldr	r2, [r7, #0]
 800ec16:	430a      	orrs	r2, r1
 800ec18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 f812 	bl	800ec44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2220      	movs	r2, #32
 800ec2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
	...

0800ec44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d108      	bne.n	800ec66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec64:	e031      	b.n	800ecca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec66:	2310      	movs	r3, #16
 800ec68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec6a:	2310      	movs	r3, #16
 800ec6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	0e5b      	lsrs	r3, r3, #25
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	f003 0307 	and.w	r3, r3, #7
 800ec7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	0f5b      	lsrs	r3, r3, #29
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	f003 0307 	and.w	r3, r3, #7
 800ec8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec8e:	7bbb      	ldrb	r3, [r7, #14]
 800ec90:	7b3a      	ldrb	r2, [r7, #12]
 800ec92:	4911      	ldr	r1, [pc, #68]	@ (800ecd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ec94:	5c8a      	ldrb	r2, [r1, r2]
 800ec96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec9a:	7b3a      	ldrb	r2, [r7, #12]
 800ec9c:	490f      	ldr	r1, [pc, #60]	@ (800ecdc <UARTEx_SetNbDataToProcess+0x98>)
 800ec9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eca0:	fb93 f3f2 	sdiv	r3, r3, r2
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	7b7a      	ldrb	r2, [r7, #13]
 800ecb0:	4909      	ldr	r1, [pc, #36]	@ (800ecd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ecb2:	5c8a      	ldrb	r2, [r1, r2]
 800ecb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ecb8:	7b7a      	ldrb	r2, [r7, #13]
 800ecba:	4908      	ldr	r1, [pc, #32]	@ (800ecdc <UARTEx_SetNbDataToProcess+0x98>)
 800ecbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ecca:	bf00      	nop
 800eccc:	3714      	adds	r7, #20
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	08012be0 	.word	0x08012be0
 800ecdc:	08012be8 	.word	0x08012be8

0800ece0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d121      	bne.n	800ed36 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	4b27      	ldr	r3, [pc, #156]	@ (800ed94 <FMC_SDRAM_Init+0xb4>)
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	6851      	ldr	r1, [r2, #4]
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	6892      	ldr	r2, [r2, #8]
 800ed02:	4311      	orrs	r1, r2
 800ed04:	683a      	ldr	r2, [r7, #0]
 800ed06:	68d2      	ldr	r2, [r2, #12]
 800ed08:	4311      	orrs	r1, r2
 800ed0a:	683a      	ldr	r2, [r7, #0]
 800ed0c:	6912      	ldr	r2, [r2, #16]
 800ed0e:	4311      	orrs	r1, r2
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	6952      	ldr	r2, [r2, #20]
 800ed14:	4311      	orrs	r1, r2
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	6992      	ldr	r2, [r2, #24]
 800ed1a:	4311      	orrs	r1, r2
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	69d2      	ldr	r2, [r2, #28]
 800ed20:	4311      	orrs	r1, r2
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	6a12      	ldr	r2, [r2, #32]
 800ed26:	4311      	orrs	r1, r2
 800ed28:	683a      	ldr	r2, [r7, #0]
 800ed2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ed2c:	430a      	orrs	r2, r1
 800ed2e:	431a      	orrs	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	e026      	b.n	800ed84 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	69d9      	ldr	r1, [r3, #28]
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	6a1b      	ldr	r3, [r3, #32]
 800ed46:	4319      	orrs	r1, r3
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed4c:	430b      	orrs	r3, r1
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	685a      	ldr	r2, [r3, #4]
 800ed58:	4b0e      	ldr	r3, [pc, #56]	@ (800ed94 <FMC_SDRAM_Init+0xb4>)
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	6851      	ldr	r1, [r2, #4]
 800ed60:	683a      	ldr	r2, [r7, #0]
 800ed62:	6892      	ldr	r2, [r2, #8]
 800ed64:	4311      	orrs	r1, r2
 800ed66:	683a      	ldr	r2, [r7, #0]
 800ed68:	68d2      	ldr	r2, [r2, #12]
 800ed6a:	4311      	orrs	r1, r2
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	6912      	ldr	r2, [r2, #16]
 800ed70:	4311      	orrs	r1, r2
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	6952      	ldr	r2, [r2, #20]
 800ed76:	4311      	orrs	r1, r2
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	6992      	ldr	r2, [r2, #24]
 800ed7c:	430a      	orrs	r2, r1
 800ed7e:	431a      	orrs	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	370c      	adds	r7, #12
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	ffff8000 	.word	0xffff8000

0800ed98 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d128      	bne.n	800edfc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	1e59      	subs	r1, r3, #1
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	3b01      	subs	r3, #1
 800edbe:	011b      	lsls	r3, r3, #4
 800edc0:	4319      	orrs	r1, r3
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	689b      	ldr	r3, [r3, #8]
 800edc6:	3b01      	subs	r3, #1
 800edc8:	021b      	lsls	r3, r3, #8
 800edca:	4319      	orrs	r1, r3
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	3b01      	subs	r3, #1
 800edd2:	031b      	lsls	r3, r3, #12
 800edd4:	4319      	orrs	r1, r3
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	691b      	ldr	r3, [r3, #16]
 800edda:	3b01      	subs	r3, #1
 800eddc:	041b      	lsls	r3, r3, #16
 800edde:	4319      	orrs	r1, r3
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	3b01      	subs	r3, #1
 800ede6:	051b      	lsls	r3, r3, #20
 800ede8:	4319      	orrs	r1, r3
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	699b      	ldr	r3, [r3, #24]
 800edee:	3b01      	subs	r3, #1
 800edf0:	061b      	lsls	r3, r3, #24
 800edf2:	430b      	orrs	r3, r1
 800edf4:	431a      	orrs	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	609a      	str	r2, [r3, #8]
 800edfa:	e02d      	b.n	800ee58 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	689a      	ldr	r2, [r3, #8]
 800ee00:	4b19      	ldr	r3, [pc, #100]	@ (800ee68 <FMC_SDRAM_Timing_Init+0xd0>)
 800ee02:	4013      	ands	r3, r2
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	68d2      	ldr	r2, [r2, #12]
 800ee08:	3a01      	subs	r2, #1
 800ee0a:	0311      	lsls	r1, r2, #12
 800ee0c:	68ba      	ldr	r2, [r7, #8]
 800ee0e:	6952      	ldr	r2, [r2, #20]
 800ee10:	3a01      	subs	r2, #1
 800ee12:	0512      	lsls	r2, r2, #20
 800ee14:	430a      	orrs	r2, r1
 800ee16:	431a      	orrs	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	1e59      	subs	r1, r3, #1
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	011b      	lsls	r3, r3, #4
 800ee32:	4319      	orrs	r1, r3
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	689b      	ldr	r3, [r3, #8]
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	021b      	lsls	r3, r3, #8
 800ee3c:	4319      	orrs	r1, r3
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	041b      	lsls	r3, r3, #16
 800ee46:	4319      	orrs	r1, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	699b      	ldr	r3, [r3, #24]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	061b      	lsls	r3, r3, #24
 800ee50:	430b      	orrs	r3, r1
 800ee52:	431a      	orrs	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3714      	adds	r7, #20
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop
 800ee68:	ff0f0fff 	.word	0xff0f0fff

0800ee6c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	691a      	ldr	r2, [r3, #16]
 800ee7c:	4b0c      	ldr	r3, [pc, #48]	@ (800eeb0 <FMC_SDRAM_SendCommand+0x44>)
 800ee7e:	4013      	ands	r3, r2
 800ee80:	68ba      	ldr	r2, [r7, #8]
 800ee82:	6811      	ldr	r1, [r2, #0]
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	6852      	ldr	r2, [r2, #4]
 800ee88:	4311      	orrs	r1, r2
 800ee8a:	68ba      	ldr	r2, [r7, #8]
 800ee8c:	6892      	ldr	r2, [r2, #8]
 800ee8e:	3a01      	subs	r2, #1
 800ee90:	0152      	lsls	r2, r2, #5
 800ee92:	4311      	orrs	r1, r2
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	68d2      	ldr	r2, [r2, #12]
 800ee98:	0252      	lsls	r2, r2, #9
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	431a      	orrs	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800eea2:	2300      	movs	r3, #0
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	ffc00000 	.word	0xffc00000

0800eeb4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	695a      	ldr	r2, [r3, #20]
 800eec2:	4b07      	ldr	r3, [pc, #28]	@ (800eee0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800eec4:	4013      	ands	r3, r2
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	0052      	lsls	r2, r2, #1
 800eeca:	431a      	orrs	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800eed0:	2300      	movs	r3, #0
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	370c      	adds	r7, #12
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	ffffc001 	.word	0xffffc001

0800eee4 <sniprintf>:
 800eee4:	b40c      	push	{r2, r3}
 800eee6:	b530      	push	{r4, r5, lr}
 800eee8:	4b17      	ldr	r3, [pc, #92]	@ (800ef48 <sniprintf+0x64>)
 800eeea:	1e0c      	subs	r4, r1, #0
 800eeec:	681d      	ldr	r5, [r3, #0]
 800eeee:	b09d      	sub	sp, #116	@ 0x74
 800eef0:	da08      	bge.n	800ef04 <sniprintf+0x20>
 800eef2:	238b      	movs	r3, #139	@ 0x8b
 800eef4:	602b      	str	r3, [r5, #0]
 800eef6:	f04f 30ff 	mov.w	r0, #4294967295
 800eefa:	b01d      	add	sp, #116	@ 0x74
 800eefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef00:	b002      	add	sp, #8
 800ef02:	4770      	bx	lr
 800ef04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ef08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef0c:	bf14      	ite	ne
 800ef0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef12:	4623      	moveq	r3, r4
 800ef14:	9304      	str	r3, [sp, #16]
 800ef16:	9307      	str	r3, [sp, #28]
 800ef18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef1c:	9002      	str	r0, [sp, #8]
 800ef1e:	9006      	str	r0, [sp, #24]
 800ef20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef24:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ef26:	ab21      	add	r3, sp, #132	@ 0x84
 800ef28:	a902      	add	r1, sp, #8
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	f000 f9b5 	bl	800f29c <_svfiprintf_r>
 800ef32:	1c43      	adds	r3, r0, #1
 800ef34:	bfbc      	itt	lt
 800ef36:	238b      	movlt	r3, #139	@ 0x8b
 800ef38:	602b      	strlt	r3, [r5, #0]
 800ef3a:	2c00      	cmp	r4, #0
 800ef3c:	d0dd      	beq.n	800eefa <sniprintf+0x16>
 800ef3e:	9b02      	ldr	r3, [sp, #8]
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e7d9      	b.n	800eefa <sniprintf+0x16>
 800ef46:	bf00      	nop
 800ef48:	24000088 	.word	0x24000088

0800ef4c <siprintf>:
 800ef4c:	b40e      	push	{r1, r2, r3}
 800ef4e:	b500      	push	{lr}
 800ef50:	b09c      	sub	sp, #112	@ 0x70
 800ef52:	ab1d      	add	r3, sp, #116	@ 0x74
 800ef54:	9002      	str	r0, [sp, #8]
 800ef56:	9006      	str	r0, [sp, #24]
 800ef58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef5c:	4809      	ldr	r0, [pc, #36]	@ (800ef84 <siprintf+0x38>)
 800ef5e:	9107      	str	r1, [sp, #28]
 800ef60:	9104      	str	r1, [sp, #16]
 800ef62:	4909      	ldr	r1, [pc, #36]	@ (800ef88 <siprintf+0x3c>)
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	9105      	str	r1, [sp, #20]
 800ef6a:	6800      	ldr	r0, [r0, #0]
 800ef6c:	9301      	str	r3, [sp, #4]
 800ef6e:	a902      	add	r1, sp, #8
 800ef70:	f000 f994 	bl	800f29c <_svfiprintf_r>
 800ef74:	9b02      	ldr	r3, [sp, #8]
 800ef76:	2200      	movs	r2, #0
 800ef78:	701a      	strb	r2, [r3, #0]
 800ef7a:	b01c      	add	sp, #112	@ 0x70
 800ef7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef80:	b003      	add	sp, #12
 800ef82:	4770      	bx	lr
 800ef84:	24000088 	.word	0x24000088
 800ef88:	ffff0208 	.word	0xffff0208

0800ef8c <memset>:
 800ef8c:	4402      	add	r2, r0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d100      	bne.n	800ef96 <memset+0xa>
 800ef94:	4770      	bx	lr
 800ef96:	f803 1b01 	strb.w	r1, [r3], #1
 800ef9a:	e7f9      	b.n	800ef90 <memset+0x4>

0800ef9c <__errno>:
 800ef9c:	4b01      	ldr	r3, [pc, #4]	@ (800efa4 <__errno+0x8>)
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	24000088 	.word	0x24000088

0800efa8 <__libc_init_array>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	4d0d      	ldr	r5, [pc, #52]	@ (800efe0 <__libc_init_array+0x38>)
 800efac:	4c0d      	ldr	r4, [pc, #52]	@ (800efe4 <__libc_init_array+0x3c>)
 800efae:	1b64      	subs	r4, r4, r5
 800efb0:	10a4      	asrs	r4, r4, #2
 800efb2:	2600      	movs	r6, #0
 800efb4:	42a6      	cmp	r6, r4
 800efb6:	d109      	bne.n	800efcc <__libc_init_array+0x24>
 800efb8:	4d0b      	ldr	r5, [pc, #44]	@ (800efe8 <__libc_init_array+0x40>)
 800efba:	4c0c      	ldr	r4, [pc, #48]	@ (800efec <__libc_init_array+0x44>)
 800efbc:	f000 fc66 	bl	800f88c <_init>
 800efc0:	1b64      	subs	r4, r4, r5
 800efc2:	10a4      	asrs	r4, r4, #2
 800efc4:	2600      	movs	r6, #0
 800efc6:	42a6      	cmp	r6, r4
 800efc8:	d105      	bne.n	800efd6 <__libc_init_array+0x2e>
 800efca:	bd70      	pop	{r4, r5, r6, pc}
 800efcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800efd0:	4798      	blx	r3
 800efd2:	3601      	adds	r6, #1
 800efd4:	e7ee      	b.n	800efb4 <__libc_init_array+0xc>
 800efd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800efda:	4798      	blx	r3
 800efdc:	3601      	adds	r6, #1
 800efde:	e7f2      	b.n	800efc6 <__libc_init_array+0x1e>
 800efe0:	08012c2c 	.word	0x08012c2c
 800efe4:	08012c2c 	.word	0x08012c2c
 800efe8:	08012c2c 	.word	0x08012c2c
 800efec:	08012c30 	.word	0x08012c30

0800eff0 <__retarget_lock_acquire_recursive>:
 800eff0:	4770      	bx	lr

0800eff2 <__retarget_lock_release_recursive>:
 800eff2:	4770      	bx	lr

0800eff4 <_free_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4605      	mov	r5, r0
 800eff8:	2900      	cmp	r1, #0
 800effa:	d041      	beq.n	800f080 <_free_r+0x8c>
 800effc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f000:	1f0c      	subs	r4, r1, #4
 800f002:	2b00      	cmp	r3, #0
 800f004:	bfb8      	it	lt
 800f006:	18e4      	addlt	r4, r4, r3
 800f008:	f000 f8e0 	bl	800f1cc <__malloc_lock>
 800f00c:	4a1d      	ldr	r2, [pc, #116]	@ (800f084 <_free_r+0x90>)
 800f00e:	6813      	ldr	r3, [r2, #0]
 800f010:	b933      	cbnz	r3, 800f020 <_free_r+0x2c>
 800f012:	6063      	str	r3, [r4, #4]
 800f014:	6014      	str	r4, [r2, #0]
 800f016:	4628      	mov	r0, r5
 800f018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f01c:	f000 b8dc 	b.w	800f1d8 <__malloc_unlock>
 800f020:	42a3      	cmp	r3, r4
 800f022:	d908      	bls.n	800f036 <_free_r+0x42>
 800f024:	6820      	ldr	r0, [r4, #0]
 800f026:	1821      	adds	r1, r4, r0
 800f028:	428b      	cmp	r3, r1
 800f02a:	bf01      	itttt	eq
 800f02c:	6819      	ldreq	r1, [r3, #0]
 800f02e:	685b      	ldreq	r3, [r3, #4]
 800f030:	1809      	addeq	r1, r1, r0
 800f032:	6021      	streq	r1, [r4, #0]
 800f034:	e7ed      	b.n	800f012 <_free_r+0x1e>
 800f036:	461a      	mov	r2, r3
 800f038:	685b      	ldr	r3, [r3, #4]
 800f03a:	b10b      	cbz	r3, 800f040 <_free_r+0x4c>
 800f03c:	42a3      	cmp	r3, r4
 800f03e:	d9fa      	bls.n	800f036 <_free_r+0x42>
 800f040:	6811      	ldr	r1, [r2, #0]
 800f042:	1850      	adds	r0, r2, r1
 800f044:	42a0      	cmp	r0, r4
 800f046:	d10b      	bne.n	800f060 <_free_r+0x6c>
 800f048:	6820      	ldr	r0, [r4, #0]
 800f04a:	4401      	add	r1, r0
 800f04c:	1850      	adds	r0, r2, r1
 800f04e:	4283      	cmp	r3, r0
 800f050:	6011      	str	r1, [r2, #0]
 800f052:	d1e0      	bne.n	800f016 <_free_r+0x22>
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	6053      	str	r3, [r2, #4]
 800f05a:	4408      	add	r0, r1
 800f05c:	6010      	str	r0, [r2, #0]
 800f05e:	e7da      	b.n	800f016 <_free_r+0x22>
 800f060:	d902      	bls.n	800f068 <_free_r+0x74>
 800f062:	230c      	movs	r3, #12
 800f064:	602b      	str	r3, [r5, #0]
 800f066:	e7d6      	b.n	800f016 <_free_r+0x22>
 800f068:	6820      	ldr	r0, [r4, #0]
 800f06a:	1821      	adds	r1, r4, r0
 800f06c:	428b      	cmp	r3, r1
 800f06e:	bf04      	itt	eq
 800f070:	6819      	ldreq	r1, [r3, #0]
 800f072:	685b      	ldreq	r3, [r3, #4]
 800f074:	6063      	str	r3, [r4, #4]
 800f076:	bf04      	itt	eq
 800f078:	1809      	addeq	r1, r1, r0
 800f07a:	6021      	streq	r1, [r4, #0]
 800f07c:	6054      	str	r4, [r2, #4]
 800f07e:	e7ca      	b.n	800f016 <_free_r+0x22>
 800f080:	bd38      	pop	{r3, r4, r5, pc}
 800f082:	bf00      	nop
 800f084:	240012e8 	.word	0x240012e8

0800f088 <sbrk_aligned>:
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	4e0f      	ldr	r6, [pc, #60]	@ (800f0c8 <sbrk_aligned+0x40>)
 800f08c:	460c      	mov	r4, r1
 800f08e:	6831      	ldr	r1, [r6, #0]
 800f090:	4605      	mov	r5, r0
 800f092:	b911      	cbnz	r1, 800f09a <sbrk_aligned+0x12>
 800f094:	f000 fba6 	bl	800f7e4 <_sbrk_r>
 800f098:	6030      	str	r0, [r6, #0]
 800f09a:	4621      	mov	r1, r4
 800f09c:	4628      	mov	r0, r5
 800f09e:	f000 fba1 	bl	800f7e4 <_sbrk_r>
 800f0a2:	1c43      	adds	r3, r0, #1
 800f0a4:	d103      	bne.n	800f0ae <sbrk_aligned+0x26>
 800f0a6:	f04f 34ff 	mov.w	r4, #4294967295
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	bd70      	pop	{r4, r5, r6, pc}
 800f0ae:	1cc4      	adds	r4, r0, #3
 800f0b0:	f024 0403 	bic.w	r4, r4, #3
 800f0b4:	42a0      	cmp	r0, r4
 800f0b6:	d0f8      	beq.n	800f0aa <sbrk_aligned+0x22>
 800f0b8:	1a21      	subs	r1, r4, r0
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	f000 fb92 	bl	800f7e4 <_sbrk_r>
 800f0c0:	3001      	adds	r0, #1
 800f0c2:	d1f2      	bne.n	800f0aa <sbrk_aligned+0x22>
 800f0c4:	e7ef      	b.n	800f0a6 <sbrk_aligned+0x1e>
 800f0c6:	bf00      	nop
 800f0c8:	240012e4 	.word	0x240012e4

0800f0cc <_malloc_r>:
 800f0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d0:	1ccd      	adds	r5, r1, #3
 800f0d2:	f025 0503 	bic.w	r5, r5, #3
 800f0d6:	3508      	adds	r5, #8
 800f0d8:	2d0c      	cmp	r5, #12
 800f0da:	bf38      	it	cc
 800f0dc:	250c      	movcc	r5, #12
 800f0de:	2d00      	cmp	r5, #0
 800f0e0:	4606      	mov	r6, r0
 800f0e2:	db01      	blt.n	800f0e8 <_malloc_r+0x1c>
 800f0e4:	42a9      	cmp	r1, r5
 800f0e6:	d904      	bls.n	800f0f2 <_malloc_r+0x26>
 800f0e8:	230c      	movs	r3, #12
 800f0ea:	6033      	str	r3, [r6, #0]
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f1c8 <_malloc_r+0xfc>
 800f0f6:	f000 f869 	bl	800f1cc <__malloc_lock>
 800f0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f0fe:	461c      	mov	r4, r3
 800f100:	bb44      	cbnz	r4, 800f154 <_malloc_r+0x88>
 800f102:	4629      	mov	r1, r5
 800f104:	4630      	mov	r0, r6
 800f106:	f7ff ffbf 	bl	800f088 <sbrk_aligned>
 800f10a:	1c43      	adds	r3, r0, #1
 800f10c:	4604      	mov	r4, r0
 800f10e:	d158      	bne.n	800f1c2 <_malloc_r+0xf6>
 800f110:	f8d8 4000 	ldr.w	r4, [r8]
 800f114:	4627      	mov	r7, r4
 800f116:	2f00      	cmp	r7, #0
 800f118:	d143      	bne.n	800f1a2 <_malloc_r+0xd6>
 800f11a:	2c00      	cmp	r4, #0
 800f11c:	d04b      	beq.n	800f1b6 <_malloc_r+0xea>
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	4639      	mov	r1, r7
 800f122:	4630      	mov	r0, r6
 800f124:	eb04 0903 	add.w	r9, r4, r3
 800f128:	f000 fb5c 	bl	800f7e4 <_sbrk_r>
 800f12c:	4581      	cmp	r9, r0
 800f12e:	d142      	bne.n	800f1b6 <_malloc_r+0xea>
 800f130:	6821      	ldr	r1, [r4, #0]
 800f132:	1a6d      	subs	r5, r5, r1
 800f134:	4629      	mov	r1, r5
 800f136:	4630      	mov	r0, r6
 800f138:	f7ff ffa6 	bl	800f088 <sbrk_aligned>
 800f13c:	3001      	adds	r0, #1
 800f13e:	d03a      	beq.n	800f1b6 <_malloc_r+0xea>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	442b      	add	r3, r5
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	f8d8 3000 	ldr.w	r3, [r8]
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	bb62      	cbnz	r2, 800f1a8 <_malloc_r+0xdc>
 800f14e:	f8c8 7000 	str.w	r7, [r8]
 800f152:	e00f      	b.n	800f174 <_malloc_r+0xa8>
 800f154:	6822      	ldr	r2, [r4, #0]
 800f156:	1b52      	subs	r2, r2, r5
 800f158:	d420      	bmi.n	800f19c <_malloc_r+0xd0>
 800f15a:	2a0b      	cmp	r2, #11
 800f15c:	d917      	bls.n	800f18e <_malloc_r+0xc2>
 800f15e:	1961      	adds	r1, r4, r5
 800f160:	42a3      	cmp	r3, r4
 800f162:	6025      	str	r5, [r4, #0]
 800f164:	bf18      	it	ne
 800f166:	6059      	strne	r1, [r3, #4]
 800f168:	6863      	ldr	r3, [r4, #4]
 800f16a:	bf08      	it	eq
 800f16c:	f8c8 1000 	streq.w	r1, [r8]
 800f170:	5162      	str	r2, [r4, r5]
 800f172:	604b      	str	r3, [r1, #4]
 800f174:	4630      	mov	r0, r6
 800f176:	f000 f82f 	bl	800f1d8 <__malloc_unlock>
 800f17a:	f104 000b 	add.w	r0, r4, #11
 800f17e:	1d23      	adds	r3, r4, #4
 800f180:	f020 0007 	bic.w	r0, r0, #7
 800f184:	1ac2      	subs	r2, r0, r3
 800f186:	bf1c      	itt	ne
 800f188:	1a1b      	subne	r3, r3, r0
 800f18a:	50a3      	strne	r3, [r4, r2]
 800f18c:	e7af      	b.n	800f0ee <_malloc_r+0x22>
 800f18e:	6862      	ldr	r2, [r4, #4]
 800f190:	42a3      	cmp	r3, r4
 800f192:	bf0c      	ite	eq
 800f194:	f8c8 2000 	streq.w	r2, [r8]
 800f198:	605a      	strne	r2, [r3, #4]
 800f19a:	e7eb      	b.n	800f174 <_malloc_r+0xa8>
 800f19c:	4623      	mov	r3, r4
 800f19e:	6864      	ldr	r4, [r4, #4]
 800f1a0:	e7ae      	b.n	800f100 <_malloc_r+0x34>
 800f1a2:	463c      	mov	r4, r7
 800f1a4:	687f      	ldr	r7, [r7, #4]
 800f1a6:	e7b6      	b.n	800f116 <_malloc_r+0x4a>
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	42a3      	cmp	r3, r4
 800f1ae:	d1fb      	bne.n	800f1a8 <_malloc_r+0xdc>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	6053      	str	r3, [r2, #4]
 800f1b4:	e7de      	b.n	800f174 <_malloc_r+0xa8>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	6033      	str	r3, [r6, #0]
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f000 f80c 	bl	800f1d8 <__malloc_unlock>
 800f1c0:	e794      	b.n	800f0ec <_malloc_r+0x20>
 800f1c2:	6005      	str	r5, [r0, #0]
 800f1c4:	e7d6      	b.n	800f174 <_malloc_r+0xa8>
 800f1c6:	bf00      	nop
 800f1c8:	240012e8 	.word	0x240012e8

0800f1cc <__malloc_lock>:
 800f1cc:	4801      	ldr	r0, [pc, #4]	@ (800f1d4 <__malloc_lock+0x8>)
 800f1ce:	f7ff bf0f 	b.w	800eff0 <__retarget_lock_acquire_recursive>
 800f1d2:	bf00      	nop
 800f1d4:	240012e0 	.word	0x240012e0

0800f1d8 <__malloc_unlock>:
 800f1d8:	4801      	ldr	r0, [pc, #4]	@ (800f1e0 <__malloc_unlock+0x8>)
 800f1da:	f7ff bf0a 	b.w	800eff2 <__retarget_lock_release_recursive>
 800f1de:	bf00      	nop
 800f1e0:	240012e0 	.word	0x240012e0

0800f1e4 <__ssputs_r>:
 800f1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e8:	688e      	ldr	r6, [r1, #8]
 800f1ea:	461f      	mov	r7, r3
 800f1ec:	42be      	cmp	r6, r7
 800f1ee:	680b      	ldr	r3, [r1, #0]
 800f1f0:	4682      	mov	sl, r0
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	4690      	mov	r8, r2
 800f1f6:	d82d      	bhi.n	800f254 <__ssputs_r+0x70>
 800f1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f200:	d026      	beq.n	800f250 <__ssputs_r+0x6c>
 800f202:	6965      	ldr	r5, [r4, #20]
 800f204:	6909      	ldr	r1, [r1, #16]
 800f206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f20a:	eba3 0901 	sub.w	r9, r3, r1
 800f20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f212:	1c7b      	adds	r3, r7, #1
 800f214:	444b      	add	r3, r9
 800f216:	106d      	asrs	r5, r5, #1
 800f218:	429d      	cmp	r5, r3
 800f21a:	bf38      	it	cc
 800f21c:	461d      	movcc	r5, r3
 800f21e:	0553      	lsls	r3, r2, #21
 800f220:	d527      	bpl.n	800f272 <__ssputs_r+0x8e>
 800f222:	4629      	mov	r1, r5
 800f224:	f7ff ff52 	bl	800f0cc <_malloc_r>
 800f228:	4606      	mov	r6, r0
 800f22a:	b360      	cbz	r0, 800f286 <__ssputs_r+0xa2>
 800f22c:	6921      	ldr	r1, [r4, #16]
 800f22e:	464a      	mov	r2, r9
 800f230:	f000 fae8 	bl	800f804 <memcpy>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f23e:	81a3      	strh	r3, [r4, #12]
 800f240:	6126      	str	r6, [r4, #16]
 800f242:	6165      	str	r5, [r4, #20]
 800f244:	444e      	add	r6, r9
 800f246:	eba5 0509 	sub.w	r5, r5, r9
 800f24a:	6026      	str	r6, [r4, #0]
 800f24c:	60a5      	str	r5, [r4, #8]
 800f24e:	463e      	mov	r6, r7
 800f250:	42be      	cmp	r6, r7
 800f252:	d900      	bls.n	800f256 <__ssputs_r+0x72>
 800f254:	463e      	mov	r6, r7
 800f256:	6820      	ldr	r0, [r4, #0]
 800f258:	4632      	mov	r2, r6
 800f25a:	4641      	mov	r1, r8
 800f25c:	f000 faa8 	bl	800f7b0 <memmove>
 800f260:	68a3      	ldr	r3, [r4, #8]
 800f262:	1b9b      	subs	r3, r3, r6
 800f264:	60a3      	str	r3, [r4, #8]
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	4433      	add	r3, r6
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	2000      	movs	r0, #0
 800f26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f272:	462a      	mov	r2, r5
 800f274:	f000 fad4 	bl	800f820 <_realloc_r>
 800f278:	4606      	mov	r6, r0
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d1e0      	bne.n	800f240 <__ssputs_r+0x5c>
 800f27e:	6921      	ldr	r1, [r4, #16]
 800f280:	4650      	mov	r0, sl
 800f282:	f7ff feb7 	bl	800eff4 <_free_r>
 800f286:	230c      	movs	r3, #12
 800f288:	f8ca 3000 	str.w	r3, [sl]
 800f28c:	89a3      	ldrh	r3, [r4, #12]
 800f28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	f04f 30ff 	mov.w	r0, #4294967295
 800f298:	e7e9      	b.n	800f26e <__ssputs_r+0x8a>
	...

0800f29c <_svfiprintf_r>:
 800f29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a0:	4698      	mov	r8, r3
 800f2a2:	898b      	ldrh	r3, [r1, #12]
 800f2a4:	061b      	lsls	r3, r3, #24
 800f2a6:	b09d      	sub	sp, #116	@ 0x74
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	460d      	mov	r5, r1
 800f2ac:	4614      	mov	r4, r2
 800f2ae:	d510      	bpl.n	800f2d2 <_svfiprintf_r+0x36>
 800f2b0:	690b      	ldr	r3, [r1, #16]
 800f2b2:	b973      	cbnz	r3, 800f2d2 <_svfiprintf_r+0x36>
 800f2b4:	2140      	movs	r1, #64	@ 0x40
 800f2b6:	f7ff ff09 	bl	800f0cc <_malloc_r>
 800f2ba:	6028      	str	r0, [r5, #0]
 800f2bc:	6128      	str	r0, [r5, #16]
 800f2be:	b930      	cbnz	r0, 800f2ce <_svfiprintf_r+0x32>
 800f2c0:	230c      	movs	r3, #12
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	b01d      	add	sp, #116	@ 0x74
 800f2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ce:	2340      	movs	r3, #64	@ 0x40
 800f2d0:	616b      	str	r3, [r5, #20]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2d6:	2320      	movs	r3, #32
 800f2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e0:	2330      	movs	r3, #48	@ 0x30
 800f2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f480 <_svfiprintf_r+0x1e4>
 800f2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2ea:	f04f 0901 	mov.w	r9, #1
 800f2ee:	4623      	mov	r3, r4
 800f2f0:	469a      	mov	sl, r3
 800f2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2f6:	b10a      	cbz	r2, 800f2fc <_svfiprintf_r+0x60>
 800f2f8:	2a25      	cmp	r2, #37	@ 0x25
 800f2fa:	d1f9      	bne.n	800f2f0 <_svfiprintf_r+0x54>
 800f2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800f300:	d00b      	beq.n	800f31a <_svfiprintf_r+0x7e>
 800f302:	465b      	mov	r3, fp
 800f304:	4622      	mov	r2, r4
 800f306:	4629      	mov	r1, r5
 800f308:	4638      	mov	r0, r7
 800f30a:	f7ff ff6b 	bl	800f1e4 <__ssputs_r>
 800f30e:	3001      	adds	r0, #1
 800f310:	f000 80a7 	beq.w	800f462 <_svfiprintf_r+0x1c6>
 800f314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f316:	445a      	add	r2, fp
 800f318:	9209      	str	r2, [sp, #36]	@ 0x24
 800f31a:	f89a 3000 	ldrb.w	r3, [sl]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	f000 809f 	beq.w	800f462 <_svfiprintf_r+0x1c6>
 800f324:	2300      	movs	r3, #0
 800f326:	f04f 32ff 	mov.w	r2, #4294967295
 800f32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f32e:	f10a 0a01 	add.w	sl, sl, #1
 800f332:	9304      	str	r3, [sp, #16]
 800f334:	9307      	str	r3, [sp, #28]
 800f336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f33c:	4654      	mov	r4, sl
 800f33e:	2205      	movs	r2, #5
 800f340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f344:	484e      	ldr	r0, [pc, #312]	@ (800f480 <_svfiprintf_r+0x1e4>)
 800f346:	f7f0 ffd3 	bl	80002f0 <memchr>
 800f34a:	9a04      	ldr	r2, [sp, #16]
 800f34c:	b9d8      	cbnz	r0, 800f386 <_svfiprintf_r+0xea>
 800f34e:	06d0      	lsls	r0, r2, #27
 800f350:	bf44      	itt	mi
 800f352:	2320      	movmi	r3, #32
 800f354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f358:	0711      	lsls	r1, r2, #28
 800f35a:	bf44      	itt	mi
 800f35c:	232b      	movmi	r3, #43	@ 0x2b
 800f35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f362:	f89a 3000 	ldrb.w	r3, [sl]
 800f366:	2b2a      	cmp	r3, #42	@ 0x2a
 800f368:	d015      	beq.n	800f396 <_svfiprintf_r+0xfa>
 800f36a:	9a07      	ldr	r2, [sp, #28]
 800f36c:	4654      	mov	r4, sl
 800f36e:	2000      	movs	r0, #0
 800f370:	f04f 0c0a 	mov.w	ip, #10
 800f374:	4621      	mov	r1, r4
 800f376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f37a:	3b30      	subs	r3, #48	@ 0x30
 800f37c:	2b09      	cmp	r3, #9
 800f37e:	d94b      	bls.n	800f418 <_svfiprintf_r+0x17c>
 800f380:	b1b0      	cbz	r0, 800f3b0 <_svfiprintf_r+0x114>
 800f382:	9207      	str	r2, [sp, #28]
 800f384:	e014      	b.n	800f3b0 <_svfiprintf_r+0x114>
 800f386:	eba0 0308 	sub.w	r3, r0, r8
 800f38a:	fa09 f303 	lsl.w	r3, r9, r3
 800f38e:	4313      	orrs	r3, r2
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	46a2      	mov	sl, r4
 800f394:	e7d2      	b.n	800f33c <_svfiprintf_r+0xa0>
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	1d19      	adds	r1, r3, #4
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	9103      	str	r1, [sp, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	bfbb      	ittet	lt
 800f3a2:	425b      	neglt	r3, r3
 800f3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3a8:	9307      	strge	r3, [sp, #28]
 800f3aa:	9307      	strlt	r3, [sp, #28]
 800f3ac:	bfb8      	it	lt
 800f3ae:	9204      	strlt	r2, [sp, #16]
 800f3b0:	7823      	ldrb	r3, [r4, #0]
 800f3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3b4:	d10a      	bne.n	800f3cc <_svfiprintf_r+0x130>
 800f3b6:	7863      	ldrb	r3, [r4, #1]
 800f3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3ba:	d132      	bne.n	800f422 <_svfiprintf_r+0x186>
 800f3bc:	9b03      	ldr	r3, [sp, #12]
 800f3be:	1d1a      	adds	r2, r3, #4
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	9203      	str	r2, [sp, #12]
 800f3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3c8:	3402      	adds	r4, #2
 800f3ca:	9305      	str	r3, [sp, #20]
 800f3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f490 <_svfiprintf_r+0x1f4>
 800f3d0:	7821      	ldrb	r1, [r4, #0]
 800f3d2:	2203      	movs	r2, #3
 800f3d4:	4650      	mov	r0, sl
 800f3d6:	f7f0 ff8b 	bl	80002f0 <memchr>
 800f3da:	b138      	cbz	r0, 800f3ec <_svfiprintf_r+0x150>
 800f3dc:	9b04      	ldr	r3, [sp, #16]
 800f3de:	eba0 000a 	sub.w	r0, r0, sl
 800f3e2:	2240      	movs	r2, #64	@ 0x40
 800f3e4:	4082      	lsls	r2, r0
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	3401      	adds	r4, #1
 800f3ea:	9304      	str	r3, [sp, #16]
 800f3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f0:	4824      	ldr	r0, [pc, #144]	@ (800f484 <_svfiprintf_r+0x1e8>)
 800f3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3f6:	2206      	movs	r2, #6
 800f3f8:	f7f0 ff7a 	bl	80002f0 <memchr>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d036      	beq.n	800f46e <_svfiprintf_r+0x1d2>
 800f400:	4b21      	ldr	r3, [pc, #132]	@ (800f488 <_svfiprintf_r+0x1ec>)
 800f402:	bb1b      	cbnz	r3, 800f44c <_svfiprintf_r+0x1b0>
 800f404:	9b03      	ldr	r3, [sp, #12]
 800f406:	3307      	adds	r3, #7
 800f408:	f023 0307 	bic.w	r3, r3, #7
 800f40c:	3308      	adds	r3, #8
 800f40e:	9303      	str	r3, [sp, #12]
 800f410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f412:	4433      	add	r3, r6
 800f414:	9309      	str	r3, [sp, #36]	@ 0x24
 800f416:	e76a      	b.n	800f2ee <_svfiprintf_r+0x52>
 800f418:	fb0c 3202 	mla	r2, ip, r2, r3
 800f41c:	460c      	mov	r4, r1
 800f41e:	2001      	movs	r0, #1
 800f420:	e7a8      	b.n	800f374 <_svfiprintf_r+0xd8>
 800f422:	2300      	movs	r3, #0
 800f424:	3401      	adds	r4, #1
 800f426:	9305      	str	r3, [sp, #20]
 800f428:	4619      	mov	r1, r3
 800f42a:	f04f 0c0a 	mov.w	ip, #10
 800f42e:	4620      	mov	r0, r4
 800f430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f434:	3a30      	subs	r2, #48	@ 0x30
 800f436:	2a09      	cmp	r2, #9
 800f438:	d903      	bls.n	800f442 <_svfiprintf_r+0x1a6>
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d0c6      	beq.n	800f3cc <_svfiprintf_r+0x130>
 800f43e:	9105      	str	r1, [sp, #20]
 800f440:	e7c4      	b.n	800f3cc <_svfiprintf_r+0x130>
 800f442:	fb0c 2101 	mla	r1, ip, r1, r2
 800f446:	4604      	mov	r4, r0
 800f448:	2301      	movs	r3, #1
 800f44a:	e7f0      	b.n	800f42e <_svfiprintf_r+0x192>
 800f44c:	ab03      	add	r3, sp, #12
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	462a      	mov	r2, r5
 800f452:	4b0e      	ldr	r3, [pc, #56]	@ (800f48c <_svfiprintf_r+0x1f0>)
 800f454:	a904      	add	r1, sp, #16
 800f456:	4638      	mov	r0, r7
 800f458:	f3af 8000 	nop.w
 800f45c:	1c42      	adds	r2, r0, #1
 800f45e:	4606      	mov	r6, r0
 800f460:	d1d6      	bne.n	800f410 <_svfiprintf_r+0x174>
 800f462:	89ab      	ldrh	r3, [r5, #12]
 800f464:	065b      	lsls	r3, r3, #25
 800f466:	f53f af2d 	bmi.w	800f2c4 <_svfiprintf_r+0x28>
 800f46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f46c:	e72c      	b.n	800f2c8 <_svfiprintf_r+0x2c>
 800f46e:	ab03      	add	r3, sp, #12
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	462a      	mov	r2, r5
 800f474:	4b05      	ldr	r3, [pc, #20]	@ (800f48c <_svfiprintf_r+0x1f0>)
 800f476:	a904      	add	r1, sp, #16
 800f478:	4638      	mov	r0, r7
 800f47a:	f000 f879 	bl	800f570 <_printf_i>
 800f47e:	e7ed      	b.n	800f45c <_svfiprintf_r+0x1c0>
 800f480:	08012bf0 	.word	0x08012bf0
 800f484:	08012bfa 	.word	0x08012bfa
 800f488:	00000000 	.word	0x00000000
 800f48c:	0800f1e5 	.word	0x0800f1e5
 800f490:	08012bf6 	.word	0x08012bf6

0800f494 <_printf_common>:
 800f494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f498:	4616      	mov	r6, r2
 800f49a:	4698      	mov	r8, r3
 800f49c:	688a      	ldr	r2, [r1, #8]
 800f49e:	690b      	ldr	r3, [r1, #16]
 800f4a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	bfb8      	it	lt
 800f4a8:	4613      	movlt	r3, r2
 800f4aa:	6033      	str	r3, [r6, #0]
 800f4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	b10a      	cbz	r2, 800f4ba <_printf_common+0x26>
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	6033      	str	r3, [r6, #0]
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	0699      	lsls	r1, r3, #26
 800f4be:	bf42      	ittt	mi
 800f4c0:	6833      	ldrmi	r3, [r6, #0]
 800f4c2:	3302      	addmi	r3, #2
 800f4c4:	6033      	strmi	r3, [r6, #0]
 800f4c6:	6825      	ldr	r5, [r4, #0]
 800f4c8:	f015 0506 	ands.w	r5, r5, #6
 800f4cc:	d106      	bne.n	800f4dc <_printf_common+0x48>
 800f4ce:	f104 0a19 	add.w	sl, r4, #25
 800f4d2:	68e3      	ldr	r3, [r4, #12]
 800f4d4:	6832      	ldr	r2, [r6, #0]
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	42ab      	cmp	r3, r5
 800f4da:	dc26      	bgt.n	800f52a <_printf_common+0x96>
 800f4dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4e0:	6822      	ldr	r2, [r4, #0]
 800f4e2:	3b00      	subs	r3, #0
 800f4e4:	bf18      	it	ne
 800f4e6:	2301      	movne	r3, #1
 800f4e8:	0692      	lsls	r2, r2, #26
 800f4ea:	d42b      	bmi.n	800f544 <_printf_common+0xb0>
 800f4ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4f0:	4641      	mov	r1, r8
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	47c8      	blx	r9
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d01e      	beq.n	800f538 <_printf_common+0xa4>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	6922      	ldr	r2, [r4, #16]
 800f4fe:	f003 0306 	and.w	r3, r3, #6
 800f502:	2b04      	cmp	r3, #4
 800f504:	bf02      	ittt	eq
 800f506:	68e5      	ldreq	r5, [r4, #12]
 800f508:	6833      	ldreq	r3, [r6, #0]
 800f50a:	1aed      	subeq	r5, r5, r3
 800f50c:	68a3      	ldr	r3, [r4, #8]
 800f50e:	bf0c      	ite	eq
 800f510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f514:	2500      	movne	r5, #0
 800f516:	4293      	cmp	r3, r2
 800f518:	bfc4      	itt	gt
 800f51a:	1a9b      	subgt	r3, r3, r2
 800f51c:	18ed      	addgt	r5, r5, r3
 800f51e:	2600      	movs	r6, #0
 800f520:	341a      	adds	r4, #26
 800f522:	42b5      	cmp	r5, r6
 800f524:	d11a      	bne.n	800f55c <_printf_common+0xc8>
 800f526:	2000      	movs	r0, #0
 800f528:	e008      	b.n	800f53c <_printf_common+0xa8>
 800f52a:	2301      	movs	r3, #1
 800f52c:	4652      	mov	r2, sl
 800f52e:	4641      	mov	r1, r8
 800f530:	4638      	mov	r0, r7
 800f532:	47c8      	blx	r9
 800f534:	3001      	adds	r0, #1
 800f536:	d103      	bne.n	800f540 <_printf_common+0xac>
 800f538:	f04f 30ff 	mov.w	r0, #4294967295
 800f53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f540:	3501      	adds	r5, #1
 800f542:	e7c6      	b.n	800f4d2 <_printf_common+0x3e>
 800f544:	18e1      	adds	r1, r4, r3
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	2030      	movs	r0, #48	@ 0x30
 800f54a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f54e:	4422      	add	r2, r4
 800f550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f558:	3302      	adds	r3, #2
 800f55a:	e7c7      	b.n	800f4ec <_printf_common+0x58>
 800f55c:	2301      	movs	r3, #1
 800f55e:	4622      	mov	r2, r4
 800f560:	4641      	mov	r1, r8
 800f562:	4638      	mov	r0, r7
 800f564:	47c8      	blx	r9
 800f566:	3001      	adds	r0, #1
 800f568:	d0e6      	beq.n	800f538 <_printf_common+0xa4>
 800f56a:	3601      	adds	r6, #1
 800f56c:	e7d9      	b.n	800f522 <_printf_common+0x8e>
	...

0800f570 <_printf_i>:
 800f570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	7e0f      	ldrb	r7, [r1, #24]
 800f576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f578:	2f78      	cmp	r7, #120	@ 0x78
 800f57a:	4691      	mov	r9, r2
 800f57c:	4680      	mov	r8, r0
 800f57e:	460c      	mov	r4, r1
 800f580:	469a      	mov	sl, r3
 800f582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f586:	d807      	bhi.n	800f598 <_printf_i+0x28>
 800f588:	2f62      	cmp	r7, #98	@ 0x62
 800f58a:	d80a      	bhi.n	800f5a2 <_printf_i+0x32>
 800f58c:	2f00      	cmp	r7, #0
 800f58e:	f000 80d2 	beq.w	800f736 <_printf_i+0x1c6>
 800f592:	2f58      	cmp	r7, #88	@ 0x58
 800f594:	f000 80b9 	beq.w	800f70a <_printf_i+0x19a>
 800f598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f59c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5a0:	e03a      	b.n	800f618 <_printf_i+0xa8>
 800f5a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5a6:	2b15      	cmp	r3, #21
 800f5a8:	d8f6      	bhi.n	800f598 <_printf_i+0x28>
 800f5aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f5b0 <_printf_i+0x40>)
 800f5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5b0:	0800f609 	.word	0x0800f609
 800f5b4:	0800f61d 	.word	0x0800f61d
 800f5b8:	0800f599 	.word	0x0800f599
 800f5bc:	0800f599 	.word	0x0800f599
 800f5c0:	0800f599 	.word	0x0800f599
 800f5c4:	0800f599 	.word	0x0800f599
 800f5c8:	0800f61d 	.word	0x0800f61d
 800f5cc:	0800f599 	.word	0x0800f599
 800f5d0:	0800f599 	.word	0x0800f599
 800f5d4:	0800f599 	.word	0x0800f599
 800f5d8:	0800f599 	.word	0x0800f599
 800f5dc:	0800f71d 	.word	0x0800f71d
 800f5e0:	0800f647 	.word	0x0800f647
 800f5e4:	0800f6d7 	.word	0x0800f6d7
 800f5e8:	0800f599 	.word	0x0800f599
 800f5ec:	0800f599 	.word	0x0800f599
 800f5f0:	0800f73f 	.word	0x0800f73f
 800f5f4:	0800f599 	.word	0x0800f599
 800f5f8:	0800f647 	.word	0x0800f647
 800f5fc:	0800f599 	.word	0x0800f599
 800f600:	0800f599 	.word	0x0800f599
 800f604:	0800f6df 	.word	0x0800f6df
 800f608:	6833      	ldr	r3, [r6, #0]
 800f60a:	1d1a      	adds	r2, r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6032      	str	r2, [r6, #0]
 800f610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f618:	2301      	movs	r3, #1
 800f61a:	e09d      	b.n	800f758 <_printf_i+0x1e8>
 800f61c:	6833      	ldr	r3, [r6, #0]
 800f61e:	6820      	ldr	r0, [r4, #0]
 800f620:	1d19      	adds	r1, r3, #4
 800f622:	6031      	str	r1, [r6, #0]
 800f624:	0606      	lsls	r6, r0, #24
 800f626:	d501      	bpl.n	800f62c <_printf_i+0xbc>
 800f628:	681d      	ldr	r5, [r3, #0]
 800f62a:	e003      	b.n	800f634 <_printf_i+0xc4>
 800f62c:	0645      	lsls	r5, r0, #25
 800f62e:	d5fb      	bpl.n	800f628 <_printf_i+0xb8>
 800f630:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f634:	2d00      	cmp	r5, #0
 800f636:	da03      	bge.n	800f640 <_printf_i+0xd0>
 800f638:	232d      	movs	r3, #45	@ 0x2d
 800f63a:	426d      	negs	r5, r5
 800f63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f640:	4859      	ldr	r0, [pc, #356]	@ (800f7a8 <_printf_i+0x238>)
 800f642:	230a      	movs	r3, #10
 800f644:	e011      	b.n	800f66a <_printf_i+0xfa>
 800f646:	6821      	ldr	r1, [r4, #0]
 800f648:	6833      	ldr	r3, [r6, #0]
 800f64a:	0608      	lsls	r0, r1, #24
 800f64c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f650:	d402      	bmi.n	800f658 <_printf_i+0xe8>
 800f652:	0649      	lsls	r1, r1, #25
 800f654:	bf48      	it	mi
 800f656:	b2ad      	uxthmi	r5, r5
 800f658:	2f6f      	cmp	r7, #111	@ 0x6f
 800f65a:	4853      	ldr	r0, [pc, #332]	@ (800f7a8 <_printf_i+0x238>)
 800f65c:	6033      	str	r3, [r6, #0]
 800f65e:	bf14      	ite	ne
 800f660:	230a      	movne	r3, #10
 800f662:	2308      	moveq	r3, #8
 800f664:	2100      	movs	r1, #0
 800f666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f66a:	6866      	ldr	r6, [r4, #4]
 800f66c:	60a6      	str	r6, [r4, #8]
 800f66e:	2e00      	cmp	r6, #0
 800f670:	bfa2      	ittt	ge
 800f672:	6821      	ldrge	r1, [r4, #0]
 800f674:	f021 0104 	bicge.w	r1, r1, #4
 800f678:	6021      	strge	r1, [r4, #0]
 800f67a:	b90d      	cbnz	r5, 800f680 <_printf_i+0x110>
 800f67c:	2e00      	cmp	r6, #0
 800f67e:	d04b      	beq.n	800f718 <_printf_i+0x1a8>
 800f680:	4616      	mov	r6, r2
 800f682:	fbb5 f1f3 	udiv	r1, r5, r3
 800f686:	fb03 5711 	mls	r7, r3, r1, r5
 800f68a:	5dc7      	ldrb	r7, [r0, r7]
 800f68c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f690:	462f      	mov	r7, r5
 800f692:	42bb      	cmp	r3, r7
 800f694:	460d      	mov	r5, r1
 800f696:	d9f4      	bls.n	800f682 <_printf_i+0x112>
 800f698:	2b08      	cmp	r3, #8
 800f69a:	d10b      	bne.n	800f6b4 <_printf_i+0x144>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	07df      	lsls	r7, r3, #31
 800f6a0:	d508      	bpl.n	800f6b4 <_printf_i+0x144>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	6861      	ldr	r1, [r4, #4]
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	bfde      	ittt	le
 800f6aa:	2330      	movle	r3, #48	@ 0x30
 800f6ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f6b4:	1b92      	subs	r2, r2, r6
 800f6b6:	6122      	str	r2, [r4, #16]
 800f6b8:	f8cd a000 	str.w	sl, [sp]
 800f6bc:	464b      	mov	r3, r9
 800f6be:	aa03      	add	r2, sp, #12
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	f7ff fee6 	bl	800f494 <_printf_common>
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d14a      	bne.n	800f762 <_printf_i+0x1f2>
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d0:	b004      	add	sp, #16
 800f6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	f043 0320 	orr.w	r3, r3, #32
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	4833      	ldr	r0, [pc, #204]	@ (800f7ac <_printf_i+0x23c>)
 800f6e0:	2778      	movs	r7, #120	@ 0x78
 800f6e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	6831      	ldr	r1, [r6, #0]
 800f6ea:	061f      	lsls	r7, r3, #24
 800f6ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6f0:	d402      	bmi.n	800f6f8 <_printf_i+0x188>
 800f6f2:	065f      	lsls	r7, r3, #25
 800f6f4:	bf48      	it	mi
 800f6f6:	b2ad      	uxthmi	r5, r5
 800f6f8:	6031      	str	r1, [r6, #0]
 800f6fa:	07d9      	lsls	r1, r3, #31
 800f6fc:	bf44      	itt	mi
 800f6fe:	f043 0320 	orrmi.w	r3, r3, #32
 800f702:	6023      	strmi	r3, [r4, #0]
 800f704:	b11d      	cbz	r5, 800f70e <_printf_i+0x19e>
 800f706:	2310      	movs	r3, #16
 800f708:	e7ac      	b.n	800f664 <_printf_i+0xf4>
 800f70a:	4827      	ldr	r0, [pc, #156]	@ (800f7a8 <_printf_i+0x238>)
 800f70c:	e7e9      	b.n	800f6e2 <_printf_i+0x172>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	f023 0320 	bic.w	r3, r3, #32
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	e7f6      	b.n	800f706 <_printf_i+0x196>
 800f718:	4616      	mov	r6, r2
 800f71a:	e7bd      	b.n	800f698 <_printf_i+0x128>
 800f71c:	6833      	ldr	r3, [r6, #0]
 800f71e:	6825      	ldr	r5, [r4, #0]
 800f720:	6961      	ldr	r1, [r4, #20]
 800f722:	1d18      	adds	r0, r3, #4
 800f724:	6030      	str	r0, [r6, #0]
 800f726:	062e      	lsls	r6, r5, #24
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	d501      	bpl.n	800f730 <_printf_i+0x1c0>
 800f72c:	6019      	str	r1, [r3, #0]
 800f72e:	e002      	b.n	800f736 <_printf_i+0x1c6>
 800f730:	0668      	lsls	r0, r5, #25
 800f732:	d5fb      	bpl.n	800f72c <_printf_i+0x1bc>
 800f734:	8019      	strh	r1, [r3, #0]
 800f736:	2300      	movs	r3, #0
 800f738:	6123      	str	r3, [r4, #16]
 800f73a:	4616      	mov	r6, r2
 800f73c:	e7bc      	b.n	800f6b8 <_printf_i+0x148>
 800f73e:	6833      	ldr	r3, [r6, #0]
 800f740:	1d1a      	adds	r2, r3, #4
 800f742:	6032      	str	r2, [r6, #0]
 800f744:	681e      	ldr	r6, [r3, #0]
 800f746:	6862      	ldr	r2, [r4, #4]
 800f748:	2100      	movs	r1, #0
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7f0 fdd0 	bl	80002f0 <memchr>
 800f750:	b108      	cbz	r0, 800f756 <_printf_i+0x1e6>
 800f752:	1b80      	subs	r0, r0, r6
 800f754:	6060      	str	r0, [r4, #4]
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	6123      	str	r3, [r4, #16]
 800f75a:	2300      	movs	r3, #0
 800f75c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f760:	e7aa      	b.n	800f6b8 <_printf_i+0x148>
 800f762:	6923      	ldr	r3, [r4, #16]
 800f764:	4632      	mov	r2, r6
 800f766:	4649      	mov	r1, r9
 800f768:	4640      	mov	r0, r8
 800f76a:	47d0      	blx	sl
 800f76c:	3001      	adds	r0, #1
 800f76e:	d0ad      	beq.n	800f6cc <_printf_i+0x15c>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	079b      	lsls	r3, r3, #30
 800f774:	d413      	bmi.n	800f79e <_printf_i+0x22e>
 800f776:	68e0      	ldr	r0, [r4, #12]
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	4298      	cmp	r0, r3
 800f77c:	bfb8      	it	lt
 800f77e:	4618      	movlt	r0, r3
 800f780:	e7a6      	b.n	800f6d0 <_printf_i+0x160>
 800f782:	2301      	movs	r3, #1
 800f784:	4632      	mov	r2, r6
 800f786:	4649      	mov	r1, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	47d0      	blx	sl
 800f78c:	3001      	adds	r0, #1
 800f78e:	d09d      	beq.n	800f6cc <_printf_i+0x15c>
 800f790:	3501      	adds	r5, #1
 800f792:	68e3      	ldr	r3, [r4, #12]
 800f794:	9903      	ldr	r1, [sp, #12]
 800f796:	1a5b      	subs	r3, r3, r1
 800f798:	42ab      	cmp	r3, r5
 800f79a:	dcf2      	bgt.n	800f782 <_printf_i+0x212>
 800f79c:	e7eb      	b.n	800f776 <_printf_i+0x206>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	f104 0619 	add.w	r6, r4, #25
 800f7a4:	e7f5      	b.n	800f792 <_printf_i+0x222>
 800f7a6:	bf00      	nop
 800f7a8:	08012c01 	.word	0x08012c01
 800f7ac:	08012c12 	.word	0x08012c12

0800f7b0 <memmove>:
 800f7b0:	4288      	cmp	r0, r1
 800f7b2:	b510      	push	{r4, lr}
 800f7b4:	eb01 0402 	add.w	r4, r1, r2
 800f7b8:	d902      	bls.n	800f7c0 <memmove+0x10>
 800f7ba:	4284      	cmp	r4, r0
 800f7bc:	4623      	mov	r3, r4
 800f7be:	d807      	bhi.n	800f7d0 <memmove+0x20>
 800f7c0:	1e43      	subs	r3, r0, #1
 800f7c2:	42a1      	cmp	r1, r4
 800f7c4:	d008      	beq.n	800f7d8 <memmove+0x28>
 800f7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ce:	e7f8      	b.n	800f7c2 <memmove+0x12>
 800f7d0:	4402      	add	r2, r0
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	428a      	cmp	r2, r1
 800f7d6:	d100      	bne.n	800f7da <memmove+0x2a>
 800f7d8:	bd10      	pop	{r4, pc}
 800f7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7e2:	e7f7      	b.n	800f7d4 <memmove+0x24>

0800f7e4 <_sbrk_r>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	4d06      	ldr	r5, [pc, #24]	@ (800f800 <_sbrk_r+0x1c>)
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	602b      	str	r3, [r5, #0]
 800f7f0:	f7f4 ff04 	bl	80045fc <_sbrk>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_sbrk_r+0x1a>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_sbrk_r+0x1a>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	240012dc 	.word	0x240012dc

0800f804 <memcpy>:
 800f804:	440a      	add	r2, r1
 800f806:	4291      	cmp	r1, r2
 800f808:	f100 33ff 	add.w	r3, r0, #4294967295
 800f80c:	d100      	bne.n	800f810 <memcpy+0xc>
 800f80e:	4770      	bx	lr
 800f810:	b510      	push	{r4, lr}
 800f812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f81a:	4291      	cmp	r1, r2
 800f81c:	d1f9      	bne.n	800f812 <memcpy+0xe>
 800f81e:	bd10      	pop	{r4, pc}

0800f820 <_realloc_r>:
 800f820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f824:	4680      	mov	r8, r0
 800f826:	4615      	mov	r5, r2
 800f828:	460c      	mov	r4, r1
 800f82a:	b921      	cbnz	r1, 800f836 <_realloc_r+0x16>
 800f82c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f830:	4611      	mov	r1, r2
 800f832:	f7ff bc4b 	b.w	800f0cc <_malloc_r>
 800f836:	b92a      	cbnz	r2, 800f844 <_realloc_r+0x24>
 800f838:	f7ff fbdc 	bl	800eff4 <_free_r>
 800f83c:	2400      	movs	r4, #0
 800f83e:	4620      	mov	r0, r4
 800f840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f844:	f000 f81a 	bl	800f87c <_malloc_usable_size_r>
 800f848:	4285      	cmp	r5, r0
 800f84a:	4606      	mov	r6, r0
 800f84c:	d802      	bhi.n	800f854 <_realloc_r+0x34>
 800f84e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f852:	d8f4      	bhi.n	800f83e <_realloc_r+0x1e>
 800f854:	4629      	mov	r1, r5
 800f856:	4640      	mov	r0, r8
 800f858:	f7ff fc38 	bl	800f0cc <_malloc_r>
 800f85c:	4607      	mov	r7, r0
 800f85e:	2800      	cmp	r0, #0
 800f860:	d0ec      	beq.n	800f83c <_realloc_r+0x1c>
 800f862:	42b5      	cmp	r5, r6
 800f864:	462a      	mov	r2, r5
 800f866:	4621      	mov	r1, r4
 800f868:	bf28      	it	cs
 800f86a:	4632      	movcs	r2, r6
 800f86c:	f7ff ffca 	bl	800f804 <memcpy>
 800f870:	4621      	mov	r1, r4
 800f872:	4640      	mov	r0, r8
 800f874:	f7ff fbbe 	bl	800eff4 <_free_r>
 800f878:	463c      	mov	r4, r7
 800f87a:	e7e0      	b.n	800f83e <_realloc_r+0x1e>

0800f87c <_malloc_usable_size_r>:
 800f87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f880:	1f18      	subs	r0, r3, #4
 800f882:	2b00      	cmp	r3, #0
 800f884:	bfbc      	itt	lt
 800f886:	580b      	ldrlt	r3, [r1, r0]
 800f888:	18c0      	addlt	r0, r0, r3
 800f88a:	4770      	bx	lr

0800f88c <_init>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	bf00      	nop
 800f890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f892:	bc08      	pop	{r3}
 800f894:	469e      	mov	lr, r3
 800f896:	4770      	bx	lr

0800f898 <_fini>:
 800f898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89a:	bf00      	nop
 800f89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f89e:	bc08      	pop	{r3}
 800f8a0:	469e      	mov	lr, r3
 800f8a2:	4770      	bx	lr
